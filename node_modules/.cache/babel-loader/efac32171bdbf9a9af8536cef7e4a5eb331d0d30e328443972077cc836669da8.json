{"ast":null,"code":"// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\nimport{processFormData}from'./FormDataMapper';// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// DEBUG: Log that we're using the DYNAMIC ID template\nconsole.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');console.log('📅 Template updated at:',new Date().toISOString());console.log('📊 Raw form data received:',formData);// Process and validate form data using the FormDataMapper\nlet processedData;try{processedData=processFormData(formData,{calculateTotals:options.calculateTotals!==false,validate:options.validate!==false,formatForXML:true,throwOnValidationError:options.throwOnValidationError||false});console.log('📊 Processed form data:',processedData);}catch(error){console.error('❌ Form data processing failed:',error);if(options.throwOnValidationError){throw error;}// Fallback to using raw data\nprocessedData=formData||{};}// Use processed data for XML generation, fallback to original data\nconst data=processedData||formData||{};// Helper function to safely get field values with fallbacks (for simple fields)\nconst getFieldValue=function(fieldName){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';return data[fieldName]||defaultValue;};// Enhanced helper function to get field values by dynamic ID or static fallback\nconst getDynamicFieldValue=function(fieldArray,possibleIds){let defaultValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';if(!fieldArray||!Array.isArray(fieldArray)){return defaultValue;}// Try each possible ID in order of preference\nfor(const fieldId of possibleIds){const field=fieldArray.find(f=>f.id===fieldId);if(field&&field.value){return field.value;}}return defaultValue;};// Helper function to get company field values with dynamic ID support\nconst getCompanyFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.companyFields&&Array.isArray(data.companyFields)){// First try the static ID, then try dynamic IDs that might have been generated\nconst possibleIds=[staticId,\"company-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.companyFields.filter(f=>f.id.includes(staticId.replace('company-',''))).map(f=>f.id)];return getDynamicFieldValue(data.companyFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get purchase order field values with dynamic ID support\nconst getPOFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.purchaseOrderFields&&Array.isArray(data.purchaseOrderFields)){const possibleIds=[staticId,\"po-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.purchaseOrderFields.filter(f=>f.id.includes(staticId.replace('po-',''))).map(f=>f.id)];return getDynamicFieldValue(data.purchaseOrderFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get vendor field values with dynamic ID support\nconst getVendorFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.vendorFields&&Array.isArray(data.vendorFields)){const possibleIds=[staticId,\"vendor-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.vendorFields.filter(f=>f.id.includes(staticId.replace('vendor-',''))).map(f=>f.id)];return getDynamicFieldValue(data.vendorFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get ship-to field values with dynamic ID support\nconst getShipToFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.shipToFields&&Array.isArray(data.shipToFields)){const possibleIds=[staticId,\"ship-to-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.shipToFields.filter(f=>f.id.includes(staticId.replace('ship-to-',''))).map(f=>f.id)];return getDynamicFieldValue(data.shipToFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get totals field values with dynamic ID support\nconst getTotalsFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.totalsFields&&Array.isArray(data.totalsFields)){const possibleIds=[staticId,\"totals-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.totalsFields.filter(f=>f.id.includes(staticId)).map(f=>f.id)];return getDynamicFieldValue(data.totalsFields,possibleIds,defaultValue);}return defaultValue;};// ============================================================================\n// MODULAR XML BUILDER FUNCTIONS\n// ============================================================================\n// Build Company Information XML\nconst buildCompanyXML=()=>{return\"\\n      <td style=\\\"width: 65%; padding-right: 20px;\\\" data-section=\\\"company-info\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"header-company\\\" style=\\\"text-align: left;\\\" data-field=\\\"company-name\\\">\".concat(getCompanyFieldValue('company-name','[Company Name]'),\"</td>\\n          </tr>\\n          <tr>\\n            <td style=\\\"text-align: left;\\\" data-field=\\\"company-address\\\">\").concat(getCompanyFieldValue('company-address','[Street Address]'),\"</td>\\n          </tr>\\n          <tr>\\n            <td style=\\\"text-align: left;\\\" data-field=\\\"company-city-state\\\">\").concat(getCompanyFieldValue('company-city-state','[City, ST ZIP]'),\"</td>\\n          </tr>\\n          <tr>\\n            <td style=\\\"text-align: left;\\\" data-field=\\\"company-phone\\\">Phone: \").concat(getCompanyFieldValue('company-phone','(000) 000-0000'),\"</td>\\n          </tr>\\n          <tr>\\n            <td style=\\\"text-align: left;\\\" data-field=\\\"company-fax\\\">Fax: \").concat(getCompanyFieldValue('company-fax','(000) 000-0000'),\"</td>\\n          </tr>\\n          <tr>\\n            <td style=\\\"text-align: left;\\\" data-field=\\\"company-website\\\">Website: \").concat(getCompanyFieldValue('company-website','www.example.com'),\"</td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Purchase Order Information XML\nconst buildPurchaseOrderXML=()=>{return\"\\n      <td style=\\\"width: 35%; padding-left: 20px;\\\" align=\\\"right\\\" data-section=\\\"purchase-order-info\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"header-title\\\" style=\\\"text-align: right;\\\" data-field=\\\"po-title\\\">\".concat(getPOFieldValue('po-title','PURCHASE ORDER'),\"</td>\\n          </tr>\\n          <tr>\\n            <td style=\\\"text-align: right;\\\">\\n              <table style=\\\"width: 100%;\\\">\\n                <tr>\\n                  <td class=\\\"header-info\\\" style=\\\"width: 30%; text-align: left;\\\"><b>DATE</b></td>\\n                  <td class=\\\"header-info\\\" style=\\\"width: 70%; text-align: left;\\\" data-field=\\\"po-date\\\">\").concat(getPOFieldValue('po-date','MM/DD/YYYY'),\"</td>\\n                </tr>\\n                <tr>\\n                  <td class=\\\"header-info\\\" style=\\\"width: 30%; text-align: left;\\\"><b>PO #</b></td>\\n                  <td class=\\\"header-info\\\" style=\\\"width: 70%; text-align: left;\\\" data-field=\\\"po-number\\\">\").concat(getPOFieldValue('po-number','[PO Number]'),\"</td>\\n                </tr>\\n              </table>\\n            </td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Vendor-ShipTo Section XML with dynamic ordering\nconst buildVendorShipToSectionXML=()=>{var _data$sectionOrder,_data$sectionOrder2;// Get section order from data, default to [section3, section4] if not provided\nconst sectionOrder=((_data$sectionOrder=data.sectionOrder)===null||_data$sectionOrder===void 0?void 0:_data$sectionOrder.sections3And4)||['section3','section4'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building vendor-shipTo section with order:',{leftSection,rightSection});console.log('🔀 sections3And4 array:',(_data$sectionOrder2=data.sectionOrder)===null||_data$sectionOrder2===void 0?void 0:_data$sectionOrder2.sections3And4);let leftColumn,rightColumn;if(leftSection==='section3'){// Default order: Vendor left, Ship To right\nleftColumn=buildVendorXML();rightColumn=buildShipToXML();console.log('🔀 Using default order: Vendor left, Ship To right');}else{// Swapped order: Ship To left, Vendor right\nleftColumn=buildShipToXML();rightColumn=buildVendorXML();console.log('🔀 Using swapped order: Ship To left, Vendor right');}return\"\\n      <table style=\\\"margin-top: 20px;\\\" data-section=\\\"vendor-ship-to\\\">\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\nconst buildShippingDetailsXML=()=>{return\"\\n      <table style=\\\"margin-top: 15px;\\\" data-section=\\\"shipping-details\\\">\\n        <tr>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">REQUISITIONER</td>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">SHIP VIA</td>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">F.O.B.</td>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">SHIPPING TERMS</td>\\n        </tr>\\n        <tr>\\n          <td class=\\\"section-content\\\" data-field=\\\"requisitioner\\\">\".concat(getShippingFieldValue('requisitioner','[Requisitioner]'),\"</td>\\n          <td class=\\\"section-content\\\" data-field=\\\"shipVia\\\">\").concat(getShippingFieldValue('shipVia','[Ship Via]'),\"</td>\\n          <td class=\\\"section-content\\\" data-field=\\\"fob\\\">\").concat(getShippingFieldValue('fob','[FOB]'),\"</td>\\n          <td class=\\\"section-content\\\" data-field=\\\"shippingTerms\\\">\").concat(getShippingFieldValue('shippingTerms','[Shipping Terms]'),\"</td>\\n        </tr>\\n      </table>\\n    \");};// Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\nconst buildVendorShipToAndShippingDetailsXML=()=>{var _data$sectionOrder3,_data$sectionOrder4;// Get section order from data, default to [sections3And4, sections5And6] if not provided\nconst sectionOrder=((_data$sectionOrder3=data.sectionOrder)===null||_data$sectionOrder3===void 0?void 0:_data$sectionOrder3.sections3And4And5And6)||['sections3And4','sections5And6'];const topSection=sectionOrder[0];const bottomSection=sectionOrder[1];console.log('🔀 Building vendor-shipTo + shipping details with order:',{topSection,bottomSection});console.log('🔀 sections3And4And5And6 array:',(_data$sectionOrder4=data.sectionOrder)===null||_data$sectionOrder4===void 0?void 0:_data$sectionOrder4.sections3And4And5And6);let topContent,bottomContent;if(topSection==='sections3And4'){// Default order: Vendor-ShipTo on top, Shipping Details below\ntopContent=buildVendorShipToSectionXML();bottomContent=buildShippingDetailsXML();console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');}else{// Swapped order: Shipping Details on top, Vendor-ShipTo below\ntopContent=buildShippingDetailsXML();bottomContent=buildVendorShipToSectionXML();console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');}return\"\\n      \".concat(topContent,\"\\n      \").concat(bottomContent,\"\\n    \");};// Build Header Section XML (Company + Purchase Order) with dynamic ordering\nconst buildHeaderSectionXML=()=>{var _data$sectionOrder5,_data$sectionOrder6,_data$sectionOrder7,_data$sectionOrder8,_data$sectionOrder8$s,_data$sectionOrder9;// Get section order from data, default to [section1, section2] if not provided\nconst sectionOrder=((_data$sectionOrder5=data.sectionOrder)===null||_data$sectionOrder5===void 0?void 0:_data$sectionOrder5.sections1And2)||['section1','section2'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building header section with order:',{leftSection,rightSection});console.log('🔀 Full sectionOrder data:',data.sectionOrder);console.log('🔀 Full data object keys:',Object.keys(data));console.log('🔀 sections1And2 array:',(_data$sectionOrder6=data.sectionOrder)===null||_data$sectionOrder6===void 0?void 0:_data$sectionOrder6.sections1And2);console.log('🔀 sections1And2 type:',typeof((_data$sectionOrder7=data.sectionOrder)===null||_data$sectionOrder7===void 0?void 0:_data$sectionOrder7.sections1And2));console.log('🔀 sections1And2 length:',(_data$sectionOrder8=data.sectionOrder)===null||_data$sectionOrder8===void 0?void 0:(_data$sectionOrder8$s=_data$sectionOrder8.sections1And2)===null||_data$sectionOrder8$s===void 0?void 0:_data$sectionOrder8$s.length);console.log('🔀 sections1And2 values:',JSON.stringify((_data$sectionOrder9=data.sectionOrder)===null||_data$sectionOrder9===void 0?void 0:_data$sectionOrder9.sections1And2));let leftColumn,rightColumn;if(leftSection==='section1'){leftColumn=buildCompanyXML();rightColumn=buildPurchaseOrderXML();console.log('🔀 Using default order: Company left, Purchase Order right');}else{leftColumn=buildPurchaseOrderXML();rightColumn=buildCompanyXML();console.log('🔀 Using swapped order: Purchase Order left, Company right');}return\"\\n      <table>\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Build Vendor Information XML\nconst buildVendorXML=()=>{return\"\\n      <td style=\\\"width: 50%;\\\" data-subsection=\\\"vendor\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"section-header\\\">VENDOR</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"section-content\\\">\\n              <span data-field=\\\"vendor-company\\\">\".concat(getVendorFieldValue('vendor-company','[Company Name]'),\"</span><br/>\\n              <span data-field=\\\"vendor-contact\\\">\").concat(getVendorFieldValue('vendor-contact','[Contact Person]'),\"</span><br/>\\n              <span data-field=\\\"vendor-address\\\">\").concat(getVendorFieldValue('vendor-address','[Street Address]'),\"</span><br/>\\n              <span data-field=\\\"vendor-city-state\\\">\").concat(getVendorFieldValue('vendor-city-state','[City, ST ZIP]'),\"</span><br/>\\n              Phone: <span data-field=\\\"vendor-phone\\\">\").concat(getVendorFieldValue('vendor-phone','(000) 000-0000'),\"</span><br/>\\n              Fax: <span data-field=\\\"vendor-fax\\\">\").concat(getVendorFieldValue('vendor-fax','(000) 000-0000'),\"</span>\\n            </td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Ship To Information XML\nconst buildShipToXML=()=>{return\"\\n      <td style=\\\"width: 50%;\\\" data-subsection=\\\"ship-to\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"section-header\\\">SHIP TO</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"section-content\\\">\\n              <span data-field=\\\"ship-to-name\\\">\".concat(getShipToFieldValue('ship-to-name','[Contact Name]'),\"</span><br/>\\n              <span data-field=\\\"ship-to-company\\\">\").concat(getShipToFieldValue('ship-to-company','[Company Name]'),\"</span><br/>\\n              <span data-field=\\\"ship-to-address\\\">\").concat(getShipToFieldValue('ship-to-address','[Street Address]'),\"</span><br/>\\n              <span data-field=\\\"ship-to-city-state\\\">\").concat(getShipToFieldValue('ship-to-city-state','[City, ST ZIP]'),\"</span><br/>\\n              Phone: <span data-field=\\\"ship-to-phone\\\">\").concat(getShipToFieldValue('ship-to-phone','(000) 000-0000'),\"</span><br/>\\n              Fax: <span data-field=\\\"ship-to-fax\\\">\").concat(getShipToFieldValue('ship-to-fax','(000) 000-0000'),\"</span>\\n            </td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Vendor/Ship-To Section XML with dynamic ordering\nconst buildVendorShipToXML=()=>{var _data$sectionOrder0;// Get section order from data, default to [section3, section4] if not provided\nconst sectionOrder=((_data$sectionOrder0=data.sectionOrder)===null||_data$sectionOrder0===void 0?void 0:_data$sectionOrder0.sections3And4)||['section3','section4'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building vendor/ship-to section with order:',{leftSection,rightSection});let leftColumn,rightColumn;if(leftSection==='section3'){leftColumn=buildVendorXML();rightColumn=buildShipToXML();}else{leftColumn=buildShipToXML();rightColumn=buildVendorXML();}return\"\\n      <table style=\\\"margin-top: 20px;\\\" data-section=\\\"vendor-ship-to\\\">\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Build Line Items XML with dynamic column ordering\nconst buildLineItemsXML=()=>{var _data$sectionOrder1,_data$sectionOrder10;// Get column order from data, default to standard order if not provided\nconst columnOrder=((_data$sectionOrder1=data.sectionOrder)===null||_data$sectionOrder1===void 0?void 0:_data$sectionOrder1.lineItemColumns)||['itemNumber','description','qty','rate','amount'];console.log('🔀 Building line items with column order:',columnOrder);console.log('🔀 Line items data:',data.lineItems);console.log('🔀 Column order from state:',(_data$sectionOrder10=data.sectionOrder)===null||_data$sectionOrder10===void 0?void 0:_data$sectionOrder10.lineItemColumns);// Column configuration mapping\nconst columnConfig={itemNumber:{label:'Item#',colSpan:3,field:'itemNumber'},description:{label:'Description',colSpan:12,field:'description'},qty:{label:'Qty',colSpan:2,field:'qty'},rate:{label:'Rate',colSpan:3,field:'rate'},amount:{label:'Amount',colSpan:3,field:'amount'}};// Build header row\nconst headerRow=columnOrder.map(columnId=>{const config=columnConfig[columnId];return\"<td class=\\\"item-header\\\" colSpan=\\\"\".concat(config.colSpan,\"\\\">\").concat(config.label,\"</td>\");}).join('');// Build data rows using actual line item data\nconst lineItems=data.lineItems||[];const dataRows=Array(5).fill(0).map((_,rowIndex)=>{const rowData=lineItems[rowIndex]||{};const rowCells=columnOrder.map(columnId=>{const config=columnConfig[columnId];const fieldValue=rowData[columnId]||'-';return\"<td colSpan=\\\"\".concat(config.colSpan,\"\\\">\").concat(fieldValue,\"</td>\");}).join('');return\"<tr data-row-id=\\\"line-item-\".concat(rowIndex,\"\\\" data-row-index=\\\"\").concat(rowIndex,\"\\\">\").concat(rowCells,\"</tr>\");}).join('');return\"\\n      <table style=\\\"margin-top: 15px;\\\" data-section=\\\"line-items\\\">\\n        <tr>\\n          \".concat(headerRow,\"\\n        </tr>\\n        \").concat(dataRows,\"\\n      </table>\\n    \");};// Build Comments Section XML\nconst buildCommentsXML=()=>{const comments=getFieldValue('comments','[Enter comments or special instructions...]');return\"\\n      <td style=\\\"width: 50%;\\\" data-section=\\\"comments\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"comments-header\\\">Comments or Special Instructions</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"comments-content\\\">\".concat(comments,\"</td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Totals Section XML\nconst buildTotalsXML=()=>{const subtotal=getTotalsFieldValue('subtotal','$0.00');const tax=getTotalsFieldValue('tax','$0.00');const shipping=getTotalsFieldValue('shipping','$0.00');const other=getTotalsFieldValue('other','$0.00');const total=getTotalsFieldValue('total','$0.00');return\"\\n      <td style=\\\"width: 50%;\\\" data-section=\\\"totals\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"section-header\\\">Totals</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"section-content\\\">\\n              <div>SUBTOTAL: \".concat(subtotal,\"</div>\\n              <div>TAX: \").concat(tax,\"</div>\\n              <div>SHIPPING: \").concat(shipping,\"</div>\\n              <div>OTHER: \").concat(other,\"</div>\\n              <div class=\\\"total-final\\\">TOTAL: \").concat(total,\"</div>\\n            </td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Comments and Totals Section XML with dynamic ordering\nconst buildCommentsTotalsXML=()=>{var _data$sectionOrder11;// Get section order from data, default to [section8, section9] if not provided\nconst sectionOrder=((_data$sectionOrder11=data.sectionOrder)===null||_data$sectionOrder11===void 0?void 0:_data$sectionOrder11.sections8And9)||['section8','section9'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building comments/totals section with order:',{leftSection,rightSection});let leftColumn,rightColumn;if(leftSection==='section8'){leftColumn=buildCommentsXML();rightColumn=buildTotalsXML();}else{leftColumn=buildTotalsXML();rightColumn=buildCommentsXML();}return\"\\n      <table style=\\\"margin-top: 15px;\\\" data-section=\\\"comments-totals\\\">\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Helper function to get shipping details field values with dynamic ID support\nconst getShippingFieldValue=function(fieldType){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const possibleSelectors=[\".shipping-field-\".concat(fieldType,\" .editable-field\"),\".shipping-field[data-field=\\\"\".concat(fieldType,\"\\\"] .editable-field\"),\".shipping-\".concat(fieldType,\" .editable-field\"),\"#shipping-\".concat(fieldType),\"[data-shipping-field=\\\"\".concat(fieldType,\"\\\"]\")];// Try to get value from DOM or data object\nif(data[fieldType]){return data[fieldType];}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Helper function to get line item values with dynamic ID support\nconst getLineItemValue=function(rowIndex,fieldType){let defaultValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';const possibleSelectors=[\"#line-item-\".concat(rowIndex,\"-\").concat(fieldType),\".line-item-row[data-row=\\\"\".concat(rowIndex,\"\\\"] .\").concat(fieldType,\"-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") .\").concat(fieldType,\"-field .editable-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") td:nth-child(\").concat(getColumnIndex(fieldType),\") .editable-field\")];// Try data object first\nif(data.lineItems&&data.lineItems[rowIndex]&&data.lineItems[rowIndex][fieldType]){return data.lineItems[rowIndex][fieldType];}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Helper function to get column index for line items\nconst getColumnIndex=fieldType=>{const columnMap={itemNumber:2,description:3,quantity:4,unitPrice:5,total:6};return columnMap[fieldType]||1;};// Helper function to get totals field values with dynamic ID support\nconst getTotalFieldValue=function(fieldType){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const possibleSelectors=[\"#total-\".concat(fieldType),\".total-\".concat(fieldType,\" .editable-field\"),\".total-row[data-field=\\\"\".concat(fieldType,\"\\\"] .editable-field\"),\".totals-section .\".concat(fieldType,\"-field .editable-field\")];// Try data object first\nif(data[fieldType]){return data[fieldType];}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Helper function to get comments field value with dynamic ID support\nconst getCommentsValue=function(){let defaultValue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const possibleSelectors=['#comments-field','.comments-content .editable-field','.comments-section .editable-field','[data-field=\"comments\"]'];// Try data object first\nif(data.comments){return data.comments;}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Helper function to get contact info field value with dynamic ID support\nconst getContactInfoValue=function(){let defaultValue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const possibleSelectors=['#contact-info-field','.contact-section .editable-field','.contact-info .editable-field','[data-field=\"contactInfo\"]'];// Try data object first\nif(data.contactInfo){return data.contactInfo;}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Generate line items XML with dynamic ID support\nconst generateLineItemsXML=()=>{const maxRows=5;// Standard number of line item rows\n// Generate rows (either from data or empty placeholder rows)\nreturn Array(maxRows).fill(0).map((_,index)=>{// Try to get values using dynamic ID system\nconst itemNumber=getLineItemValue(index,'itemNumber','-');const description=getLineItemValue(index,'description','-');const quantity=getLineItemValue(index,'quantity','-');const unitPrice=getLineItemValue(index,'unitPrice','-');const total=getLineItemValue(index,'total','-');return\"\\n        <tr data-row-id=\\\"line-item-\".concat(index,\"\\\" data-row-index=\\\"\").concat(index,\"\\\">\\n            <td class=\\\"item-cell\\\" align=\\\"left\\\" colspan=\\\"3\\\" data-field=\\\"itemNumber\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(itemNumber,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"left\\\" colspan=\\\"12\\\" data-field=\\\"description\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(description,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"center\\\" colspan=\\\"2\\\" data-field=\\\"quantity\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(quantity,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"right\\\" colspan=\\\"3\\\" data-field=\\\"unitPrice\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(unitPrice,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"right\\\" colspan=\\\"3\\\" data-field=\\\"total\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(total,\"</td>\\n        </tr>\");}).join('');};// Generate the complete XML using the new template structure\nconst xml=\"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE pdf PUBLIC \\\"-//big.faceless.org//report\\\" \\\"report-1.1.dtd\\\">\\n<pdf>\\n<head>\\n    <meta name=\\\"title\\\" value=\\\"Purchase Order\\\"/>\\n    <meta name=\\\"author\\\" value=\\\"Purchase Order Generator\\\"/>\\n    <meta name=\\\"subject\\\" value=\\\"Purchase Order\\\"/>\\n    <meta name=\\\"creator\\\" value=\\\"Purchase Order Generator\\\"/>\\n    <meta name=\\\"producer\\\" value=\\\"Purchase Order Generator\\\"/>\\n    <meta name=\\\"creationDate\\\" value=\\\"\".concat(new Date().toISOString(),\"\\\"/>\\n    <meta name=\\\"modDate\\\" value=\\\"\").concat(new Date().toISOString(),\"\\\"/>\\n    <link name=\\\"NotoSans\\\" type=\\\"font\\\" subtype=\\\"truetype\\\" src=\\\"${nsfont.NotoSans_Regular}\\\" src-bold=\\\"${nsfont.NotoSans_Bold}\\\" src-italic=\\\"${nsfont.NotoSans_Italic}\\\" src-bolditalic=\\\"${nsfont.NotoSans_BoldItalic}\\\" bytes=\\\"2\\\" />\\n    <style>\\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\\n        table { width: 100%; border-collapse: collapse; }\\n        .header-company { font-size: 14pt; font-weight: bold; }\\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\\n        .header-info { font-size: 10pt; }\\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\\n        .item-cell { padding: 6px; border: 1px solid #000; }\\n        .total-label { font-weight: bold; padding: 4px; }\\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\\n        .contact-info { font-size: 8pt; }\\n    </style>\\n</head>\\n<body padding=\\\"0.5in\\\" size=\\\"Letter\\\">\\n    \\n    \").concat(buildHeaderSectionXML(),\"\\n    \").concat(buildVendorShipToAndShippingDetailsXML(),\"\\n\\n\\n    \").concat(buildLineItemsXML(),\"\\n\\n\\n    \").concat(buildCommentsTotalsXML(),\"\\n\\n\\n\\n    <table style=\\\"margin-top: 20px;\\\" data-section=\\\"contact-signature\\\">\\n        <tr>\\n            <td class=\\\"contact-info\\\" style=\\\"width: 70%;\\\" data-field=\\\"contact-info\\\">\\n                \").concat(getContactInfoValue('For inquiries, please contact us'),\"\\n            </td>\\n            <td style=\\\"width: 30%; text-align: center;\\\" data-field=\\\"signature\\\">\\n                <table style=\\\"width: 100%;\\\">\\n                    <tr>\\n                        <td style=\\\"border-top: 1px solid #000; padding-top: 10px;\\\">\\n                            Authorized Signature\\n                        </td>\\n                    </tr>\\n                </table>\\n            </td>\\n        </tr>\\n    </table>\\n</body>\\n</pdf>\");console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');console.log('📄 XML preview (first 200 chars):',xml.substring(0,200));return xml;}// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate={companyInfo:{staticFields:['company-name','company-address','company-city-state','company-phone','company-fax','company-website'],dynamicPrefixes:['company-field-','company-'],dataAttribute:'data-section=\"company-info\"'},purchaseOrder:{staticFields:['po-title','po-date','po-number'],dynamicPrefixes:['po-field-','po-'],dataAttribute:'data-section=\"purchase-order-info\"'},vendor:{staticFields:['vendor-company','vendor-contact','vendor-address','vendor-city-state','vendor-phone','vendor-fax'],dynamicPrefixes:['vendor-field-','vendor-'],dataAttribute:'data-subsection=\"vendor\"'},shipTo:{staticFields:['ship-to-name','ship-to-company','ship-to-address','ship-to-city-state','ship-to-phone','ship-to-fax'],dynamicPrefixes:['ship-to-field-','ship-to-'],dataAttribute:'data-subsection=\"ship-to\"'},shipping:{staticFields:['requisitioner','shipVia','fob','shippingTerms'],dynamicPrefixes:['shipping-field-','shipping-'],dataAttribute:'data-section=\"shipping-details\"'},lineItems:{staticFields:['itemNumber','description','quantity','unitPrice','total'],dynamicPrefixes:['line-item-','item-'],dataAttribute:'data-section=\"line-items\"',maxRows:5},totals:{staticFields:['subtotal','tax','shipping','other','total'],dynamicPrefixes:['total-','totals-'],dataAttribute:'data-subsection=\"totals\"'},comments:{staticFields:['comments'],dynamicPrefixes:['comments-field-','comment-'],dataAttribute:'data-subsection=\"comments\"'},contact:{staticFields:['contactInfo'],dynamicPrefixes:['contact-info-field-','contact-'],dataAttribute:'data-section=\"contact-signature\"'}};// Export a simple function to get template structure\nexport function getTemplateStructure(){return purchaseOrderTemplate;}// Dynamic ID Generation Utilities\nexport const dynamicIdUtils={// Generate a new dynamic ID with timestamp and random component\ngenerateId:function(){let prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'field';let section=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'general';const timestamp=Date.now();const random=Math.random().toString(36).substr(2,9);return\"\".concat(section,\"-\").concat(prefix,\"-\").concat(timestamp,\"-\").concat(random);},// Generate multiple possible IDs for a field to try when looking up values\ngetPossibleIds:function(staticId){let section=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'unknown';const baseName=staticId.replace(/^(company-|po-|vendor-|ship-to-)/,'');return[staticId,// Try static ID first\n\"\".concat(section,\"-field-\").concat(staticId),\"\".concat(section,\"-\").concat(baseName),\"\".concat(staticId,\"-\").concat(Date.now()),\"field-\".concat(baseName),baseName];},// Validate if an ID follows our dynamic ID pattern\nisValidDynamicId:id=>{const dynamicPattern=/^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;return dynamicPattern.test(id);},// Extract the base field type from any ID (static or dynamic)\ngetFieldType:id=>{// Remove common prefixes and suffixes to get the core field type\nreturn id.replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/,'').replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/,'').replace(/^(field-)?/,'');},// Get section from ID\ngetSection:id=>{if(id.startsWith('company-'))return'company';if(id.startsWith('po-'))return'purchase-order';if(id.startsWith('vendor-'))return'vendor';if(id.startsWith('ship-to-'))return'ship-to';if(id.startsWith('shipping-'))return'shipping';if(id.startsWith('line-item-'))return'line-items';if(id.startsWith('total-'))return'totals';if(id.startsWith('comments-'))return'comments';if(id.startsWith('contact-'))return'contact';return'unknown';}};// Field Mapping Utilities\nexport const fieldMappingUtils={// Map all known static field IDs to their readable names\nstaticFieldNames:{// Company fields\n'company-name':'Company Name','company-address':'Street Address','company-city-state':'City, State, ZIP','company-phone':'Phone Number','company-fax':'Fax Number','company-website':'Website',// Purchase Order fields\n'po-title':'Purchase Order Title','po-date':'Date','po-number':'PO Number',// Vendor fields\n'vendor-company':'Vendor Company','vendor-contact':'Vendor Contact','vendor-address':'Vendor Address','vendor-city-state':'Vendor City/State','vendor-phone':'Vendor Phone','vendor-fax':'Vendor Fax',// Ship To fields\n'ship-to-name':'Ship To Name','ship-to-company':'Ship To Company','ship-to-address':'Ship To Address','ship-to-city-state':'Ship To City/State','ship-to-phone':'Ship To Phone','ship-to-fax':'Ship To Fax',// Shipping fields\n'requisitioner':'Requisitioner','shipVia':'Ship Via','fob':'F.O.B.','shippingTerms':'Shipping Terms',// Line item fields\n'itemNumber':'Item Number','description':'Description','quantity':'Quantity','unitPrice':'Unit Price','total':'Total',// Totals fields\n'subtotal':'Subtotal','tax':'Tax','shipping':'Shipping','other':'Other',// Other fields\n'comments':'Comments','contactInfo':'Contact Information'},// Get human-readable name for any field ID\ngetFieldName:id=>{const staticName=fieldMappingUtils.staticFieldNames[id];if(staticName)return staticName;// For dynamic IDs, try to extract the base field type\nconst fieldType=dynamicIdUtils.getFieldType(id);const staticFieldName=fieldMappingUtils.staticFieldNames[fieldType];if(staticFieldName)return staticFieldName;// Fallback: humanize the ID\nreturn id.replace(/[-_]/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase());},// Get all field IDs for a section\ngetFieldsForSection:section=>{const template=purchaseOrderTemplate[section];return template?template.staticFields:[];}};","map":{"version":3,"names":["processFormData","generatePurchaseOrderXML","formData","options","arguments","length","undefined","console","log","Date","toISOString","processedData","calculateTotals","validate","formatForXML","throwOnValidationError","error","data","getFieldValue","fieldName","defaultValue","getDynamicFieldValue","fieldArray","possibleIds","Array","isArray","fieldId","field","find","f","id","value","getCompanyFieldValue","staticId","companyFields","concat","now","filter","includes","replace","map","getPOFieldValue","purchaseOrderFields","getVendorFieldValue","vendorFields","getShipToFieldValue","shipToFields","getTotalsFieldValue","totalsFields","buildCompanyXML","buildPurchaseOrderXML","buildVendorShipToSectionXML","_data$sectionOrder","_data$sectionOrder2","sectionOrder","sections3And4","leftSection","rightSection","leftColumn","rightColumn","buildVendorXML","buildShipToXML","buildShippingDetailsXML","getShippingFieldValue","buildVendorShipToAndShippingDetailsXML","_data$sectionOrder3","_data$sectionOrder4","sections3And4And5And6","topSection","bottomSection","topContent","bottomContent","buildHeaderSectionXML","_data$sectionOrder5","_data$sectionOrder6","_data$sectionOrder7","_data$sectionOrder8","_data$sectionOrder8$s","_data$sectionOrder9","sections1And2","Object","keys","JSON","stringify","buildVendorShipToXML","_data$sectionOrder0","buildLineItemsXML","_data$sectionOrder1","_data$sectionOrder10","columnOrder","lineItemColumns","lineItems","columnConfig","itemNumber","label","colSpan","description","qty","rate","amount","headerRow","columnId","config","join","dataRows","fill","_","rowIndex","rowData","rowCells","fieldValue","buildCommentsXML","comments","buildTotalsXML","subtotal","tax","shipping","other","total","buildCommentsTotalsXML","_data$sectionOrder11","sections8And9","fieldType","possibleSelectors","selector","element","document","querySelector","textContent","trim","getLineItemValue","getColumnIndex","columnMap","quantity","unitPrice","getTotalFieldValue","getCommentsValue","getContactInfoValue","contactInfo","generateLineItemsXML","maxRows","index","xml","substring","purchaseOrderTemplate","companyInfo","staticFields","dynamicPrefixes","dataAttribute","purchaseOrder","vendor","shipTo","totals","contact","getTemplateStructure","dynamicIdUtils","generateId","prefix","section","timestamp","random","Math","toString","substr","getPossibleIds","baseName","isValidDynamicId","dynamicPattern","test","getFieldType","getSection","startsWith","fieldMappingUtils","staticFieldNames","getFieldName","staticName","staticFieldName","l","toUpperCase","getFieldsForSection","template"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/PurchaseOrderTemplate.js"],"sourcesContent":["// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\nimport { processFormData } from './FormDataMapper';\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData, options = {}) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('📅 Template updated at:', new Date().toISOString());\n  console.log('📊 Raw form data received:', formData);\n  \n  // Process and validate form data using the FormDataMapper\n  let processedData;\n  try {\n    processedData = processFormData(formData, {\n      calculateTotals: options.calculateTotals !== false,\n      validate: options.validate !== false,\n      formatForXML: true,\n      throwOnValidationError: options.throwOnValidationError || false\n    });\n    console.log('📊 Processed form data:', processedData);\n  } catch (error) {\n    console.error('❌ Form data processing failed:', error);\n    if (options.throwOnValidationError) {\n      throw error;\n    }\n    // Fallback to using raw data\n    processedData = formData || {};\n  }\n  \n  // Use processed data for XML generation, fallback to original data\n  const data = processedData || formData || {};\n  \n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n    \n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [\n        staticId,\n        `company-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [\n        staticId,\n        `po-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [\n        staticId,\n        `vendor-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [\n        staticId,\n        `ship-to-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalsFieldValue = (staticId, defaultValue = '') => {\n    if (data.totalsFields && Array.isArray(data.totalsFields)) {\n      const possibleIds = [\n        staticId,\n        `totals-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.totalsFields.filter(f => f.id.includes(staticId)).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.totalsFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // ============================================================================\n  // MODULAR XML BUILDER FUNCTIONS\n  // ============================================================================\n  \n  // Build Company Information XML\n  const buildCompanyXML = () => {\n    return `\n      <td style=\"width: 65%; padding-right: 20px;\" data-section=\"company-info\">\n        <table>\n          <tr>\n            <td class=\"header-company\" style=\"text-align: left;\" data-field=\"company-name\">${getCompanyFieldValue('company-name', '[Company Name]')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: left;\" data-field=\"company-address\">${getCompanyFieldValue('company-address', '[Street Address]')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: left;\" data-field=\"company-city-state\">${getCompanyFieldValue('company-city-state', '[City, ST ZIP]')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: left;\" data-field=\"company-phone\">Phone: ${getCompanyFieldValue('company-phone', '(000) 000-0000')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: left;\" data-field=\"company-fax\">Fax: ${getCompanyFieldValue('company-fax', '(000) 000-0000')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: left;\" data-field=\"company-website\">Website: ${getCompanyFieldValue('company-website', 'www.example.com')}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Purchase Order Information XML\n  const buildPurchaseOrderXML = () => {\n    return `\n      <td style=\"width: 35%; padding-left: 20px;\" align=\"right\" data-section=\"purchase-order-info\">\n        <table>\n          <tr>\n            <td class=\"header-title\" style=\"text-align: right;\" data-field=\"po-title\">${getPOFieldValue('po-title', 'PURCHASE ORDER')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: right;\">\n              <table style=\"width: 100%;\">\n                <tr>\n                  <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                  <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${getPOFieldValue('po-date', 'MM/DD/YYYY')}</td>\n                </tr>\n                <tr>\n                  <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                  <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${getPOFieldValue('po-number', '[PO Number]')}</td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n\n\n  // Build Vendor-ShipTo Section XML with dynamic ordering\n  const buildVendorShipToSectionXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo section with order:', { leftSection, rightSection });\n    console.log('🔀 sections3And4 array:', data.sectionOrder?.sections3And4);\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      // Default order: Vendor left, Ship To right\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n      console.log('🔀 Using default order: Vendor left, Ship To right');\n    } else {\n      // Swapped order: Ship To left, Vendor right\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n      console.log('🔀 Using swapped order: Ship To left, Vendor right');\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\n  const buildShippingDetailsXML = () => {\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n          <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n          <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n          <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n          <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n          <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n          <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\n  const buildVendorShipToAndShippingDetailsXML = () => {\n    // Get section order from data, default to [sections3And4, sections5And6] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4And5And6 || ['sections3And4', 'sections5And6'];\n    const topSection = sectionOrder[0];\n    const bottomSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo + shipping details with order:', { topSection, bottomSection });\n    console.log('🔀 sections3And4And5And6 array:', data.sectionOrder?.sections3And4And5And6);\n    \n    let topContent, bottomContent;\n    \n    if (topSection === 'sections3And4') {\n      // Default order: Vendor-ShipTo on top, Shipping Details below\n      topContent = buildVendorShipToSectionXML();\n      bottomContent = buildShippingDetailsXML();\n      console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');\n    } else {\n      // Swapped order: Shipping Details on top, Vendor-ShipTo below\n      topContent = buildShippingDetailsXML();\n      bottomContent = buildVendorShipToSectionXML();\n      console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');\n    }\n    \n    return `\n      ${topContent}\n      ${bottomContent}\n    `;\n  };\n\n  // Build Header Section XML (Company + Purchase Order) with dynamic ordering\n  const buildHeaderSectionXML = () => {\n    // Get section order from data, default to [section1, section2] if not provided\n    const sectionOrder = data.sectionOrder?.sections1And2 || ['section1', 'section2'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building header section with order:', { leftSection, rightSection });\n    console.log('🔀 Full sectionOrder data:', data.sectionOrder);\n    console.log('🔀 Full data object keys:', Object.keys(data));\n    console.log('🔀 sections1And2 array:', data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 type:', typeof data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 length:', data.sectionOrder?.sections1And2?.length);\n    console.log('🔀 sections1And2 values:', JSON.stringify(data.sectionOrder?.sections1And2));\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section1') {\n      leftColumn = buildCompanyXML();\n      rightColumn = buildPurchaseOrderXML();\n      console.log('🔀 Using default order: Company left, Purchase Order right');\n    } else {\n      leftColumn = buildPurchaseOrderXML();\n      rightColumn = buildCompanyXML();\n      console.log('🔀 Using swapped order: Purchase Order left, Company right');\n    }\n    \n    return `\n      <table>\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor Information XML\n  const buildVendorXML = () => {\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"vendor\">\n        <table>\n          <tr>\n            <td class=\"section-header\">VENDOR</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <span data-field=\"vendor-company\">${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br/>\n              <span data-field=\"vendor-contact\">${getVendorFieldValue('vendor-contact', '[Contact Person]')}</span><br/>\n              <span data-field=\"vendor-address\">${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br/>\n              <span data-field=\"vendor-city-state\">${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br/>\n              Phone: <span data-field=\"vendor-phone\">${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br/>\n              Fax: <span data-field=\"vendor-fax\">${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Ship To Information XML\n  const buildShipToXML = () => {\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n        <table>\n          <tr>\n            <td class=\"section-header\">SHIP TO</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <span data-field=\"ship-to-name\">${getShipToFieldValue('ship-to-name', '[Contact Name]')}</span><br/>\n              <span data-field=\"ship-to-company\">${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br/>\n              <span data-field=\"ship-to-address\">${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br/>\n              <span data-field=\"ship-to-city-state\">${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br/>\n              Phone: <span data-field=\"ship-to-phone\">${getShipToFieldValue('ship-to-phone', '(000) 000-0000')}</span><br/>\n              Fax: <span data-field=\"ship-to-fax\">${getShipToFieldValue('ship-to-fax', '(000) 000-0000')}</span>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor/Ship-To Section XML with dynamic ordering\n  const buildVendorShipToXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor/ship-to section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n    } else {\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Line Items XML with dynamic column ordering\n  const buildLineItemsXML = () => {\n    // Get column order from data, default to standard order if not provided\n    const columnOrder = data.sectionOrder?.lineItemColumns || ['itemNumber', 'description', 'qty', 'rate', 'amount'];\n    \n    console.log('🔀 Building line items with column order:', columnOrder);\n    console.log('🔀 Line items data:', data.lineItems);\n    console.log('🔀 Column order from state:', data.sectionOrder?.lineItemColumns);\n    \n    // Column configuration mapping\n    const columnConfig = {\n      itemNumber: { label: 'Item#', colSpan: 3, field: 'itemNumber' },\n      description: { label: 'Description', colSpan: 12, field: 'description' },\n      qty: { label: 'Qty', colSpan: 2, field: 'qty' },\n      rate: { label: 'Rate', colSpan: 3, field: 'rate' },\n      amount: { label: 'Amount', colSpan: 3, field: 'amount' }\n    };\n    \n    // Build header row\n    const headerRow = columnOrder.map(columnId => {\n      const config = columnConfig[columnId];\n      return `<td class=\"item-header\" colSpan=\"${config.colSpan}\">${config.label}</td>`;\n    }).join('');\n    \n    // Build data rows using actual line item data\n    const lineItems = data.lineItems || [];\n    const dataRows = Array(5).fill(0).map((_, rowIndex) => {\n      const rowData = lineItems[rowIndex] || {};\n      const rowCells = columnOrder.map(columnId => {\n        const config = columnConfig[columnId];\n        const fieldValue = rowData[columnId] || '-';\n        return `<td colSpan=\"${config.colSpan}\">${fieldValue}</td>`;\n      }).join('');\n      \n      return `<tr data-row-id=\"line-item-${rowIndex}\" data-row-index=\"${rowIndex}\">${rowCells}</tr>`;\n    }).join('');\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n          ${headerRow}\n        </tr>\n        ${dataRows}\n      </table>\n    `;\n  };\n\n  // Build Comments Section XML\n  const buildCommentsXML = () => {\n    const comments = getFieldValue('comments', '[Enter comments or special instructions...]');\n    return `\n      <td style=\"width: 50%;\" data-section=\"comments\">\n        <table>\n          <tr>\n            <td class=\"comments-header\">Comments or Special Instructions</td>\n          </tr>\n          <tr>\n            <td class=\"comments-content\">${comments}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Totals Section XML\n  const buildTotalsXML = () => {\n    const subtotal = getTotalsFieldValue('subtotal', '$0.00');\n    const tax = getTotalsFieldValue('tax', '$0.00');\n    const shipping = getTotalsFieldValue('shipping', '$0.00');\n    const other = getTotalsFieldValue('other', '$0.00');\n    const total = getTotalsFieldValue('total', '$0.00');\n    \n    return `\n      <td style=\"width: 50%;\" data-section=\"totals\">\n        <table>\n          <tr>\n            <td class=\"section-header\">Totals</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <div>SUBTOTAL: ${subtotal}</div>\n              <div>TAX: ${tax}</div>\n              <div>SHIPPING: ${shipping}</div>\n              <div>OTHER: ${other}</div>\n              <div class=\"total-final\">TOTAL: ${total}</div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Comments and Totals Section XML with dynamic ordering\n  const buildCommentsTotalsXML = () => {\n    // Get section order from data, default to [section8, section9] if not provided\n    const sectionOrder = data.sectionOrder?.sections8And9 || ['section8', 'section9'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building comments/totals section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section8') {\n      leftColumn = buildCommentsXML();\n      rightColumn = buildTotalsXML();\n    } else {\n      leftColumn = buildTotalsXML();\n      rightColumn = buildCommentsXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `.shipping-${fieldType} .editable-field`,\n      `#shipping-${fieldType}`,\n      `[data-shipping-field=\"${fieldType}\"]`\n    ];\n    \n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`\n    ];\n    \n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = (fieldType) => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`\n    ];\n    \n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n    \n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      \n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    ${buildHeaderSectionXML()}\n    ${buildVendorShipToAndShippingDetailsXML()}\n\n\n    ${buildLineItemsXML()}\n\n\n    ${buildCommentsTotalsXML()}\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n\n  console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');\n  console.log('📄 XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    staticFields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website'],\n    dynamicPrefixes: ['company-field-', 'company-'],\n    dataAttribute: 'data-section=\"company-info\"'\n  },\n  purchaseOrder: {\n    staticFields: ['po-title', 'po-date', 'po-number'],\n    dynamicPrefixes: ['po-field-', 'po-'],\n    dataAttribute: 'data-section=\"purchase-order-info\"'\n  },\n  vendor: {\n    staticFields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax'],\n    dynamicPrefixes: ['vendor-field-', 'vendor-'],\n    dataAttribute: 'data-subsection=\"vendor\"'\n  },\n  shipTo: {\n    staticFields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone', 'ship-to-fax'],\n    dynamicPrefixes: ['ship-to-field-', 'ship-to-'],\n    dataAttribute: 'data-subsection=\"ship-to\"'\n  },\n  shipping: {\n    staticFields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms'],\n    dynamicPrefixes: ['shipping-field-', 'shipping-'],\n    dataAttribute: 'data-section=\"shipping-details\"'\n  },\n  lineItems: {\n    staticFields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total'],\n    dynamicPrefixes: ['line-item-', 'item-'],\n    dataAttribute: 'data-section=\"line-items\"',\n    maxRows: 5\n  },\n  totals: {\n    staticFields: ['subtotal', 'tax', 'shipping', 'other', 'total'],\n    dynamicPrefixes: ['total-', 'totals-'],\n    dataAttribute: 'data-subsection=\"totals\"'\n  },\n  comments: {\n    staticFields: ['comments'],\n    dynamicPrefixes: ['comments-field-', 'comment-'],\n    dataAttribute: 'data-subsection=\"comments\"'\n  },\n  contact: {\n    staticFields: ['contactInfo'],\n    dynamicPrefixes: ['contact-info-field-', 'contact-'],\n    dataAttribute: 'data-section=\"contact-signature\"'\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n\n// Dynamic ID Generation Utilities\nexport const dynamicIdUtils = {\n  // Generate a new dynamic ID with timestamp and random component\n  generateId: (prefix = 'field', section = 'general') => {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${section}-${prefix}-${timestamp}-${random}`;\n  },\n\n  // Generate multiple possible IDs for a field to try when looking up values\n  getPossibleIds: (staticId, section = 'unknown') => {\n    const baseName = staticId.replace(/^(company-|po-|vendor-|ship-to-)/, '');\n    return [\n      staticId, // Try static ID first\n      `${section}-field-${staticId}`,\n      `${section}-${baseName}`,\n      `${staticId}-${Date.now()}`,\n      `field-${baseName}`,\n      baseName\n    ];\n  },\n\n  // Validate if an ID follows our dynamic ID pattern\n  isValidDynamicId: (id) => {\n    const dynamicPattern = /^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;\n    return dynamicPattern.test(id);\n  },\n\n  // Extract the base field type from any ID (static or dynamic)\n  getFieldType: (id) => {\n    // Remove common prefixes and suffixes to get the core field type\n    return id\n      .replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/, '')\n      .replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/, '')\n      .replace(/^(field-)?/, '');\n  },\n\n  // Get section from ID\n  getSection: (id) => {\n    if (id.startsWith('company-')) return 'company';\n    if (id.startsWith('po-')) return 'purchase-order';\n    if (id.startsWith('vendor-')) return 'vendor';\n    if (id.startsWith('ship-to-')) return 'ship-to';\n    if (id.startsWith('shipping-')) return 'shipping';\n    if (id.startsWith('line-item-')) return 'line-items';\n    if (id.startsWith('total-')) return 'totals';\n    if (id.startsWith('comments-')) return 'comments';\n    if (id.startsWith('contact-')) return 'contact';\n    return 'unknown';\n  }\n};\n\n// Field Mapping Utilities\nexport const fieldMappingUtils = {\n  // Map all known static field IDs to their readable names\n  staticFieldNames: {\n    // Company fields\n    'company-name': 'Company Name',\n    'company-address': 'Street Address',\n    'company-city-state': 'City, State, ZIP',\n    'company-phone': 'Phone Number',\n    'company-fax': 'Fax Number',\n    'company-website': 'Website',\n    \n    // Purchase Order fields\n    'po-title': 'Purchase Order Title',\n    'po-date': 'Date',\n    'po-number': 'PO Number',\n    \n    // Vendor fields\n    'vendor-company': 'Vendor Company',\n    'vendor-contact': 'Vendor Contact',\n    'vendor-address': 'Vendor Address',\n    'vendor-city-state': 'Vendor City/State',\n    'vendor-phone': 'Vendor Phone',\n    'vendor-fax': 'Vendor Fax',\n    \n    // Ship To fields\n    'ship-to-name': 'Ship To Name',\n    'ship-to-company': 'Ship To Company',\n    'ship-to-address': 'Ship To Address',\n    'ship-to-city-state': 'Ship To City/State',\n    'ship-to-phone': 'Ship To Phone',\n    'ship-to-fax': 'Ship To Fax',\n    \n    // Shipping fields\n    'requisitioner': 'Requisitioner',\n    'shipVia': 'Ship Via',\n    'fob': 'F.O.B.',\n    'shippingTerms': 'Shipping Terms',\n    \n    // Line item fields\n    'itemNumber': 'Item Number',\n    'description': 'Description',\n    'quantity': 'Quantity',\n    'unitPrice': 'Unit Price',\n    'total': 'Total',\n    \n    // Totals fields\n    'subtotal': 'Subtotal',\n    'tax': 'Tax',\n    'shipping': 'Shipping',\n    'other': 'Other',\n    \n    // Other fields\n    'comments': 'Comments',\n    'contactInfo': 'Contact Information'\n  },\n\n  // Get human-readable name for any field ID\n  getFieldName: (id) => {\n    const staticName = fieldMappingUtils.staticFieldNames[id];\n    if (staticName) return staticName;\n    \n    // For dynamic IDs, try to extract the base field type\n    const fieldType = dynamicIdUtils.getFieldType(id);\n    const staticFieldName = fieldMappingUtils.staticFieldNames[fieldType];\n    if (staticFieldName) return staticFieldName;\n    \n    // Fallback: humanize the ID\n    return id.replace(/[-_]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  },\n\n  // Get all field IDs for a section\n  getFieldsForSection: (section) => {\n    const template = purchaseOrderTemplate[section];\n    return template ? template.staticFields : [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}