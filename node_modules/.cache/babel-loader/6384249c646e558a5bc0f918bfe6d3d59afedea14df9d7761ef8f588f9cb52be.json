{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSensor, useSensors, PointerSensor, KeyboardSensor } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates, arrayMove } from '@dnd-kit/sortable';\nexport function useDragAndDropSensors() {\n  _s();\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8,\n      // Require 8px movement before drag starts\n      tolerance: 5 // Allow 5px tolerance for accidental movements\n    }\n  }), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  console.log('ðŸ”§ Sensors created:', {\n    sensors: sensors,\n    hasPointerSensor: sensors.some(s => s.name === 'PointerSensor'),\n    hasKeyboardSensor: sensors.some(s => s.name === 'KeyboardSensor'),\n    timestamp: new Date().toISOString()\n  });\n  return sensors;\n}\n_s(useDragAndDropSensors, \"qTUGUEQXLZuA6VhIU4W70LX8u1Y=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\nexport function useCompanyFieldsDragEnd(setCompanyFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      console.log('ðŸ”„ Company field drag detected:', {\n        active: active.id,\n        over: over.id\n      });\n      setCompanyFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        console.log('ðŸ”„ Company field indices:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('ðŸ”„ New company field order:', newOrder.map(f => f.id));\n        return newOrder;\n      });\n    }\n  };\n}\nexport function usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setPurchaseOrderFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\nexport function useVendorFieldsDragEnd(setVendorFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setVendorFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\nexport function useShipToFieldsDragEnd(setShipToFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setShipToFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}","map":{"version":3,"names":["useSensor","useSensors","PointerSensor","KeyboardSensor","sortableKeyboardCoordinates","arrayMove","useDragAndDropSensors","_s","sensors","activationConstraint","distance","tolerance","coordinateGetter","console","log","hasPointerSensor","some","s","name","hasKeyboardSensor","timestamp","Date","toISOString","useCompanyFieldsDragEnd","setCompanyFields","event","active","over","id","items","oldIndex","findIndex","field","newIndex","newOrder","map","f","usePurchaseOrderFieldsDragEnd","setPurchaseOrderFields","useVendorFieldsDragEnd","setVendorFields","useShipToFieldsDragEnd","setShipToFields"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useDragAndDrop.js"],"sourcesContent":["import { useSensor, useSensors, PointerSensor, KeyboardSensor } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates, arrayMove } from '@dnd-kit/sortable';\n\nexport function useDragAndDropSensors() {\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8, // Require 8px movement before drag starts\n        tolerance: 5, // Allow 5px tolerance for accidental movements\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n  \n  console.log('ðŸ”§ Sensors created:', {\n    sensors: sensors,\n    hasPointerSensor: sensors.some(s => s.name === 'PointerSensor'),\n    hasKeyboardSensor: sensors.some(s => s.name === 'KeyboardSensor'),\n    timestamp: new Date().toISOString()\n  });\n  \n  return sensors;\n}\n\n\n\nexport function useCompanyFieldsDragEnd(setCompanyFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      console.log('ðŸ”„ Company field drag detected:', { active: active.id, over: over.id });\n      setCompanyFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        console.log('ðŸ”„ Company field indices:', { oldIndex, newIndex });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('ðŸ”„ New company field order:', newOrder.map(f => f.id));\n        \n        return newOrder;\n      });\n    }\n  };\n}\n\nexport function usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setPurchaseOrderFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n\nexport function useVendorFieldsDragEnd(setVendorFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setVendorFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n\nexport function useShipToFieldsDragEnd(setShipToFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setShipToFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}