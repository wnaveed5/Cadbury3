{"ast":null,"code":"// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n// and dynamically reflects the current section order from the DOM\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData) {\n  // Ensure formData exists and has required properties\n  const data = formData || {};\n\n  // Helper function to safely get field values with fallbacks\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Helper function to get company field values\n  const getCompanyFieldValue = (fieldId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      const field = data.companyFields.find(f => f.id === fieldId);\n      return field ? field.value || defaultValue : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values\n  const getPOFieldValue = (fieldId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const field = data.purchaseOrderFields.find(f => f.id === fieldId);\n      return field ? field.value || defaultValue : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values\n  const getVendorFieldValue = (fieldId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const field = data.vendorFields.find(f => f.id === fieldId);\n      return field ? field.value || defaultValue : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values\n  const getShipToFieldValue = (fieldId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const field = data.shipToFields.find(f => f.id === fieldId);\n      return field ? field.value || defaultValue : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Function to detect current section order from DOM\n  const getCurrentSectionOrder = () => {\n    try {\n      // Look for the main container\n      const container = document.querySelector('.purchase-order-container') || document.querySelector('[class*=\"container\"]') || document.body;\n      if (!container) return ['header', 'vendor', 'shipping', 'items', 'comments'];\n      const sections = [];\n      const children = Array.from(container.children);\n      console.log('🔍 Detecting section order from DOM...', children.length, 'children found');\n      children.forEach((child, index) => {\n        if (child.classList.contains('draggable-header-row') || child.querySelector('.header-cell')) {\n          sections.push('header');\n          console.log(`  ✅ Found header section at index ${index}`);\n        } else if (child.classList.contains('draggable-vendor-section') || child.querySelector('.vendor-cell')) {\n          sections.push('vendor');\n          console.log(`  ✅ Found vendor section at index ${index}`);\n        } else if (child.classList.contains('draggable-shipping-section') || child.querySelector('.shipping-details')) {\n          sections.push('shipping');\n          console.log(`  ✅ Found shipping section at index ${index}`);\n        } else if (child.classList.contains('itemtable') || child.querySelector('.itemtable')) {\n          sections.push('items');\n          console.log(`  ✅ Found items section at index ${index}`);\n        } else if (child.querySelector('.comments-section') || child.querySelector('.totals-section')) {\n          sections.push('comments');\n          console.log(`  ✅ Found comments section at index ${index}`);\n        }\n      });\n      console.log('🔍 Final detected section order:', sections);\n      return sections.length > 0 ? sections : ['header', 'vendor', 'shipping', 'items', 'comments'];\n    } catch (error) {\n      console.warn('⚠️ Error detecting section order, using default:', error);\n      return ['header', 'vendor', 'shipping', 'items', 'comments'];\n    }\n  };\n\n  // Function to detect current header section order (company info vs purchase order)\n  const getCurrentHeaderOrder = () => {\n    try {\n      const headerCells = document.querySelectorAll('.header-cell');\n      if (headerCells.length >= 2) {\n        const firstCell = headerCells[0];\n        const secondCell = headerCells[1];\n\n        // Check which is company info vs purchase order\n        const firstIsCompany = firstCell.classList.contains('company-info') || firstCell.querySelector('[id*=\"company\"]');\n        const secondIsCompany = secondCell.classList.contains('company-info') || secondCell.querySelector('[id*=\"company\"]');\n        if (firstIsCompany && !secondIsCompany) {\n          return {\n            leftSection: 'company-info',\n            rightSection: 'purchase-order'\n          };\n        } else if (!firstIsCompany && secondIsCompany) {\n          return {\n            leftSection: 'purchase-order',\n            rightSection: 'company-info'\n          };\n        }\n      }\n\n      // Default order\n      return {\n        leftSection: 'company-info',\n        rightSection: 'purchase-order'\n      };\n    } catch (error) {\n      console.warn('⚠️ Error detecting header order, using default:', error);\n      return {\n        leftSection: 'company-info',\n        rightSection: 'purchase-order'\n      };\n    }\n  };\n\n  // Function to detect current vendor section order (vendor vs ship-to)\n  const getCurrentVendorOrder = () => {\n    try {\n      const vendorCells = document.querySelectorAll('.vendor-cell');\n      if (vendorCells.length >= 2) {\n        const firstCell = vendorCells[0];\n        const secondCell = vendorCells[1];\n\n        // Check which is vendor vs ship-to\n        const firstIsVendor = firstCell.classList.contains('vendor-section') || firstCell.querySelector('[id*=\"vendor\"]');\n        const secondIsVendor = secondCell.classList.contains('vendor-section') || secondCell.querySelector('[id*=\"vendor\"]');\n        if (firstIsVendor && !secondIsVendor) {\n          return {\n            leftSection: 'vendor',\n            rightSection: 'ship-to'\n          };\n        } else if (!firstIsVendor && secondIsVendor) {\n          return {\n            leftSection: 'ship-to',\n            rightSection: 'vendor'\n          };\n        }\n      }\n\n      // Default order\n      return {\n        leftSection: 'vendor',\n        rightSection: 'ship-to'\n      };\n    } catch (error) {\n      console.warn('⚠️ Error detecting vendor order, using default:', error);\n      return {\n        leftSection: 'vendor',\n        rightSection: 'ship-to'\n      };\n    }\n  };\n\n  // Generate line items XML\n  const generateLineItemsXML = () => {\n    if (!data.lineItems || !Array.isArray(data.lineItems)) {\n      // Return empty rows if no line items\n      return Array(5).fill(0).map((_, index) => `\n      <tr>\n        <td></td>\n        <td colspan=\"3\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"12\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"2\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">-</span></td>\n      </tr>\n    `).join('');\n    }\n    return data.lineItems.map((item, index) => `\n      <tr>\n        <td></td>\n        <td colspan=\"3\"><span class=\"editable-field\">${item.itemNumber || ''}</span></td>\n        <td colspan=\"12\"><span class=\"editable-field\">${item.description || ''}</span></td>\n        <td colspan=\"2\"><span class=\"editable-field\">${item.quantity || ''}</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">${item.unitPrice || ''}</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">${item.total || ''}</span></td>\n      </tr>\n    `).join('');\n  };\n\n  // Generate header section XML based on current order\n  const generateHeaderXML = () => {\n    const headerOrder = getCurrentHeaderOrder();\n    const companyInfo = `\n                            <!-- Company Info -->\n                            <span>${getCompanyFieldValue('company-name', '[Company Name]')}</span><br />\n                            <span>${getCompanyFieldValue('company-address', '[Street Address]')}</span><br />\n                            <span>${getCompanyFieldValue('company-city-state', '[City, ST ZIP]')}</span><br />\n                            <span>Phone: ${getCompanyFieldValue('company-phone', '(000) 000-0000')}</span><br />\n                            <span>Fax: ${getCompanyFieldValue('company-fax', '(000) 000-0000')}</span><br />\n                            <span>Website: ${getCompanyFieldValue('company-website', 'www.example.com')}</span>`;\n    const purchaseOrder = `\n                            <!-- PO Title and Details -->\n                            <span class=\"po-title\">PURCHASE ORDER</span><br />\n                            <span style=\"margin-top: 20px;\">\n                                <span>DATE: ${getPOFieldValue('po-date', 'MM/DD/YYYY')}</span><br />\n                                <span>PO #: ${getPOFieldValue('po-number', '[PO Number]')}</span>\n                            </span>`;\n    if (headerOrder.leftSection === 'company-info') {\n      return `\n                        <td width=\"50%\">\n                            ${companyInfo}\n                        </td>\n                        <td width=\"50%\" style=\"text-align: right;\">\n                            ${purchaseOrder}\n                        </td>`;\n    } else {\n      return `\n                        <td width=\"50%\">\n                            ${purchaseOrder}\n                        </td>\n                        <td width=\"50%\" style=\"text-align: right;\">\n                            ${companyInfo}\n                        </td>`;\n    }\n  };\n\n  // Generate vendor section XML based on current order\n  const generateVendorXML = () => {\n    const vendorOrder = getCurrentVendorOrder();\n    const vendorInfo = `\n                            <!-- Vendor Info -->\n                            <table style=\"width: 100%; border: none;\">\n                                <tr>\n                                    <td class=\"section-header\">VENDOR</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 15px; border: none;\">\n                                        <span>${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br />\n                                        <span>${getVendorFieldValue('vendor-contact', '[Contact or Department]')}</span><br />\n                                        <span>${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br />\n                                        <span>${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br />\n                                        <span>Phone: ${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br />\n                                        <span>Fax: ${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n                                    </td>\n                                </tr>\n                            </table>`;\n    const shipToInfo = `\n                            <!-- Ship To Info -->\n                            <table style=\"width: 100%; border: none;\">\n                                <tr>\n                                    <td class=\"section-header\">SHIP TO</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 15px; border: none;\">\n                                        <span>${getShipToFieldValue('ship-to-name', '[Name]')}</span><br />\n                                        <span>${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br />\n                                        <span>${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br />\n                                        <span>${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br />\n                                        <span>Phone: ${getShipToFieldValue('ship-to-phone', '[Phone]')}</span>\n                                    </td>\n                                </tr>\n                            </table>`;\n    if (vendorOrder.leftSection === 'vendor') {\n      return `\n                        <td width=\"50%\" style=\"vertical-align: top; padding-right: 20px;\">\n                            ${vendorInfo}\n                        </td>\n                        <td width=\"50%\" style=\"vertical-align: top; padding-left: 20px;\">\n                            ${shipToInfo}\n                        </td>`;\n    } else {\n      return `\n                        <td width=\"50%\" style=\"vertical-align: top; padding-right: 20px;\">\n                            ${shipToInfo}\n                        </td>\n                        <td width=\"50%\" style=\"vertical-align: top; padding-left: 20px;\">\n                            ${vendorInfo}\n                        </td>`;\n    }\n  };\n\n  // Generate sections in dynamic order\n  const generateDynamicSectionsXML = () => {\n    const sectionOrder = getCurrentSectionOrder();\n    let sectionsXml = '';\n    sectionOrder.forEach(sectionType => {\n      switch (sectionType) {\n        case 'header':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Header Table -->\n                <table class=\"header-table\">\n                    <tr>\n                        ${generateHeaderXML()}\n                    </tr>\n                </table>\n            </td>\n        </tr>`;\n          break;\n        case 'vendor':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Vendor and Ship To Table -->\n                <table style=\"width: 100%; border: none; margin-top: 20px;\">\n                    <tr>\n                        ${generateVendorXML()}\n                    </tr>\n                </table>\n            </td>\n        </tr>`;\n          break;\n        case 'shipping':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Shipping Details Bar -->\n                <table style=\"width: 100%; border: none;\">\n                    <tr>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">REQUISITIONER</span><br />\n                            <span>${getFieldValue('requisitioner', '[Requisitioner]')}</span>\n                        </td>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">SHIP VIA</span><br />\n                            <span>${getFieldValue('shipVia', '[Ship Via]')}</span>\n                        </td>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">F.O.B.</span><br />\n                            <span>${getFieldValue('fob', '[FOB]')}</span>\n                        </td>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">SHIPPING TERMS</span><br />\n                            <span>${getFieldValue('shippingTerms', '[Shipping Terms]')}</span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>`;\n          break;\n        case 'items':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Line Items Table -->\n                <table class=\"itemtable\">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th colspan=\"3\">Item#</th>\n                            <th colspan=\"12\">Description</th>\n                            <th colspan=\"2\">Qty</th>\n                            <th colspan=\"3\">Rate</th>\n                            <th colspan=\"3\">Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${generateLineItemsXML()}\n                    </tbody>\n                </table>\n            </td>\n        </tr>`;\n          break;\n        case 'comments':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Comments and Totals -->\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td width=\"50%\" style=\"vertical-align: top;\">\n                            <!-- Comments Section -->\n                            <span class=\"comments-section\">\n                                <span class=\"section-header\">Comments or Special Instructions</span>\n                                <span style=\"padding: 10px; min-height: 80px; display: block; margin-top: 10px;\">\n                                    <span class=\"editable-field\">${getFieldValue('comments', '')}</span>\n                                </span>\n                            </span>\n                        </td>\n                        <td width=\"50%\" style=\"vertical-align: top; padding-left: 40px;\">\n                            <!-- Totals Section -->\n                            <span class=\"totals-section\">\n                                <span class=\"total-row\">\n                                    <span>SUBTOTAL:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('subtotal', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row\">\n                                    <span>TAX:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('tax', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row\">\n                                    <span>SHIPPING:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('shipping', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row\">\n                                    <span>OTHER:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('other', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row total-final\">\n                                    <span>TOTAL:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('total', '$0.00')}</span>\n                                </span>\n                            </span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n        \n        <tr>\n            <td>\n                <!-- Contact Information -->\n                <span class=\"contact-section\">\n                    <strong>If you have any questions about this purchase order, please contact:</strong><br />\n                    <span class=\"editable-field\">${getFieldValue('contactInfo', '[Name, Phone #, E-mail]')}</span>\n                </span>\n            </td>\n        </tr>`;\n          break;\n        default:\n          console.warn(`⚠️ Unknown section type: ${sectionType}`);\n      }\n    });\n    return sectionsXml;\n  };\n\n  // Generate the complete XML using dynamic section detection\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <style type=\"text/css\">\n        * { font-family: Arial, sans-serif; font-size: 9pt; }\n        table { \n            width: 100%; \n            border-collapse: collapse; \n            margin-bottom: 10px;\n        }\n        .main-container { \n            border: none; \n            padding: 20px; \n        }\n        .header-table { \n            border: none; \n            margin-bottom: 20px;\n        }\n        .section-header { \n            background-color: #333; \n            color: #ffffff; \n            font-weight: bold; \n            padding: 8px; \n            text-align: center;\n            border: none;\n        }\n        .po-title { \n            font-size: 20pt; \n            font-weight: bold; \n            color: #333; \n            text-align: center;\n            background-color: #f0f0f0;\n            padding: 6px;\n            border: none;\n        }\n        .editable-field { \n            min-height: 20px; \n            display: inline-block;\n        }\n        .shipping-details { \n            margin: 20px 0;\n        }\n        .shipping-item { \n            text-align: center; \n            padding: 10px;\n        }\n        .itemtable { \n            border: none; \n            margin: 20px 0;\n        }\n        .itemtable th { \n            background-color: #333; \n            color: #ffffff;\n            padding: 10px; \n            border: none;\n            font-weight: bold;\n        }\n        .itemtable td { \n            padding: 8px; \n            border: none;\n        }\n        .totals-section { \n            text-align: right; \n            margin: 20px 0;\n        }\n        .total-row { \n            margin: 5px 0; \n            font-weight: bold;\n        }\n        .total-final { \n            font-size: 18px; \n            color: #333;\n            background-color: #ffff99;\n            padding: 4px;\n        }\n        .comments-section { \n            margin: 20px 0;\n        }\n        .contact-section { \n            text-align: center; \n            margin: 20px 0; \n            padding: 10px;\n        }\n        .section-content { \n            padding: 6px; \n            border: none; \n            vertical-align: top;\n        }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    <table class=\"main-container\">\n        ${generateDynamicSectionsXML()}\n    </table>\n</body>\n</pdf>`;\n  console.log('✅ XML generated with dynamic section order detection');\n  return xml;\n}\n\n// Export the template structure for reference\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    fields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website']\n  },\n  purchaseOrder: {\n    fields: ['po-title', 'po-date', 'po-number']\n  },\n  vendor: {\n    fields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax']\n  },\n  shipTo: {\n    fields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone']\n  },\n  shipping: {\n    fields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms']\n  },\n  items: {\n    fields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total']\n  },\n  totals: {\n    fields: ['subtotal', 'tax', 'shipping', 'other', 'total']\n  },\n  comments: {\n    fields: ['comments']\n  },\n  contact: {\n    fields: ['contactInfo']\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}","map":{"version":3,"names":["generatePurchaseOrderXML","formData","data","getFieldValue","fieldName","defaultValue","getCompanyFieldValue","fieldId","companyFields","Array","isArray","field","find","f","id","value","getPOFieldValue","purchaseOrderFields","getVendorFieldValue","vendorFields","getShipToFieldValue","shipToFields","getCurrentSectionOrder","container","document","querySelector","body","sections","children","from","console","log","length","forEach","child","index","classList","contains","push","error","warn","getCurrentHeaderOrder","headerCells","querySelectorAll","firstCell","secondCell","firstIsCompany","secondIsCompany","leftSection","rightSection","getCurrentVendorOrder","vendorCells","firstIsVendor","secondIsVendor","generateLineItemsXML","lineItems","fill","map","_","join","item","itemNumber","description","quantity","unitPrice","total","generateHeaderXML","headerOrder","companyInfo","purchaseOrder","generateVendorXML","vendorOrder","vendorInfo","shipToInfo","generateDynamicSectionsXML","sectionOrder","sectionsXml","sectionType","xml","Date","toISOString","purchaseOrderTemplate","fields","vendor","shipTo","shipping","items","totals","comments","contact","getTemplateStructure"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/PurchaseOrderTemplate.js"],"sourcesContent":["// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n// and dynamically reflects the current section order from the DOM\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData) {\n  // Ensure formData exists and has required properties\n  const data = formData || {};\n  \n  // Helper function to safely get field values with fallbacks\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Helper function to get company field values\n  const getCompanyFieldValue = (fieldId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      const field = data.companyFields.find(f => f.id === fieldId);\n      return field ? (field.value || defaultValue) : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values\n  const getPOFieldValue = (fieldId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const field = data.purchaseOrderFields.find(f => f.id === fieldId);\n      return field ? (field.value || defaultValue) : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values\n  const getVendorFieldValue = (fieldId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const field = data.vendorFields.find(f => f.id === fieldId);\n      return field ? (field.value || defaultValue) : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values\n  const getShipToFieldValue = (fieldId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const field = data.shipToFields.find(f => f.id === fieldId);\n      return field ? (field.value || defaultValue) : defaultValue;\n    }\n    return defaultValue;\n  };\n\n  // Function to detect current section order from DOM\n  const getCurrentSectionOrder = () => {\n    try {\n      // Look for the main container\n      const container = document.querySelector('.purchase-order-container') || \n                      document.querySelector('[class*=\"container\"]') ||\n                      document.body;\n      \n      if (!container) return ['header', 'vendor', 'shipping', 'items', 'comments'];\n      \n      const sections = [];\n      const children = Array.from(container.children);\n      \n      console.log('🔍 Detecting section order from DOM...', children.length, 'children found');\n      \n      children.forEach((child, index) => {\n        if (child.classList.contains('draggable-header-row') || \n            child.querySelector('.header-cell')) {\n          sections.push('header');\n          console.log(`  ✅ Found header section at index ${index}`);\n        } else if (child.classList.contains('draggable-vendor-section') || \n                   child.querySelector('.vendor-cell')) {\n          sections.push('vendor');\n          console.log(`  ✅ Found vendor section at index ${index}`);\n        } else if (child.classList.contains('draggable-shipping-section') || \n                   child.querySelector('.shipping-details')) {\n          sections.push('shipping');\n          console.log(`  ✅ Found shipping section at index ${index}`);\n        } else if (child.classList.contains('itemtable') || \n                   child.querySelector('.itemtable')) {\n          sections.push('items');\n          console.log(`  ✅ Found items section at index ${index}`);\n        } else if (child.querySelector('.comments-section') || \n                   child.querySelector('.totals-section')) {\n          sections.push('comments');\n          console.log(`  ✅ Found comments section at index ${index}`);\n        }\n      });\n      \n      console.log('🔍 Final detected section order:', sections);\n      return sections.length > 0 ? sections : ['header', 'vendor', 'shipping', 'items', 'comments'];\n    } catch (error) {\n      console.warn('⚠️ Error detecting section order, using default:', error);\n      return ['header', 'vendor', 'shipping', 'items', 'comments'];\n    }\n  };\n\n  // Function to detect current header section order (company info vs purchase order)\n  const getCurrentHeaderOrder = () => {\n    try {\n      const headerCells = document.querySelectorAll('.header-cell');\n      if (headerCells.length >= 2) {\n        const firstCell = headerCells[0];\n        const secondCell = headerCells[1];\n        \n        // Check which is company info vs purchase order\n        const firstIsCompany = firstCell.classList.contains('company-info') || \n                              firstCell.querySelector('[id*=\"company\"]');\n        const secondIsCompany = secondCell.classList.contains('company-info') || \n                               secondCell.querySelector('[id*=\"company\"]');\n        \n        if (firstIsCompany && !secondIsCompany) {\n          return { leftSection: 'company-info', rightSection: 'purchase-order' };\n        } else if (!firstIsCompany && secondIsCompany) {\n          return { leftSection: 'purchase-order', rightSection: 'company-info' };\n        }\n      }\n      \n      // Default order\n      return { leftSection: 'company-info', rightSection: 'purchase-order' };\n    } catch (error) {\n      console.warn('⚠️ Error detecting header order, using default:', error);\n      return { leftSection: 'company-info', rightSection: 'purchase-order' };\n    }\n  };\n\n  // Function to detect current vendor section order (vendor vs ship-to)\n  const getCurrentVendorOrder = () => {\n    try {\n      const vendorCells = document.querySelectorAll('.vendor-cell');\n      if (vendorCells.length >= 2) {\n        const firstCell = vendorCells[0];\n        const secondCell = vendorCells[1];\n        \n        // Check which is vendor vs ship-to\n        const firstIsVendor = firstCell.classList.contains('vendor-section') || \n                             firstCell.querySelector('[id*=\"vendor\"]');\n        const secondIsVendor = secondCell.classList.contains('vendor-section') || \n                              secondCell.querySelector('[id*=\"vendor\"]');\n        \n        if (firstIsVendor && !secondIsVendor) {\n          return { leftSection: 'vendor', rightSection: 'ship-to' };\n        } else if (!firstIsVendor && secondIsVendor) {\n          return { leftSection: 'ship-to', rightSection: 'vendor' };\n        }\n      }\n      \n      // Default order\n      return { leftSection: 'vendor', rightSection: 'ship-to' };\n    } catch (error) {\n      console.warn('⚠️ Error detecting vendor order, using default:', error);\n      return { leftSection: 'vendor', rightSection: 'ship-to' };\n    }\n  };\n\n  // Generate line items XML\n  const generateLineItemsXML = () => {\n    if (!data.lineItems || !Array.isArray(data.lineItems)) {\n      // Return empty rows if no line items\n      return Array(5).fill(0).map((_, index) => `\n      <tr>\n        <td></td>\n        <td colspan=\"3\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"12\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"2\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">-</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">-</span></td>\n      </tr>\n    `).join('');\n    }\n\n    return data.lineItems.map((item, index) => `\n      <tr>\n        <td></td>\n        <td colspan=\"3\"><span class=\"editable-field\">${item.itemNumber || ''}</span></td>\n        <td colspan=\"12\"><span class=\"editable-field\">${item.description || ''}</span></td>\n        <td colspan=\"2\"><span class=\"editable-field\">${item.quantity || ''}</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">${item.unitPrice || ''}</span></td>\n        <td colspan=\"3\"><span class=\"editable-field\">${item.total || ''}</span></td>\n      </tr>\n    `).join('');\n  };\n\n  // Generate header section XML based on current order\n  const generateHeaderXML = () => {\n    const headerOrder = getCurrentHeaderOrder();\n    \n    const companyInfo = `\n                            <!-- Company Info -->\n                            <span>${getCompanyFieldValue('company-name', '[Company Name]')}</span><br />\n                            <span>${getCompanyFieldValue('company-address', '[Street Address]')}</span><br />\n                            <span>${getCompanyFieldValue('company-city-state', '[City, ST ZIP]')}</span><br />\n                            <span>Phone: ${getCompanyFieldValue('company-phone', '(000) 000-0000')}</span><br />\n                            <span>Fax: ${getCompanyFieldValue('company-fax', '(000) 000-0000')}</span><br />\n                            <span>Website: ${getCompanyFieldValue('company-website', 'www.example.com')}</span>`;\n    \n    const purchaseOrder = `\n                            <!-- PO Title and Details -->\n                            <span class=\"po-title\">PURCHASE ORDER</span><br />\n                            <span style=\"margin-top: 20px;\">\n                                <span>DATE: ${getPOFieldValue('po-date', 'MM/DD/YYYY')}</span><br />\n                                <span>PO #: ${getPOFieldValue('po-number', '[PO Number]')}</span>\n                            </span>`;\n    \n    if (headerOrder.leftSection === 'company-info') {\n      return `\n                        <td width=\"50%\">\n                            ${companyInfo}\n                        </td>\n                        <td width=\"50%\" style=\"text-align: right;\">\n                            ${purchaseOrder}\n                        </td>`;\n    } else {\n      return `\n                        <td width=\"50%\">\n                            ${purchaseOrder}\n                        </td>\n                        <td width=\"50%\" style=\"text-align: right;\">\n                            ${companyInfo}\n                        </td>`;\n    }\n  };\n\n  // Generate vendor section XML based on current order\n  const generateVendorXML = () => {\n    const vendorOrder = getCurrentVendorOrder();\n    \n    const vendorInfo = `\n                            <!-- Vendor Info -->\n                            <table style=\"width: 100%; border: none;\">\n                                <tr>\n                                    <td class=\"section-header\">VENDOR</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 15px; border: none;\">\n                                        <span>${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br />\n                                        <span>${getVendorFieldValue('vendor-contact', '[Contact or Department]')}</span><br />\n                                        <span>${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br />\n                                        <span>${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br />\n                                        <span>Phone: ${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br />\n                                        <span>Fax: ${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n                                    </td>\n                                </tr>\n                            </table>`;\n    \n    const shipToInfo = `\n                            <!-- Ship To Info -->\n                            <table style=\"width: 100%; border: none;\">\n                                <tr>\n                                    <td class=\"section-header\">SHIP TO</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 15px; border: none;\">\n                                        <span>${getShipToFieldValue('ship-to-name', '[Name]')}</span><br />\n                                        <span>${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br />\n                                        <span>${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br />\n                                        <span>${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br />\n                                        <span>Phone: ${getShipToFieldValue('ship-to-phone', '[Phone]')}</span>\n                                    </td>\n                                </tr>\n                            </table>`;\n    \n    if (vendorOrder.leftSection === 'vendor') {\n      return `\n                        <td width=\"50%\" style=\"vertical-align: top; padding-right: 20px;\">\n                            ${vendorInfo}\n                        </td>\n                        <td width=\"50%\" style=\"vertical-align: top; padding-left: 20px;\">\n                            ${shipToInfo}\n                        </td>`;\n    } else {\n      return `\n                        <td width=\"50%\" style=\"vertical-align: top; padding-right: 20px;\">\n                            ${shipToInfo}\n                        </td>\n                        <td width=\"50%\" style=\"vertical-align: top; padding-left: 20px;\">\n                            ${vendorInfo}\n                        </td>`;\n    }\n  };\n\n  // Generate sections in dynamic order\n  const generateDynamicSectionsXML = () => {\n    const sectionOrder = getCurrentSectionOrder();\n    let sectionsXml = '';\n    \n    sectionOrder.forEach(sectionType => {\n      switch(sectionType) {\n        case 'header':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Header Table -->\n                <table class=\"header-table\">\n                    <tr>\n                        ${generateHeaderXML()}\n                    </tr>\n                </table>\n            </td>\n        </tr>`;\n          break;\n          \n        case 'vendor':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Vendor and Ship To Table -->\n                <table style=\"width: 100%; border: none; margin-top: 20px;\">\n                    <tr>\n                        ${generateVendorXML()}\n                    </tr>\n                </table>\n            </td>\n        </tr>`;\n          break;\n          \n        case 'shipping':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Shipping Details Bar -->\n                <table style=\"width: 100%; border: none;\">\n                    <tr>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">REQUISITIONER</span><br />\n                            <span>${getFieldValue('requisitioner', '[Requisitioner]')}</span>\n                        </td>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">SHIP VIA</span><br />\n                            <span>${getFieldValue('shipVia', '[Ship Via]')}</span>\n                        </td>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">F.O.B.</span><br />\n                            <span>${getFieldValue('fob', '[FOB]')}</span>\n                        </td>\n                        <td width=\"25%\" style=\"text-align: center; padding: 10px; border: none;\">\n                            <span class=\"section-header\">SHIPPING TERMS</span><br />\n                            <span>${getFieldValue('shippingTerms', '[Shipping Terms]')}</span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>`;\n          break;\n          \n        case 'items':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Line Items Table -->\n                <table class=\"itemtable\">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th colspan=\"3\">Item#</th>\n                            <th colspan=\"12\">Description</th>\n                            <th colspan=\"2\">Qty</th>\n                            <th colspan=\"3\">Rate</th>\n                            <th colspan=\"3\">Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${generateLineItemsXML()}\n                    </tbody>\n                </table>\n            </td>\n        </tr>`;\n          break;\n          \n        case 'comments':\n          sectionsXml += `\n        <tr>\n            <td>\n                <!-- Comments and Totals -->\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td width=\"50%\" style=\"vertical-align: top;\">\n                            <!-- Comments Section -->\n                            <span class=\"comments-section\">\n                                <span class=\"section-header\">Comments or Special Instructions</span>\n                                <span style=\"padding: 10px; min-height: 80px; display: block; margin-top: 10px;\">\n                                    <span class=\"editable-field\">${getFieldValue('comments', '')}</span>\n                                </span>\n                            </span>\n                        </td>\n                        <td width=\"50%\" style=\"vertical-align: top; padding-left: 40px;\">\n                            <!-- Totals Section -->\n                            <span class=\"totals-section\">\n                                <span class=\"total-row\">\n                                    <span>SUBTOTAL:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('subtotal', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row\">\n                                    <span>TAX:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('tax', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row\">\n                                    <span>SHIPPING:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('shipping', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row\">\n                                    <span>OTHER:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('other', '$0.00')}</span>\n                                </span><br />\n                                <span class=\"total-row total-final\">\n                                    <span>TOTAL:</span>\n                                    <span style=\"margin-left: 20px;\">${getFieldValue('total', '$0.00')}</span>\n                                </span>\n                            </span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n        \n        <tr>\n            <td>\n                <!-- Contact Information -->\n                <span class=\"contact-section\">\n                    <strong>If you have any questions about this purchase order, please contact:</strong><br />\n                    <span class=\"editable-field\">${getFieldValue('contactInfo', '[Name, Phone #, E-mail]')}</span>\n                </span>\n            </td>\n        </tr>`;\n          break;\n          \n        default:\n          console.warn(`⚠️ Unknown section type: ${sectionType}`);\n      }\n    });\n    \n    return sectionsXml;\n  };\n\n  // Generate the complete XML using dynamic section detection\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <style type=\"text/css\">\n        * { font-family: Arial, sans-serif; font-size: 9pt; }\n        table { \n            width: 100%; \n            border-collapse: collapse; \n            margin-bottom: 10px;\n        }\n        .main-container { \n            border: none; \n            padding: 20px; \n        }\n        .header-table { \n            border: none; \n            margin-bottom: 20px;\n        }\n        .section-header { \n            background-color: #333; \n            color: #ffffff; \n            font-weight: bold; \n            padding: 8px; \n            text-align: center;\n            border: none;\n        }\n        .po-title { \n            font-size: 20pt; \n            font-weight: bold; \n            color: #333; \n            text-align: center;\n            background-color: #f0f0f0;\n            padding: 6px;\n            border: none;\n        }\n        .editable-field { \n            min-height: 20px; \n            display: inline-block;\n        }\n        .shipping-details { \n            margin: 20px 0;\n        }\n        .shipping-item { \n            text-align: center; \n            padding: 10px;\n        }\n        .itemtable { \n            border: none; \n            margin: 20px 0;\n        }\n        .itemtable th { \n            background-color: #333; \n            color: #ffffff;\n            padding: 10px; \n            border: none;\n            font-weight: bold;\n        }\n        .itemtable td { \n            padding: 8px; \n            border: none;\n        }\n        .totals-section { \n            text-align: right; \n            margin: 20px 0;\n        }\n        .total-row { \n            margin: 5px 0; \n            font-weight: bold;\n        }\n        .total-final { \n            font-size: 18px; \n            color: #333;\n            background-color: #ffff99;\n            padding: 4px;\n        }\n        .comments-section { \n            margin: 20px 0;\n        }\n        .contact-section { \n            text-align: center; \n            margin: 20px 0; \n            padding: 10px;\n        }\n        .section-content { \n            padding: 6px; \n            border: none; \n            vertical-align: top;\n        }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    <table class=\"main-container\">\n        ${generateDynamicSectionsXML()}\n    </table>\n</body>\n</pdf>`;\n\n  console.log('✅ XML generated with dynamic section order detection');\n  return xml;\n}\n\n// Export the template structure for reference\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    fields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website']\n  },\n  purchaseOrder: {\n    fields: ['po-title', 'po-date', 'po-number']\n  },\n  vendor: {\n    fields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax']\n  },\n  shipTo: {\n    fields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone']\n  },\n  shipping: {\n    fields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms']\n  },\n  items: {\n    fields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total']\n  },\n  totals: {\n    fields: ['subtotal', 'tax', 'shipping', 'other', 'total']\n  },\n  comments: {\n    fields: ['comments']\n  },\n  contact: {\n    fields: ['contactInfo']\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n"],"mappings":"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AK,OAAO;UACVyE,WAAW,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0BtB,oBAAoB,CAAC,CAAC;AAChD;AACA;AACA;AACA,cAAc;UACJ;QAEF,KAAK,UAAU;UACbsB,WAAW,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmEzE,aAAa,CAAC,UAAU,EAAE,EAAE,CAAC;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuEA,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC;AACzG;AACA;AACA;AACA,uEAAuEA,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;AACpG;AACA;AACA;AACA,uEAAuEA,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC;AACzG;AACA;AACA;AACA,uEAAuEA,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC;AACtG;AACA;AACA;AACA,uEAAuEA,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmDA,aAAa,CAAC,aAAa,EAAE,yBAAyB,CAAC;AAC1G;AACA;AACA,cAAc;UACJ;QAEF;UACE2B,OAAO,CAACU,IAAI,CAAC,4BAA4BqC,WAAW,EAAE,CAAC;MAC3D;IACF,CAAC,CAAC;IAEF,OAAOD,WAAW;EACpB,CAAC;;EAED;EACA,MAAME,GAAG,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AAC/D,kCAAkC,IAAID,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUN,0BAA0B,CAAC,CAAC;AACtC;AACA;AACA,OAAO;EAEL5C,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;EACnE,OAAO+C,GAAG;AACZ;;AAEA;AACA,OAAO,MAAMG,qBAAqB,GAAG;EACnCb,WAAW,EAAE;IACXc,MAAM,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB;EACrH,CAAC;EACDb,aAAa,EAAE;IACba,MAAM,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW;EAC7C,CAAC;EACDC,MAAM,EAAE;IACND,MAAM,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,cAAc,EAAE,YAAY;EAClH,CAAC;EACDE,MAAM,EAAE;IACNF,MAAM,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,eAAe;EACtG,CAAC;EACDG,QAAQ,EAAE;IACRH,MAAM,EAAE,CAAC,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe;EAC7D,CAAC;EACDI,KAAK,EAAE;IACLJ,MAAM,EAAE,CAAC,YAAY,EAAE,aAAa,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO;EACxE,CAAC;EACDK,MAAM,EAAE;IACNL,MAAM,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO;EAC1D,CAAC;EACDM,QAAQ,EAAE;IACRN,MAAM,EAAE,CAAC,UAAU;EACrB,CAAC;EACDO,OAAO,EAAE;IACPP,MAAM,EAAE,CAAC,aAAa;EACxB;AACF,CAAC;;AAED;AACA,OAAO,SAASQ,oBAAoBA,CAAA,EAAG;EACrC,OAAOT,qBAAqB;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}