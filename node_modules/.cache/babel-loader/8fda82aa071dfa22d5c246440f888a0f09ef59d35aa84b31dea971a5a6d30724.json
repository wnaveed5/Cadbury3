{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSensor, useSensors, PointerSensor, KeyboardSensor, MouseSensor, TouchSensor } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates, arrayMove } from '@dnd-kit/sortable';\nexport function useDragAndDropSensors() {\n  _s();\n  var _mouseSensor$construc, _touchSensor$construc, _keyboardSensor$const;\n  console.log('ðŸ”§ Creating sensors...');\n\n  // Try using MouseSensor and TouchSensor instead of PointerSensor\n  const mouseSensor = useSensor(MouseSensor);\n  const touchSensor = useSensor(TouchSensor);\n  const keyboardSensor = useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  });\n  console.log('ðŸ”§ Individual sensors:', {\n    mouseSensor: mouseSensor,\n    touchSensor: touchSensor,\n    keyboardSensor: keyboardSensor,\n    mouseSensorType: mouseSensor === null || mouseSensor === void 0 ? void 0 : (_mouseSensor$construc = mouseSensor.constructor) === null || _mouseSensor$construc === void 0 ? void 0 : _mouseSensor$construc.name,\n    touchSensorType: touchSensor === null || touchSensor === void 0 ? void 0 : (_touchSensor$construc = touchSensor.constructor) === null || _touchSensor$construc === void 0 ? void 0 : _touchSensor$construc.name,\n    keyboardSensorType: keyboardSensor === null || keyboardSensor === void 0 ? void 0 : (_keyboardSensor$const = keyboardSensor.constructor) === null || _keyboardSensor$const === void 0 ? void 0 : _keyboardSensor$const.name\n  });\n  const sensors = useSensors(mouseSensor, touchSensor, keyboardSensor);\n  console.log('ðŸ”§ Sensors created:', {\n    sensors: sensors,\n    sensorCount: sensors.length,\n    sensorTypes: sensors.map(s => s.constructor.name || 'unknown'),\n    timestamp: new Date().toISOString()\n  });\n  return sensors;\n}\n_s(useDragAndDropSensors, \"nZlQwQRkMEBvuDWUXzFzVgdP3XM=\", false, function () {\n  return [useSensor, useSensor, useSensor, useSensors];\n});\nexport function useCompanyFieldsDragEnd(setCompanyFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      console.log('ðŸ”„ Company field drag detected:', {\n        active: active.id,\n        over: over.id\n      });\n      setCompanyFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        console.log('ðŸ”„ Company field indices:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('ðŸ”„ New company field order:', newOrder.map(f => f.id));\n        return newOrder;\n      });\n    }\n  };\n}\nexport function usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setPurchaseOrderFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\nexport function useVendorFieldsDragEnd(setVendorFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setVendorFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\nexport function useShipToFieldsDragEnd(setShipToFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setShipToFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}","map":{"version":3,"names":["useSensor","useSensors","PointerSensor","KeyboardSensor","MouseSensor","TouchSensor","sortableKeyboardCoordinates","arrayMove","useDragAndDropSensors","_s","_mouseSensor$construc","_touchSensor$construc","_keyboardSensor$const","console","log","mouseSensor","touchSensor","keyboardSensor","coordinateGetter","mouseSensorType","constructor","name","touchSensorType","keyboardSensorType","sensors","sensorCount","length","sensorTypes","map","s","timestamp","Date","toISOString","useCompanyFieldsDragEnd","setCompanyFields","event","active","over","id","items","oldIndex","findIndex","field","newIndex","newOrder","f","usePurchaseOrderFieldsDragEnd","setPurchaseOrderFields","useVendorFieldsDragEnd","setVendorFields","useShipToFieldsDragEnd","setShipToFields"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useDragAndDrop.js"],"sourcesContent":["import { useSensor, useSensors, PointerSensor, KeyboardSensor, MouseSensor, TouchSensor } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates, arrayMove } from '@dnd-kit/sortable';\n\nexport function useDragAndDropSensors() {\n  console.log('ðŸ”§ Creating sensors...');\n  \n  // Try using MouseSensor and TouchSensor instead of PointerSensor\n  const mouseSensor = useSensor(MouseSensor);\n  const touchSensor = useSensor(TouchSensor);\n  const keyboardSensor = useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates,\n  });\n  \n  console.log('ðŸ”§ Individual sensors:', {\n    mouseSensor: mouseSensor,\n    touchSensor: touchSensor,\n    keyboardSensor: keyboardSensor,\n    mouseSensorType: mouseSensor?.constructor?.name,\n    touchSensorType: touchSensor?.constructor?.name,\n    keyboardSensorType: keyboardSensor?.constructor?.name\n  });\n  \n  const sensors = useSensors(mouseSensor, touchSensor, keyboardSensor);\n  \n  console.log('ðŸ”§ Sensors created:', {\n    sensors: sensors,\n    sensorCount: sensors.length,\n    sensorTypes: sensors.map(s => s.constructor.name || 'unknown'),\n    timestamp: new Date().toISOString()\n  });\n  \n  return sensors;\n}\n\n\n\nexport function useCompanyFieldsDragEnd(setCompanyFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      console.log('ðŸ”„ Company field drag detected:', { active: active.id, over: over.id });\n      setCompanyFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        console.log('ðŸ”„ Company field indices:', { oldIndex, newIndex });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('ðŸ”„ New company field order:', newOrder.map(f => f.id));\n        \n        return newOrder;\n      });\n    }\n  };\n}\n\nexport function usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setPurchaseOrderFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n\nexport function useVendorFieldsDragEnd(setVendorFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setVendorFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n\nexport function useShipToFieldsDragEnd(setShipToFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setShipToFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}