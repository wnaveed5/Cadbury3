{"ast":null,"code":"import _objectSpread from\"/Users/waleed/Documents/GitHub/Cadbury3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Form Data Mapping Utilities for Purchase Order Template\n// This module provides comprehensive mapping between React form data and XML generation\nimport{dynamicIdUtils,fieldMappingUtils}from'./PurchaseOrderTemplate';/**\n * Form Data Collection Utility\n * Collects form data from various sources (React state, DOM, etc.) into a structured format\n */export class FormDataMapper{constructor(){this.formData=this.getEmptyFormData();this.mappingConfig=this.getDefaultMappingConfig();}/**\n   * Get empty form data structure\n   */getEmptyFormData(){return{companyInfo:{name:'',address:'',cityStateZip:'',phone:'',fax:'',website:''},headerInfo:{title:'PURCHASE ORDER',date:'',poNumber:''},vendor:{company:'',contact:'',address:'',cityStateZip:'',phone:'',fax:''},shipTo:{name:'',company:'',address:'',cityStateZip:'',phone:'',fax:''},shippingDetails:{requisitioner:'',shipVia:'',fob:'',shippingTerms:''},lineItems:[],totals:{subtotal:0,tax:0,shipping:0,other:0,total:0},comments:'',contactInfo:''};}/**\n   * Default mapping configuration between form fields and data structure\n   */getDefaultMappingConfig(){return{// Company Information mappings\ncompanyInfo:{'company-name':'companyInfo.name','company-address':'companyInfo.address','company-city-state':'companyInfo.cityStateZip','company-phone':'companyInfo.phone','company-fax':'companyInfo.fax','company-website':'companyInfo.website'},// Purchase Order Header mappings\nheaderInfo:{'po-title':'headerInfo.title','po-date':'headerInfo.date','po-number':'headerInfo.poNumber'},// Vendor Information mappings\nvendor:{'vendor-company':'vendor.company','vendor-contact':'vendor.contact','vendor-address':'vendor.address','vendor-city-state':'vendor.cityStateZip','vendor-phone':'vendor.phone','vendor-fax':'vendor.fax'},// Ship To Information mappings\nshipTo:{'ship-to-name':'shipTo.name','ship-to-company':'shipTo.company','ship-to-address':'shipTo.address','ship-to-city-state':'shipTo.cityStateZip','ship-to-phone':'shipTo.phone','ship-to-fax':'shipTo.fax'},// Shipping Details mappings\nshippingDetails:{'requisitioner':'shippingDetails.requisitioner','shipVia':'shippingDetails.shipVia','fob':'shippingDetails.fob','shippingTerms':'shippingDetails.shippingTerms'},// Line Items mappings (handled separately due to array structure)\nlineItems:{'itemNumber':'itemNumber','description':'description','quantity':'quantity','unitPrice':'unitPrice','total':'total'},// Totals mappings\ntotals:{'subtotal':'totals.subtotal','tax':'totals.tax','shipping':'totals.shipping','other':'totals.other','total':'totals.total'},// Other fields\nother:{'comments':'comments','contactInfo':'contactInfo'}};}/**\n   * Collect form data from React component fields arrays\n   * This works with the existing PurchaseOrderForm.jsx structure\n   */collectFromReactFieldArrays(fieldArrays){const formData=this.getEmptyFormData();// Process company fields\nif(fieldArrays.companyFields){fieldArrays.companyFields.forEach(field=>{const mappingKey=this.mappingConfig.companyInfo[field.id];if(mappingKey){this.setNestedValue(formData,mappingKey,field.value||'');}});}// Process purchase order fields\nif(fieldArrays.purchaseOrderFields){fieldArrays.purchaseOrderFields.forEach(field=>{const mappingKey=this.mappingConfig.headerInfo[field.id];if(mappingKey){this.setNestedValue(formData,mappingKey,field.value||'');}});}// Process vendor fields\nif(fieldArrays.vendorFields){fieldArrays.vendorFields.forEach(field=>{const mappingKey=this.mappingConfig.vendor[field.id];if(mappingKey){this.setNestedValue(formData,mappingKey,field.value||'');}});}// Process ship-to fields\nif(fieldArrays.shipToFields){fieldArrays.shipToFields.forEach(field=>{const mappingKey=this.mappingConfig.shipTo[field.id];if(mappingKey){this.setNestedValue(formData,mappingKey,field.value||'');}});}// Process line items if provided\nif(fieldArrays.lineItems){formData.lineItems=fieldArrays.lineItems.map(item=>({itemNumber:item.itemNumber||'',description:item.description||'',quantity:this.parseNumber(item.quantity,0),unitPrice:this.parseNumber(item.unitPrice,0),total:this.parseNumber(item.total,0)}));}// Process other fields\nif(fieldArrays.comments){formData.comments=fieldArrays.comments;}if(fieldArrays.contactInfo){formData.contactInfo=fieldArrays.contactInfo;}return formData;}/**\n   * Collect form data from DOM elements using dynamic ID strategies\n   */collectFromDOM(){const formData=this.getEmptyFormData();// Collect company information\nObject.entries(this.mappingConfig.companyInfo).forEach(_ref=>{let[fieldId,dataPath]=_ref;const value=this.getValueFromDOMWithDynamicId(fieldId,'company');if(value){this.setNestedValue(formData,dataPath,value);}});// Collect header information\nObject.entries(this.mappingConfig.headerInfo).forEach(_ref2=>{let[fieldId,dataPath]=_ref2;const value=this.getValueFromDOMWithDynamicId(fieldId,'purchase-order');if(value){this.setNestedValue(formData,dataPath,value);}});// Collect vendor information\nObject.entries(this.mappingConfig.vendor).forEach(_ref3=>{let[fieldId,dataPath]=_ref3;const value=this.getValueFromDOMWithDynamicId(fieldId,'vendor');if(value){this.setNestedValue(formData,dataPath,value);}});// Collect ship-to information\nObject.entries(this.mappingConfig.shipTo).forEach(_ref4=>{let[fieldId,dataPath]=_ref4;const value=this.getValueFromDOMWithDynamicId(fieldId,'ship-to');if(value){this.setNestedValue(formData,dataPath,value);}});// Collect shipping details\nObject.entries(this.mappingConfig.shippingDetails).forEach(_ref5=>{let[fieldId,dataPath]=_ref5;const value=this.getShippingDetailFromDOM(fieldId);if(value){this.setNestedValue(formData,dataPath,value);}});// Collect line items\nformData.lineItems=this.collectLineItemsFromDOM();// Collect totals\nObject.entries(this.mappingConfig.totals).forEach(_ref6=>{let[fieldId,dataPath]=_ref6;const value=this.getTotalFromDOM(fieldId);if(value!==null){this.setNestedValue(formData,dataPath,this.parseNumber(value,0));}});// Collect comments and contact info\nformData.comments=this.getCommentsFromDOM();formData.contactInfo=this.getContactInfoFromDOM();return formData;}/**\n   * Get value from DOM using dynamic ID strategies\n   */getValueFromDOMWithDynamicId(staticId,section){const possibleIds=dynamicIdUtils.getPossibleIds(staticId,section);// Try each possible ID\nfor(const id of possibleIds){const element=document.getElementById(id);if(element){return this.getElementValue(element);}}// Try CSS selectors as fallback\nconst selectors=[\"[data-field=\\\"\".concat(staticId,\"\\\"]\"),\".\".concat(staticId,\"-field\"),\".field-\".concat(staticId),\"[data-field-type=\\\"\".concat(staticId,\"\\\"]\")];for(const selector of selectors){const element=document.querySelector(selector);if(element){return this.getElementValue(element);}}return'';}/**\n   * Get shipping detail value from DOM\n   */getShippingDetailFromDOM(fieldType){const selectors=[\".shipping-field-\".concat(fieldType,\" .editable-field\"),\".shipping-field[data-field=\\\"\".concat(fieldType,\"\\\"] .editable-field\"),\"[data-shipping-field=\\\"\".concat(fieldType,\"\\\"]\"),\"#shipping-\".concat(fieldType)];for(const selector of selectors){const element=document.querySelector(selector);if(element){return this.getElementValue(element);}}return'';}/**\n   * Collect line items from DOM\n   */collectLineItemsFromDOM(){const lineItems=[];const maxRows=5;// Standard number of rows\nfor(let i=0;i<maxRows;i++){const item={itemNumber:this.getLineItemFieldFromDOM(i,'itemNumber'),description:this.getLineItemFieldFromDOM(i,'description'),quantity:this.parseNumber(this.getLineItemFieldFromDOM(i,'quantity'),0),unitPrice:this.parseNumber(this.getLineItemFieldFromDOM(i,'unitPrice'),0),total:this.parseNumber(this.getLineItemFieldFromDOM(i,'total'),0)};// Only add non-empty items\nif(item.itemNumber||item.description||item.quantity||item.unitPrice){lineItems.push(item);}}return lineItems;}/**\n   * Get line item field value from DOM\n   */getLineItemFieldFromDOM(rowIndex,fieldType){// Map internal names -> live DOM column ids\nconst colId={quantity:'qty',unitPrice:'rate',total:'amount'}[fieldType]||fieldType;// itemNumber, description pass through\nconst selectors=[\"#line-item-\".concat(rowIndex,\"-\").concat(fieldType),\".line-item-row[data-row=\\\"\".concat(rowIndex,\"\\\"] .\").concat(colId,\"-field .editable-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") .\").concat(colId,\"-field .editable-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") td[data-field=\\\"\").concat(colId,\"\\\"] .editable-field\"),// Current table uses data-column\n\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") td[data-column=\\\"\").concat(colId,\"\\\"] .editable-field\")];for(const selector of selectors){const element=document.querySelector(selector);if(element){return this.getElementValue(element);}}return'';}/**\n   * Get total field value from DOM\n   */getTotalFromDOM(fieldType){const selectors=[\"#total-\".concat(fieldType),\".total-\".concat(fieldType,\" .editable-field\"),\".total-row[data-field=\\\"\".concat(fieldType,\"\\\"] .editable-field\"),\".totals-section .\".concat(fieldType,\"-field .editable-field\")];for(const selector of selectors){const element=document.querySelector(selector);if(element){return this.getElementValue(element);}}return null;}/**\n   * Get comments from DOM\n   */getCommentsFromDOM(){const selectors=['#comments-field','.comments-content .editable-field','.comments-section .editable-field','[data-field=\"comments\"]'];for(const selector of selectors){const element=document.querySelector(selector);if(element){return this.getElementValue(element);}}return'';}/**\n   * Get contact info from DOM\n   */getContactInfoFromDOM(){const selectors=['#contact-info-field','.contact-section .editable-field','.contact-info .editable-field','[data-field=\"contactInfo\"]'];for(const selector of selectors){const element=document.querySelector(selector);if(element){return this.getElementValue(element);}}return'';}/**\n   * Get value from DOM element (handles different element types)\n   */getElementValue(element){var _element$textContent2;if(!element)return'';// Handle different input types\nif(element.tagName==='INPUT'||element.tagName==='TEXTAREA'){return element.value||'';}// Handle contentEditable elements\nif(element.contentEditable==='true'||element.hasAttribute('contenteditable')){var _element$textContent;return((_element$textContent=element.textContent)===null||_element$textContent===void 0?void 0:_element$textContent.trim())||'';}// Handle regular text content\nreturn((_element$textContent2=element.textContent)===null||_element$textContent2===void 0?void 0:_element$textContent2.trim())||'';}/**\n   * Set nested object value using dot notation (e.g., \"companyInfo.name\")\n   */setNestedValue(obj,path,value){const keys=path.split('.');const lastKey=keys.pop();const target=keys.reduce((o,k)=>o[k]=o[k]||{},obj);target[lastKey]=value;}/**\n   * Get nested object value using dot notation\n   */getNestedValue(obj,path){return path.split('.').reduce((o,k)=>o?o[k]:undefined,obj);}/**\n   * Parse number with fallback\n   */parseNumber(value){let fallback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(typeof value==='number')return value;if(typeof value==='string'){// Remove currency symbols and commas\nconst cleaned=value.replace(/[$,]/g,'');const parsed=parseFloat(cleaned);return isNaN(parsed)?fallback:parsed;}return fallback;}/**\n   * Validate form data structure\n   */validateFormData(formData){const errors=[];// Required field validation\nconst requiredFields={'companyInfo.name':'Company Name','headerInfo.date':'Purchase Order Date','headerInfo.poNumber':'PO Number'};Object.entries(requiredFields).forEach(_ref7=>{let[path,label]=_ref7;const value=this.getNestedValue(formData,path);if(!value||value.trim()===''){errors.push(\"\".concat(label,\" is required\"));}});// Number validation for totals\nconst numberFields=['totals.subtotal','totals.tax','totals.shipping','totals.other','totals.total'];numberFields.forEach(path=>{const value=this.getNestedValue(formData,path);if(value!==null&&value!==undefined&&isNaN(Number(value))){errors.push(\"\".concat(path.split('.').pop(),\" must be a valid number\"));}});// Line items validation\nif(formData.lineItems&&formData.lineItems.length>0){formData.lineItems.forEach((item,index)=>{if(item.quantity<0){errors.push(\"Line item \".concat(index+1,\" quantity cannot be negative\"));}if(item.unitPrice<0){errors.push(\"Line item \".concat(index+1,\" unit price cannot be negative\"));}});}return{isValid:errors.length===0,errors};}/**\n   * Calculate totals from line items\n   */calculateTotals(formData){if(!formData.lineItems||formData.lineItems.length===0){return formData;}// Calculate subtotal\nconst subtotal=formData.lineItems.reduce((sum,item)=>{return sum+item.quantity*item.unitPrice;},0);formData.totals.subtotal=subtotal;// Calculate total\nformData.totals.total=subtotal+(formData.totals.tax||0)+(formData.totals.shipping||0)+(formData.totals.other||0);// Update line item totals\nformData.lineItems.forEach(item=>{item.total=item.quantity*item.unitPrice;});return formData;}/**\n   * Format form data for XML generation\n   */formatForXMLGeneration(formData){// Ensure all required fields have values\nconst formattedData=_objectSpread(_objectSpread({},formData),{},{companyFields:this.convertToFieldArray(formData.companyInfo,'company'),purchaseOrderFields:this.convertToFieldArray(formData.headerInfo,'po'),vendorFields:this.convertToFieldArray(formData.vendor,'vendor'),shipToFields:this.convertToFieldArray(formData.shipTo,'ship-to')});return formattedData;}/**\n   * Convert object to field array format (for compatibility with existing template)\n   */convertToFieldArray(dataObj,prefix){const fieldArray=[];const reverseMapping=this.getReverseMapping(prefix);Object.entries(dataObj).forEach(_ref8=>{let[key,value]=_ref8;const fieldId=reverseMapping[key];if(fieldId){fieldArray.push({id:fieldId,value:value,label:fieldMappingUtils.getFieldName(fieldId)});}});return fieldArray;}/**\n   * Get reverse mapping for converting data back to field IDs\n   */getReverseMapping(section){const mappings={company:{name:'company-name',address:'company-address',cityStateZip:'company-city-state',phone:'company-phone',fax:'company-fax',website:'company-website'},po:{title:'po-title',date:'po-date',poNumber:'po-number'},vendor:{company:'vendor-company',contact:'vendor-contact',address:'vendor-address',cityStateZip:'vendor-city-state',phone:'vendor-phone',fax:'vendor-fax'},'ship-to':{name:'ship-to-name',company:'ship-to-company',address:'ship-to-address',cityStateZip:'ship-to-city-state',phone:'ship-to-phone',fax:'ship-to-fax'}};return mappings[section]||{};}}// Export convenience functions\nexport const formDataMapper=new FormDataMapper();/**\n * Quick function to collect form data from React field arrays\n */export const collectFormDataFromReact=fieldArrays=>{return formDataMapper.collectFromReactFieldArrays(fieldArrays);};/**\n * Quick function to collect form data from DOM\n */export const collectFormDataFromDOM=()=>{return formDataMapper.collectFromDOM();};/**\n * Quick function to validate form data\n */export const validateFormData=formData=>{return formDataMapper.validateFormData(formData);};/**\n * Quick function to calculate totals\n */export const calculateTotals=formData=>{return formDataMapper.calculateTotals(formData);};/**\n * Complete form data processing pipeline\n */export const processFormData=function(source){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let formData;// Collect data based on source type\nif(typeof source==='object'&&source.companyFields){// React field arrays format\nformData=collectFormDataFromReact(source);// PRESERVE sectionOrder data for dynamic XML generation\nif(source.sectionOrder){formData.sectionOrder=source.sectionOrder;}}else if(typeof source==='object'){// Already structured form data\nformData=source;}else{// Collect from DOM\nformData=collectFormDataFromDOM();}// Calculate totals if requested\nif(options.calculateTotals!==false){formData=calculateTotals(formData);}// Validate if requested\nif(options.validate!==false){const validation=validateFormData(formData);if(!validation.isValid&&options.throwOnValidationError){throw new Error(\"Form validation failed: \".concat(validation.errors.join(', ')));}formData._validation=validation;}// Format for XML generation if requested\nif(options.formatForXML){formData=formDataMapper.formatForXMLGeneration(formData);}return formData;};","map":{"version":3,"names":["dynamicIdUtils","fieldMappingUtils","FormDataMapper","constructor","formData","getEmptyFormData","mappingConfig","getDefaultMappingConfig","companyInfo","name","address","cityStateZip","phone","fax","website","headerInfo","title","date","poNumber","vendor","company","contact","shipTo","shippingDetails","requisitioner","shipVia","fob","shippingTerms","lineItems","totals","subtotal","tax","shipping","other","total","comments","contactInfo","collectFromReactFieldArrays","fieldArrays","companyFields","forEach","field","mappingKey","id","setNestedValue","value","purchaseOrderFields","vendorFields","shipToFields","map","item","itemNumber","description","quantity","parseNumber","unitPrice","collectFromDOM","Object","entries","_ref","fieldId","dataPath","getValueFromDOMWithDynamicId","_ref2","_ref3","_ref4","_ref5","getShippingDetailFromDOM","collectLineItemsFromDOM","_ref6","getTotalFromDOM","getCommentsFromDOM","getContactInfoFromDOM","staticId","section","possibleIds","getPossibleIds","element","document","getElementById","getElementValue","selectors","concat","selector","querySelector","fieldType","maxRows","i","getLineItemFieldFromDOM","push","rowIndex","colId","_element$textContent2","tagName","contentEditable","hasAttribute","_element$textContent","textContent","trim","obj","path","keys","split","lastKey","pop","target","reduce","o","k","getNestedValue","undefined","fallback","arguments","length","cleaned","replace","parsed","parseFloat","isNaN","validateFormData","errors","requiredFields","_ref7","label","numberFields","Number","index","isValid","calculateTotals","sum","formatForXMLGeneration","formattedData","_objectSpread","convertToFieldArray","dataObj","prefix","fieldArray","reverseMapping","getReverseMapping","_ref8","key","getFieldName","mappings","po","formDataMapper","collectFormDataFromReact","collectFormDataFromDOM","processFormData","source","options","sectionOrder","validate","validation","throwOnValidationError","Error","join","_validation","formatForXML"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/FormDataMapper.js"],"sourcesContent":["// Form Data Mapping Utilities for Purchase Order Template\n// This module provides comprehensive mapping between React form data and XML generation\n\nimport { dynamicIdUtils, fieldMappingUtils } from './PurchaseOrderTemplate';\n\n/**\n * Form Data Collection Utility\n * Collects form data from various sources (React state, DOM, etc.) into a structured format\n */\nexport class FormDataMapper {\n  constructor() {\n    this.formData = this.getEmptyFormData();\n    this.mappingConfig = this.getDefaultMappingConfig();\n  }\n\n  /**\n   * Get empty form data structure\n   */\n  getEmptyFormData() {\n    return {\n      companyInfo: {\n        name: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: '',\n        website: ''\n      },\n      headerInfo: {\n        title: 'PURCHASE ORDER',\n        date: '',\n        poNumber: ''\n      },\n      vendor: {\n        company: '',\n        contact: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: ''\n      },\n      shipTo: {\n        name: '',\n        company: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: ''\n      },\n      shippingDetails: {\n        requisitioner: '',\n        shipVia: '',\n        fob: '',\n        shippingTerms: ''\n      },\n      lineItems: [],\n      totals: {\n        subtotal: 0,\n        tax: 0,\n        shipping: 0,\n        other: 0,\n        total: 0\n      },\n      comments: '',\n      contactInfo: ''\n    };\n  }\n\n  /**\n   * Default mapping configuration between form fields and data structure\n   */\n  getDefaultMappingConfig() {\n    return {\n      // Company Information mappings\n      companyInfo: {\n        'company-name': 'companyInfo.name',\n        'company-address': 'companyInfo.address',\n        'company-city-state': 'companyInfo.cityStateZip',\n        'company-phone': 'companyInfo.phone',\n        'company-fax': 'companyInfo.fax',\n        'company-website': 'companyInfo.website'\n      },\n      \n      // Purchase Order Header mappings\n      headerInfo: {\n        'po-title': 'headerInfo.title',\n        'po-date': 'headerInfo.date',\n        'po-number': 'headerInfo.poNumber'\n      },\n      \n      // Vendor Information mappings\n      vendor: {\n        'vendor-company': 'vendor.company',\n        'vendor-contact': 'vendor.contact',\n        'vendor-address': 'vendor.address',\n        'vendor-city-state': 'vendor.cityStateZip',\n        'vendor-phone': 'vendor.phone',\n        'vendor-fax': 'vendor.fax'\n      },\n      \n      // Ship To Information mappings\n      shipTo: {\n        'ship-to-name': 'shipTo.name',\n        'ship-to-company': 'shipTo.company',\n        'ship-to-address': 'shipTo.address',\n        'ship-to-city-state': 'shipTo.cityStateZip',\n        'ship-to-phone': 'shipTo.phone',\n        'ship-to-fax': 'shipTo.fax'\n      },\n      \n      // Shipping Details mappings\n      shippingDetails: {\n        'requisitioner': 'shippingDetails.requisitioner',\n        'shipVia': 'shippingDetails.shipVia',\n        'fob': 'shippingDetails.fob',\n        'shippingTerms': 'shippingDetails.shippingTerms'\n      },\n      \n      // Line Items mappings (handled separately due to array structure)\n      lineItems: {\n        'itemNumber': 'itemNumber',\n        'description': 'description',\n        'quantity': 'quantity',\n        'unitPrice': 'unitPrice',\n        'total': 'total'\n      },\n      \n      // Totals mappings\n      totals: {\n        'subtotal': 'totals.subtotal',\n        'tax': 'totals.tax',\n        'shipping': 'totals.shipping',\n        'other': 'totals.other',\n        'total': 'totals.total'\n      },\n      \n      // Other fields\n      other: {\n        'comments': 'comments',\n        'contactInfo': 'contactInfo'\n      }\n    };\n  }\n\n  /**\n   * Collect form data from React component fields arrays\n   * This works with the existing PurchaseOrderForm.jsx structure\n   */\n  collectFromReactFieldArrays(fieldArrays) {\n    const formData = this.getEmptyFormData();\n    \n    // Process company fields\n    if (fieldArrays.companyFields) {\n      fieldArrays.companyFields.forEach(field => {\n        const mappingKey = this.mappingConfig.companyInfo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process purchase order fields\n    if (fieldArrays.purchaseOrderFields) {\n      fieldArrays.purchaseOrderFields.forEach(field => {\n        const mappingKey = this.mappingConfig.headerInfo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process vendor fields\n    if (fieldArrays.vendorFields) {\n      fieldArrays.vendorFields.forEach(field => {\n        const mappingKey = this.mappingConfig.vendor[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process ship-to fields\n    if (fieldArrays.shipToFields) {\n      fieldArrays.shipToFields.forEach(field => {\n        const mappingKey = this.mappingConfig.shipTo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process line items if provided\n    if (fieldArrays.lineItems) {\n      formData.lineItems = fieldArrays.lineItems.map(item => ({\n        itemNumber: item.itemNumber || '',\n        description: item.description || '',\n        quantity: this.parseNumber(item.quantity, 0),\n        unitPrice: this.parseNumber(item.unitPrice, 0),\n        total: this.parseNumber(item.total, 0)\n      }));\n    }\n    \n    // Process other fields\n    if (fieldArrays.comments) {\n      formData.comments = fieldArrays.comments;\n    }\n    if (fieldArrays.contactInfo) {\n      formData.contactInfo = fieldArrays.contactInfo;\n    }\n    \n    return formData;\n  }\n\n  /**\n   * Collect form data from DOM elements using dynamic ID strategies\n   */\n  collectFromDOM() {\n    const formData = this.getEmptyFormData();\n    \n    // Collect company information\n    Object.entries(this.mappingConfig.companyInfo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'company');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect header information\n    Object.entries(this.mappingConfig.headerInfo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'purchase-order');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect vendor information\n    Object.entries(this.mappingConfig.vendor).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'vendor');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect ship-to information\n    Object.entries(this.mappingConfig.shipTo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'ship-to');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect shipping details\n    Object.entries(this.mappingConfig.shippingDetails).forEach(([fieldId, dataPath]) => {\n      const value = this.getShippingDetailFromDOM(fieldId);\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect line items\n    formData.lineItems = this.collectLineItemsFromDOM();\n    \n    // Collect totals\n    Object.entries(this.mappingConfig.totals).forEach(([fieldId, dataPath]) => {\n      const value = this.getTotalFromDOM(fieldId);\n      if (value !== null) {\n        this.setNestedValue(formData, dataPath, this.parseNumber(value, 0));\n      }\n    });\n    \n    // Collect comments and contact info\n    formData.comments = this.getCommentsFromDOM();\n    formData.contactInfo = this.getContactInfoFromDOM();\n    \n    return formData;\n  }\n\n  /**\n   * Get value from DOM using dynamic ID strategies\n   */\n  getValueFromDOMWithDynamicId(staticId, section) {\n    const possibleIds = dynamicIdUtils.getPossibleIds(staticId, section);\n    \n    // Try each possible ID\n    for (const id of possibleIds) {\n      const element = document.getElementById(id);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    // Try CSS selectors as fallback\n    const selectors = [\n      `[data-field=\"${staticId}\"]`,\n      `.${staticId}-field`,\n      `.field-${staticId}`,\n      `[data-field-type=\"${staticId}\"]`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get shipping detail value from DOM\n   */\n  getShippingDetailFromDOM(fieldType) {\n    const selectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `[data-shipping-field=\"${fieldType}\"]`,\n      `#shipping-${fieldType}`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Collect line items from DOM\n   */\n  collectLineItemsFromDOM() {\n    const lineItems = [];\n    const maxRows = 5; // Standard number of rows\n    \n    for (let i = 0; i < maxRows; i++) {\n      const item = {\n        itemNumber: this.getLineItemFieldFromDOM(i, 'itemNumber'),\n        description: this.getLineItemFieldFromDOM(i, 'description'),\n        quantity: this.parseNumber(this.getLineItemFieldFromDOM(i, 'quantity'), 0),\n        unitPrice: this.parseNumber(this.getLineItemFieldFromDOM(i, 'unitPrice'), 0),\n        total: this.parseNumber(this.getLineItemFieldFromDOM(i, 'total'), 0)\n      };\n      \n      // Only add non-empty items\n      if (item.itemNumber || item.description || item.quantity || item.unitPrice) {\n        lineItems.push(item);\n      }\n    }\n    \n    return lineItems;\n  }\n\n  /**\n   * Get line item field value from DOM\n   */\n  getLineItemFieldFromDOM(rowIndex, fieldType) {\n    // Map internal names -> live DOM column ids\n    const colId = ({\n      quantity: 'qty',\n      unitPrice: 'rate',\n      total: 'amount'\n    })[fieldType] || fieldType; // itemNumber, description pass through\n\n    const selectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${colId}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${colId}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-field=\"${colId}\"] .editable-field`,\n      // Current table uses data-column\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-column=\"${colId}\"] .editable-field`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get total field value from DOM\n   */\n  getTotalFromDOM(fieldType) {\n    const selectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Get comments from DOM\n   */\n  getCommentsFromDOM() {\n    const selectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get contact info from DOM\n   */\n  getContactInfoFromDOM() {\n    const selectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get value from DOM element (handles different element types)\n   */\n  getElementValue(element) {\n    if (!element) return '';\n    \n    // Handle different input types\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      return element.value || '';\n    }\n    \n    // Handle contentEditable elements\n    if (element.contentEditable === 'true' || element.hasAttribute('contenteditable')) {\n      return element.textContent?.trim() || '';\n    }\n    \n    // Handle regular text content\n    return element.textContent?.trim() || '';\n  }\n\n  /**\n   * Set nested object value using dot notation (e.g., \"companyInfo.name\")\n   */\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    const lastKey = keys.pop();\n    const target = keys.reduce((o, k) => (o[k] = o[k] || {}), obj);\n    target[lastKey] = value;\n  }\n\n  /**\n   * Get nested object value using dot notation\n   */\n  getNestedValue(obj, path) {\n    return path.split('.').reduce((o, k) => (o ? o[k] : undefined), obj);\n  }\n\n  /**\n   * Parse number with fallback\n   */\n  parseNumber(value, fallback = 0) {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      // Remove currency symbols and commas\n      const cleaned = value.replace(/[$,]/g, '');\n      const parsed = parseFloat(cleaned);\n      return isNaN(parsed) ? fallback : parsed;\n    }\n    return fallback;\n  }\n\n  /**\n   * Validate form data structure\n   */\n  validateFormData(formData) {\n    const errors = [];\n    \n    // Required field validation\n    const requiredFields = {\n      'companyInfo.name': 'Company Name',\n      'headerInfo.date': 'Purchase Order Date',\n      'headerInfo.poNumber': 'PO Number'\n    };\n    \n    Object.entries(requiredFields).forEach(([path, label]) => {\n      const value = this.getNestedValue(formData, path);\n      if (!value || value.trim() === '') {\n        errors.push(`${label} is required`);\n      }\n    });\n    \n    // Number validation for totals\n    const numberFields = ['totals.subtotal', 'totals.tax', 'totals.shipping', 'totals.other', 'totals.total'];\n    numberFields.forEach(path => {\n      const value = this.getNestedValue(formData, path);\n      if (value !== null && value !== undefined && isNaN(Number(value))) {\n        errors.push(`${path.split('.').pop()} must be a valid number`);\n      }\n    });\n    \n    // Line items validation\n    if (formData.lineItems && formData.lineItems.length > 0) {\n      formData.lineItems.forEach((item, index) => {\n        if (item.quantity < 0) {\n          errors.push(`Line item ${index + 1} quantity cannot be negative`);\n        }\n        if (item.unitPrice < 0) {\n          errors.push(`Line item ${index + 1} unit price cannot be negative`);\n        }\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Calculate totals from line items\n   */\n  calculateTotals(formData) {\n    if (!formData.lineItems || formData.lineItems.length === 0) {\n      return formData;\n    }\n    \n    // Calculate subtotal\n    const subtotal = formData.lineItems.reduce((sum, item) => {\n      return sum + (item.quantity * item.unitPrice);\n    }, 0);\n    \n    formData.totals.subtotal = subtotal;\n    \n    // Calculate total\n    formData.totals.total = subtotal + \n      (formData.totals.tax || 0) + \n      (formData.totals.shipping || 0) + \n      (formData.totals.other || 0);\n    \n    // Update line item totals\n    formData.lineItems.forEach(item => {\n      item.total = item.quantity * item.unitPrice;\n    });\n    \n    return formData;\n  }\n\n  /**\n   * Format form data for XML generation\n   */\n  formatForXMLGeneration(formData) {\n    // Ensure all required fields have values\n    const formattedData = {\n      ...formData,\n      companyFields: this.convertToFieldArray(formData.companyInfo, 'company'),\n      purchaseOrderFields: this.convertToFieldArray(formData.headerInfo, 'po'),\n      vendorFields: this.convertToFieldArray(formData.vendor, 'vendor'),\n      shipToFields: this.convertToFieldArray(formData.shipTo, 'ship-to')\n    };\n    \n    return formattedData;\n  }\n\n  /**\n   * Convert object to field array format (for compatibility with existing template)\n   */\n  convertToFieldArray(dataObj, prefix) {\n    const fieldArray = [];\n    const reverseMapping = this.getReverseMapping(prefix);\n    \n    Object.entries(dataObj).forEach(([key, value]) => {\n      const fieldId = reverseMapping[key];\n      if (fieldId) {\n        fieldArray.push({\n          id: fieldId,\n          value: value,\n          label: fieldMappingUtils.getFieldName(fieldId)\n        });\n      }\n    });\n    \n    return fieldArray;\n  }\n\n  /**\n   * Get reverse mapping for converting data back to field IDs\n   */\n  getReverseMapping(section) {\n    const mappings = {\n      company: {\n        name: 'company-name',\n        address: 'company-address',\n        cityStateZip: 'company-city-state',\n        phone: 'company-phone',\n        fax: 'company-fax',\n        website: 'company-website'\n      },\n      po: {\n        title: 'po-title',\n        date: 'po-date',\n        poNumber: 'po-number'\n      },\n      vendor: {\n        company: 'vendor-company',\n        contact: 'vendor-contact',\n        address: 'vendor-address',\n        cityStateZip: 'vendor-city-state',\n        phone: 'vendor-phone',\n        fax: 'vendor-fax'\n      },\n      'ship-to': {\n        name: 'ship-to-name',\n        company: 'ship-to-company',\n        address: 'ship-to-address',\n        cityStateZip: 'ship-to-city-state',\n        phone: 'ship-to-phone',\n        fax: 'ship-to-fax'\n      }\n    };\n    \n    return mappings[section] || {};\n  }\n}\n\n// Export convenience functions\nexport const formDataMapper = new FormDataMapper();\n\n/**\n * Quick function to collect form data from React field arrays\n */\nexport const collectFormDataFromReact = (fieldArrays) => {\n  return formDataMapper.collectFromReactFieldArrays(fieldArrays);\n};\n\n/**\n * Quick function to collect form data from DOM\n */\nexport const collectFormDataFromDOM = () => {\n  return formDataMapper.collectFromDOM();\n};\n\n/**\n * Quick function to validate form data\n */\nexport const validateFormData = (formData) => {\n  return formDataMapper.validateFormData(formData);\n};\n\n/**\n * Quick function to calculate totals\n */\nexport const calculateTotals = (formData) => {\n  return formDataMapper.calculateTotals(formData);\n};\n\n/**\n * Complete form data processing pipeline\n */\nexport const processFormData = (source, options = {}) => {\n  let formData;\n  \n  // Collect data based on source type\n  if (typeof source === 'object' && source.companyFields) {\n    // React field arrays format\n    formData = collectFormDataFromReact(source);\n    \n    // PRESERVE sectionOrder data for dynamic XML generation\n    if (source.sectionOrder) {\n      formData.sectionOrder = source.sectionOrder;\n    }\n  } else if (typeof source === 'object') {\n    // Already structured form data\n    formData = source;\n  } else {\n    // Collect from DOM\n    formData = collectFormDataFromDOM();\n  }\n  \n  // Calculate totals if requested\n  if (options.calculateTotals !== false) {\n    formData = calculateTotals(formData);\n  }\n  \n  // Validate if requested\n  if (options.validate !== false) {\n    const validation = validateFormData(formData);\n    if (!validation.isValid && options.throwOnValidationError) {\n      throw new Error(`Form validation failed: ${validation.errors.join(', ')}`);\n    }\n    formData._validation = validation;\n  }\n  \n  // Format for XML generation if requested\n  if (options.formatForXML) {\n    formData = formDataMapper.formatForXMLGeneration(formData);\n  }\n  \n  return formData;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}