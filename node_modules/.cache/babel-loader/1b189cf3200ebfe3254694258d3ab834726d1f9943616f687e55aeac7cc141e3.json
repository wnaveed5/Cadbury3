{"ast":null,"code":"// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\nimport { processFormData } from './FormDataMapper';\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData, options = {}) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('📅 Template updated at:', new Date().toISOString());\n  console.log('📊 Raw form data received:', formData);\n\n  // Process and validate form data using the FormDataMapper\n  let processedData;\n  try {\n    processedData = processFormData(formData, {\n      calculateTotals: options.calculateTotals !== false,\n      validate: options.validate !== false,\n      formatForXML: true,\n      throwOnValidationError: options.throwOnValidationError || false\n    });\n    console.log('📊 Processed form data:', processedData);\n  } catch (error) {\n    console.error('❌ Form data processing failed:', error);\n    if (options.throwOnValidationError) {\n      throw error;\n    }\n    // Fallback to using raw data\n    processedData = formData || {};\n  }\n\n  // Use processed data for XML generation, fallback to original data\n  const data = processedData || formData || {};\n\n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n\n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [staticId, `company-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [staticId, `po-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [staticId, `vendor-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [staticId, `ship-to-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalsFieldValue = (staticId, defaultValue = '') => {\n    if (data.totalsFields && Array.isArray(data.totalsFields)) {\n      const possibleIds = [staticId, `totals-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.totalsFields.filter(f => f.id.includes(staticId)).map(f => f.id)];\n      return getDynamicFieldValue(data.totalsFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // ============================================================================\n  // MODULAR XML BUILDER FUNCTIONS\n  // ============================================================================\n\n  // Build Company Information XML with dynamic field ordering\n  const buildCompanyXML = () => {\n    // Get company fields from data, default to empty array if not provided\n    const companyFields = data.companyFields || [];\n    console.log('🔀 Building company XML with fields:', companyFields.map(f => ({\n      id: f.id,\n      label: f.label\n    })));\n\n    // Build rows dynamically based on current field order\n    const fieldRows = companyFields.map(field => {\n      const fieldValue = field.value || field.placeholder || '';\n      const isHeader = field.id === 'company-name';\n      if (isHeader) {\n        return `<td class=\"header-company\" style=\"text-align: left;\" data-field=\"${field.id}\">${fieldValue}</td>`;\n      } else {\n        // Handle special formatting for phone, fax, website\n        let displayText = fieldValue;\n        if (field.id === 'company-phone') displayText = `Phone: ${fieldValue}`;\n        if (field.id === 'company-fax') displayText = `Fax: ${fieldValue}`;\n        if (field.id === 'company-website') displayText = `Website: ${fieldValue}`;\n        return `<td style=\"text-align: left;\" data-field=\"${field.id}\">${displayText}</td>`;\n      }\n    }).join('</tr><tr>');\n    return `\n      <td style=\"width: 65%; padding-right: 20px;\" data-section=\"company-info\">\n        <table>\n          <tr>\n            ${fieldRows}\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Purchase Order Information XML\n  const buildPurchaseOrderXML = () => {\n    return `\n      <td style=\"width: 35%; padding-left: 20px;\" align=\"right\" data-section=\"purchase-order-info\">\n        <table>\n          <tr>\n            <td class=\"header-title\" style=\"text-align: right;\" data-field=\"po-title\">${getPOFieldValue('po-title', 'PURCHASE ORDER')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: right;\">\n              <table style=\"width: 100%;\">\n                <tr>\n                  <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                  <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${getPOFieldValue('po-date', 'MM/DD/YYYY')}</td>\n                </tr>\n                <tr>\n                  <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                  <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${getPOFieldValue('po-number', '[PO Number]')}</td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor-ShipTo Section XML with dynamic ordering\n  const buildVendorShipToSectionXML = () => {\n    var _data$sectionOrder, _data$sectionOrder2;\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = ((_data$sectionOrder = data.sectionOrder) === null || _data$sectionOrder === void 0 ? void 0 : _data$sectionOrder.sections3And4) || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building vendor-shipTo section with order:', {\n      leftSection,\n      rightSection\n    });\n    console.log('🔀 sections3And4 array:', (_data$sectionOrder2 = data.sectionOrder) === null || _data$sectionOrder2 === void 0 ? void 0 : _data$sectionOrder2.sections3And4);\n    let leftColumn, rightColumn;\n    if (leftSection === 'section3') {\n      // Default order: Vendor left, Ship To right\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n      console.log('🔀 Using default order: Vendor left, Ship To right');\n    } else {\n      // Swapped order: Ship To left, Vendor right\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n      console.log('🔀 Using swapped order: Ship To left, Vendor right');\n    }\n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\n  const buildShippingDetailsXML = () => {\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n          <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n          <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n          <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n          <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n          <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n          <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\n  const buildVendorShipToAndShippingDetailsXML = () => {\n    var _data$sectionOrder3, _data$sectionOrder4;\n    // Get section order from data, default to [sections3And4, sections5And6] if not provided\n    const sectionOrder = ((_data$sectionOrder3 = data.sectionOrder) === null || _data$sectionOrder3 === void 0 ? void 0 : _data$sectionOrder3.sections3And4And5And6) || ['sections3And4', 'sections5And6'];\n    const topSection = sectionOrder[0];\n    const bottomSection = sectionOrder[1];\n    console.log('🔀 Building vendor-shipTo + shipping details with order:', {\n      topSection,\n      bottomSection\n    });\n    console.log('🔀 sections3And4And5And6 array:', (_data$sectionOrder4 = data.sectionOrder) === null || _data$sectionOrder4 === void 0 ? void 0 : _data$sectionOrder4.sections3And4And5And6);\n    let topContent, bottomContent;\n    if (topSection === 'sections3And4') {\n      // Default order: Vendor-ShipTo on top, Shipping Details below\n      topContent = buildVendorShipToSectionXML();\n      bottomContent = buildShippingDetailsXML();\n      console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');\n    } else {\n      // Swapped order: Shipping Details on top, Vendor-ShipTo below\n      topContent = buildShippingDetailsXML();\n      bottomContent = buildVendorShipToSectionXML();\n      console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');\n    }\n    return `\n      ${topContent}\n      ${bottomContent}\n    `;\n  };\n\n  // Build Header Section XML (Company + Purchase Order) with dynamic ordering\n  const buildHeaderSectionXML = () => {\n    var _data$sectionOrder5, _data$sectionOrder6, _data$sectionOrder7, _data$sectionOrder8, _data$sectionOrder8$s, _data$sectionOrder9;\n    // Get section order from data, default to [section1, section2] if not provided\n    const sectionOrder = ((_data$sectionOrder5 = data.sectionOrder) === null || _data$sectionOrder5 === void 0 ? void 0 : _data$sectionOrder5.sections1And2) || ['section1', 'section2'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building header section with order:', {\n      leftSection,\n      rightSection\n    });\n    console.log('🔀 Full sectionOrder data:', data.sectionOrder);\n    console.log('🔀 Full data object keys:', Object.keys(data));\n    console.log('🔀 sections1And2 array:', (_data$sectionOrder6 = data.sectionOrder) === null || _data$sectionOrder6 === void 0 ? void 0 : _data$sectionOrder6.sections1And2);\n    console.log('🔀 sections1And2 type:', typeof ((_data$sectionOrder7 = data.sectionOrder) === null || _data$sectionOrder7 === void 0 ? void 0 : _data$sectionOrder7.sections1And2));\n    console.log('🔀 sections1And2 length:', (_data$sectionOrder8 = data.sectionOrder) === null || _data$sectionOrder8 === void 0 ? void 0 : (_data$sectionOrder8$s = _data$sectionOrder8.sections1And2) === null || _data$sectionOrder8$s === void 0 ? void 0 : _data$sectionOrder8$s.length);\n    console.log('🔀 sections1And2 values:', JSON.stringify((_data$sectionOrder9 = data.sectionOrder) === null || _data$sectionOrder9 === void 0 ? void 0 : _data$sectionOrder9.sections1And2));\n    let leftColumn, rightColumn;\n    if (leftSection === 'section1') {\n      leftColumn = buildCompanyXML();\n      rightColumn = buildPurchaseOrderXML();\n      console.log('🔀 Using default order: Company left, Purchase Order right');\n    } else {\n      leftColumn = buildPurchaseOrderXML();\n      rightColumn = buildCompanyXML();\n      console.log('🔀 Using swapped order: Purchase Order left, Company right');\n    }\n    return `\n      <table>\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor Information XML\n  const buildVendorXML = () => {\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"vendor\">\n        <table>\n          <tr>\n            <td class=\"section-header\">VENDOR</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <span data-field=\"vendor-company\">${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br/>\n              <span data-field=\"vendor-contact\">${getVendorFieldValue('vendor-contact', '[Contact Person]')}</span><br/>\n              <span data-field=\"vendor-address\">${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br/>\n              <span data-field=\"vendor-city-state\">${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br/>\n              Phone: <span data-field=\"vendor-phone\">${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br/>\n              Fax: <span data-field=\"vendor-fax\">${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Ship To Information XML\n  const buildShipToXML = () => {\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n        <table>\n          <tr>\n            <td class=\"section-header\">SHIP TO</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <span data-field=\"ship-to-name\">${getShipToFieldValue('ship-to-name', '[Contact Name]')}</span><br/>\n              <span data-field=\"ship-to-company\">${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br/>\n              <span data-field=\"ship-to-address\">${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br/>\n              <span data-field=\"ship-to-city-state\">${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br/>\n              Phone: <span data-field=\"ship-to-phone\">${getShipToFieldValue('ship-to-phone', '(000) 000-0000')}</span><br/>\n              Fax: <span data-field=\"ship-to-fax\">${getShipToFieldValue('ship-to-fax', '(000) 000-0000')}</span>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor/Ship-To Section XML with dynamic ordering\n  const buildVendorShipToXML = () => {\n    var _data$sectionOrder0;\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = ((_data$sectionOrder0 = data.sectionOrder) === null || _data$sectionOrder0 === void 0 ? void 0 : _data$sectionOrder0.sections3And4) || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building vendor/ship-to section with order:', {\n      leftSection,\n      rightSection\n    });\n    let leftColumn, rightColumn;\n    if (leftSection === 'section3') {\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n    } else {\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n    }\n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Line Items XML with dynamic column ordering\n  const buildLineItemsXML = () => {\n    var _data$sectionOrder1, _data$sectionOrder10;\n    // Get column order from data, default to standard order if not provided\n    const columnOrder = ((_data$sectionOrder1 = data.sectionOrder) === null || _data$sectionOrder1 === void 0 ? void 0 : _data$sectionOrder1.lineItemColumns) || ['itemNumber', 'description', 'qty', 'rate', 'amount'];\n    console.log('🔀 Building line items with column order:', columnOrder);\n    console.log('🔀 Line items data:', data.lineItems);\n    console.log('🔀 Column order from state:', (_data$sectionOrder10 = data.sectionOrder) === null || _data$sectionOrder10 === void 0 ? void 0 : _data$sectionOrder10.lineItemColumns);\n\n    // Column configuration mapping\n    const columnConfig = {\n      itemNumber: {\n        label: 'Item#',\n        colSpan: 3,\n        field: 'itemNumber'\n      },\n      description: {\n        label: 'Description',\n        colSpan: 12,\n        field: 'description'\n      },\n      qty: {\n        label: 'Qty',\n        colSpan: 2,\n        field: 'qty'\n      },\n      rate: {\n        label: 'Rate',\n        colSpan: 3,\n        field: 'rate'\n      },\n      amount: {\n        label: 'Amount',\n        colSpan: 3,\n        field: 'amount'\n      }\n    };\n\n    // Build header row\n    const headerRow = columnOrder.map(columnId => {\n      const config = columnConfig[columnId];\n      return `<td class=\"item-header\" colSpan=\"${config.colSpan}\">${config.label}</td>`;\n    }).join('');\n\n    // Build data rows using actual line item data\n    const lineItems = data.lineItems || [];\n    const dataRows = Array(5).fill(0).map((_, rowIndex) => {\n      const rowData = lineItems[rowIndex] || {};\n      const rowCells = columnOrder.map(columnId => {\n        const config = columnConfig[columnId];\n        const fieldValue = rowData[columnId] || '-';\n        return `<td colSpan=\"${config.colSpan}\">${fieldValue}</td>`;\n      }).join('');\n      return `<tr data-row-id=\"line-item-${rowIndex}\" data-row-index=\"${rowIndex}\">${rowCells}</tr>`;\n    }).join('');\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n          ${headerRow}\n        </tr>\n        ${dataRows}\n      </table>\n    `;\n  };\n\n  // Build Comments Section XML\n  const buildCommentsXML = () => {\n    const comments = getFieldValue('comments', '[Enter comments or special instructions...]');\n    return `\n      <td style=\"width: 50%;\" data-section=\"comments\">\n        <table>\n          <tr>\n            <td class=\"comments-header\">Comments or Special Instructions</td>\n          </tr>\n          <tr>\n            <td class=\"comments-content\">${comments}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Totals Section XML\n  const buildTotalsXML = () => {\n    const subtotal = getTotalsFieldValue('subtotal', '$0.00');\n    const tax = getTotalsFieldValue('tax', '$0.00');\n    const shipping = getTotalsFieldValue('shipping', '$0.00');\n    const other = getTotalsFieldValue('other', '$0.00');\n    const total = getTotalsFieldValue('total', '$0.00');\n    return `\n      <td style=\"width: 50%;\" data-section=\"totals\">\n        <table>\n          <tr>\n            <td class=\"section-header\">Totals</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <div>SUBTOTAL: ${subtotal}</div>\n              <div>TAX: ${tax}</div>\n              <div>SHIPPING: ${shipping}</div>\n              <div>OTHER: ${other}</div>\n              <div class=\"total-final\">TOTAL: ${total}</div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Comments and Totals Section XML with dynamic ordering\n  const buildCommentsTotalsXML = () => {\n    var _data$sectionOrder11;\n    // Get section order from data, default to [section8, section9] if not provided\n    const sectionOrder = ((_data$sectionOrder11 = data.sectionOrder) === null || _data$sectionOrder11 === void 0 ? void 0 : _data$sectionOrder11.sections8And9) || ['section8', 'section9'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building comments/totals section with order:', {\n      leftSection,\n      rightSection\n    });\n    let leftColumn, rightColumn;\n    if (leftSection === 'section8') {\n      leftColumn = buildCommentsXML();\n      rightColumn = buildTotalsXML();\n    } else {\n      leftColumn = buildTotalsXML();\n      rightColumn = buildCommentsXML();\n    }\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [`.shipping-field-${fieldType} .editable-field`, `.shipping-field[data-field=\"${fieldType}\"] .editable-field`, `.shipping-${fieldType} .editable-field`, `#shipping-${fieldType}`, `[data-shipping-field=\"${fieldType}\"]`];\n\n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    const possibleSelectors = [`#line-item-${rowIndex}-${fieldType}`, `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`];\n\n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = fieldType => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [`#total-${fieldType}`, `.total-${fieldType} .editable-field`, `.total-row[data-field=\"${fieldType}\"] .editable-field`, `.totals-section .${fieldType}-field .editable-field`];\n\n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = ['#comments-field', '.comments-content .editable-field', '.comments-section .editable-field', '[data-field=\"comments\"]'];\n\n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = ['#contact-info-field', '.contact-section .editable-field', '.contact-info .editable-field', '[data-field=\"contactInfo\"]'];\n\n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n\n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    ${buildHeaderSectionXML()}\n    ${buildVendorShipToAndShippingDetailsXML()}\n\n\n    ${buildLineItemsXML()}\n\n\n    ${buildCommentsTotalsXML()}\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n  console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');\n  console.log('📄 XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    staticFields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website'],\n    dynamicPrefixes: ['company-field-', 'company-'],\n    dataAttribute: 'data-section=\"company-info\"'\n  },\n  purchaseOrder: {\n    staticFields: ['po-title', 'po-date', 'po-number'],\n    dynamicPrefixes: ['po-field-', 'po-'],\n    dataAttribute: 'data-section=\"purchase-order-info\"'\n  },\n  vendor: {\n    staticFields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax'],\n    dynamicPrefixes: ['vendor-field-', 'vendor-'],\n    dataAttribute: 'data-subsection=\"vendor\"'\n  },\n  shipTo: {\n    staticFields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone', 'ship-to-fax'],\n    dynamicPrefixes: ['ship-to-field-', 'ship-to-'],\n    dataAttribute: 'data-subsection=\"ship-to\"'\n  },\n  shipping: {\n    staticFields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms'],\n    dynamicPrefixes: ['shipping-field-', 'shipping-'],\n    dataAttribute: 'data-section=\"shipping-details\"'\n  },\n  lineItems: {\n    staticFields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total'],\n    dynamicPrefixes: ['line-item-', 'item-'],\n    dataAttribute: 'data-section=\"line-items\"',\n    maxRows: 5\n  },\n  totals: {\n    staticFields: ['subtotal', 'tax', 'shipping', 'other', 'total'],\n    dynamicPrefixes: ['total-', 'totals-'],\n    dataAttribute: 'data-subsection=\"totals\"'\n  },\n  comments: {\n    staticFields: ['comments'],\n    dynamicPrefixes: ['comments-field-', 'comment-'],\n    dataAttribute: 'data-subsection=\"comments\"'\n  },\n  contact: {\n    staticFields: ['contactInfo'],\n    dynamicPrefixes: ['contact-info-field-', 'contact-'],\n    dataAttribute: 'data-section=\"contact-signature\"'\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n\n// Dynamic ID Generation Utilities\nexport const dynamicIdUtils = {\n  // Generate a new dynamic ID with timestamp and random component\n  generateId: (prefix = 'field', section = 'general') => {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${section}-${prefix}-${timestamp}-${random}`;\n  },\n  // Generate multiple possible IDs for a field to try when looking up values\n  getPossibleIds: (staticId, section = 'unknown') => {\n    const baseName = staticId.replace(/^(company-|po-|vendor-|ship-to-)/, '');\n    return [staticId,\n    // Try static ID first\n    `${section}-field-${staticId}`, `${section}-${baseName}`, `${staticId}-${Date.now()}`, `field-${baseName}`, baseName];\n  },\n  // Validate if an ID follows our dynamic ID pattern\n  isValidDynamicId: id => {\n    const dynamicPattern = /^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;\n    return dynamicPattern.test(id);\n  },\n  // Extract the base field type from any ID (static or dynamic)\n  getFieldType: id => {\n    // Remove common prefixes and suffixes to get the core field type\n    return id.replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/, '').replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/, '').replace(/^(field-)?/, '');\n  },\n  // Get section from ID\n  getSection: id => {\n    if (id.startsWith('company-')) return 'company';\n    if (id.startsWith('po-')) return 'purchase-order';\n    if (id.startsWith('vendor-')) return 'vendor';\n    if (id.startsWith('ship-to-')) return 'ship-to';\n    if (id.startsWith('shipping-')) return 'shipping';\n    if (id.startsWith('line-item-')) return 'line-items';\n    if (id.startsWith('total-')) return 'totals';\n    if (id.startsWith('comments-')) return 'comments';\n    if (id.startsWith('contact-')) return 'contact';\n    return 'unknown';\n  }\n};\n\n// Field Mapping Utilities\nexport const fieldMappingUtils = {\n  // Map all known static field IDs to their readable names\n  staticFieldNames: {\n    // Company fields\n    'company-name': 'Company Name',\n    'company-address': 'Street Address',\n    'company-city-state': 'City, State, ZIP',\n    'company-phone': 'Phone Number',\n    'company-fax': 'Fax Number',\n    'company-website': 'Website',\n    // Purchase Order fields\n    'po-title': 'Purchase Order Title',\n    'po-date': 'Date',\n    'po-number': 'PO Number',\n    // Vendor fields\n    'vendor-company': 'Vendor Company',\n    'vendor-contact': 'Vendor Contact',\n    'vendor-address': 'Vendor Address',\n    'vendor-city-state': 'Vendor City/State',\n    'vendor-phone': 'Vendor Phone',\n    'vendor-fax': 'Vendor Fax',\n    // Ship To fields\n    'ship-to-name': 'Ship To Name',\n    'ship-to-company': 'Ship To Company',\n    'ship-to-address': 'Ship To Address',\n    'ship-to-city-state': 'Ship To City/State',\n    'ship-to-phone': 'Ship To Phone',\n    'ship-to-fax': 'Ship To Fax',\n    // Shipping fields\n    'requisitioner': 'Requisitioner',\n    'shipVia': 'Ship Via',\n    'fob': 'F.O.B.',\n    'shippingTerms': 'Shipping Terms',\n    // Line item fields\n    'itemNumber': 'Item Number',\n    'description': 'Description',\n    'quantity': 'Quantity',\n    'unitPrice': 'Unit Price',\n    'total': 'Total',\n    // Totals fields\n    'subtotal': 'Subtotal',\n    'tax': 'Tax',\n    'shipping': 'Shipping',\n    'other': 'Other',\n    // Other fields\n    'comments': 'Comments',\n    'contactInfo': 'Contact Information'\n  },\n  // Get human-readable name for any field ID\n  getFieldName: id => {\n    const staticName = fieldMappingUtils.staticFieldNames[id];\n    if (staticName) return staticName;\n\n    // For dynamic IDs, try to extract the base field type\n    const fieldType = dynamicIdUtils.getFieldType(id);\n    const staticFieldName = fieldMappingUtils.staticFieldNames[fieldType];\n    if (staticFieldName) return staticFieldName;\n\n    // Fallback: humanize the ID\n    return id.replace(/[-_]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  },\n  // Get all field IDs for a section\n  getFieldsForSection: section => {\n    const template = purchaseOrderTemplate[section];\n    return template ? template.staticFields : [];\n  }\n};","map":{"version":3,"names":["processFormData","generatePurchaseOrderXML","formData","options","console","log","Date","toISOString","processedData","calculateTotals","validate","formatForXML","throwOnValidationError","error","data","getFieldValue","fieldName","defaultValue","getDynamicFieldValue","fieldArray","possibleIds","Array","isArray","fieldId","field","find","f","id","value","getCompanyFieldValue","staticId","companyFields","now","filter","includes","replace","map","getPOFieldValue","purchaseOrderFields","getVendorFieldValue","vendorFields","getShipToFieldValue","shipToFields","getTotalsFieldValue","totalsFields","buildCompanyXML","label","fieldRows","fieldValue","placeholder","isHeader","displayText","join","buildPurchaseOrderXML","buildVendorShipToSectionXML","_data$sectionOrder","_data$sectionOrder2","sectionOrder","sections3And4","leftSection","rightSection","leftColumn","rightColumn","buildVendorXML","buildShipToXML","buildShippingDetailsXML","getShippingFieldValue","buildVendorShipToAndShippingDetailsXML","_data$sectionOrder3","_data$sectionOrder4","sections3And4And5And6","topSection","bottomSection","topContent","bottomContent","buildHeaderSectionXML","_data$sectionOrder5","_data$sectionOrder6","_data$sectionOrder7","_data$sectionOrder8","_data$sectionOrder8$s","_data$sectionOrder9","sections1And2","Object","keys","length","JSON","stringify","buildVendorShipToXML","_data$sectionOrder0","buildLineItemsXML","_data$sectionOrder1","_data$sectionOrder10","columnOrder","lineItemColumns","lineItems","columnConfig","itemNumber","colSpan","description","qty","rate","amount","headerRow","columnId","config","dataRows","fill","_","rowIndex","rowData","rowCells","buildCommentsXML","comments","buildTotalsXML","subtotal","tax","shipping","other","total","buildCommentsTotalsXML","_data$sectionOrder11","sections8And9","fieldType","possibleSelectors","selector","element","document","querySelector","textContent","trim","getLineItemValue","getColumnIndex","columnMap","quantity","unitPrice","getTotalFieldValue","getCommentsValue","getContactInfoValue","contactInfo","generateLineItemsXML","maxRows","index","xml","substring","purchaseOrderTemplate","companyInfo","staticFields","dynamicPrefixes","dataAttribute","purchaseOrder","vendor","shipTo","totals","contact","getTemplateStructure","dynamicIdUtils","generateId","prefix","section","timestamp","random","Math","toString","substr","getPossibleIds","baseName","isValidDynamicId","dynamicPattern","test","getFieldType","getSection","startsWith","fieldMappingUtils","staticFieldNames","getFieldName","staticName","staticFieldName","l","toUpperCase","getFieldsForSection","template"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/PurchaseOrderTemplate.js"],"sourcesContent":["// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\nimport { processFormData } from './FormDataMapper';\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData, options = {}) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('📅 Template updated at:', new Date().toISOString());\n  console.log('📊 Raw form data received:', formData);\n  \n  // Process and validate form data using the FormDataMapper\n  let processedData;\n  try {\n    processedData = processFormData(formData, {\n      calculateTotals: options.calculateTotals !== false,\n      validate: options.validate !== false,\n      formatForXML: true,\n      throwOnValidationError: options.throwOnValidationError || false\n    });\n    console.log('📊 Processed form data:', processedData);\n  } catch (error) {\n    console.error('❌ Form data processing failed:', error);\n    if (options.throwOnValidationError) {\n      throw error;\n    }\n    // Fallback to using raw data\n    processedData = formData || {};\n  }\n  \n  // Use processed data for XML generation, fallback to original data\n  const data = processedData || formData || {};\n  \n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n    \n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [\n        staticId,\n        `company-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [\n        staticId,\n        `po-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [\n        staticId,\n        `vendor-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [\n        staticId,\n        `ship-to-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalsFieldValue = (staticId, defaultValue = '') => {\n    if (data.totalsFields && Array.isArray(data.totalsFields)) {\n      const possibleIds = [\n        staticId,\n        `totals-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.totalsFields.filter(f => f.id.includes(staticId)).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.totalsFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // ============================================================================\n  // MODULAR XML BUILDER FUNCTIONS\n  // ============================================================================\n  \n  // Build Company Information XML with dynamic field ordering\n  const buildCompanyXML = () => {\n    // Get company fields from data, default to empty array if not provided\n    const companyFields = data.companyFields || [];\n    \n    console.log('🔀 Building company XML with fields:', companyFields.map(f => ({ id: f.id, label: f.label })));\n    \n    // Build rows dynamically based on current field order\n    const fieldRows = companyFields.map(field => {\n      const fieldValue = field.value || field.placeholder || '';\n      const isHeader = field.id === 'company-name';\n      \n      if (isHeader) {\n        return `<td class=\"header-company\" style=\"text-align: left;\" data-field=\"${field.id}\">${fieldValue}</td>`;\n      } else {\n        // Handle special formatting for phone, fax, website\n        let displayText = fieldValue;\n        if (field.id === 'company-phone') displayText = `Phone: ${fieldValue}`;\n        if (field.id === 'company-fax') displayText = `Fax: ${fieldValue}`;\n        if (field.id === 'company-website') displayText = `Website: ${fieldValue}`;\n        \n        return `<td style=\"text-align: left;\" data-field=\"${field.id}\">${displayText}</td>`;\n      }\n    }).join('</tr><tr>');\n    \n    return `\n      <td style=\"width: 65%; padding-right: 20px;\" data-section=\"company-info\">\n        <table>\n          <tr>\n            ${fieldRows}\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Purchase Order Information XML\n  const buildPurchaseOrderXML = () => {\n    return `\n      <td style=\"width: 35%; padding-left: 20px;\" align=\"right\" data-section=\"purchase-order-info\">\n        <table>\n          <tr>\n            <td class=\"header-title\" style=\"text-align: right;\" data-field=\"po-title\">${getPOFieldValue('po-title', 'PURCHASE ORDER')}</td>\n          </tr>\n          <tr>\n            <td style=\"text-align: right;\">\n              <table style=\"width: 100%;\">\n                <tr>\n                  <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                  <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${getPOFieldValue('po-date', 'MM/DD/YYYY')}</td>\n                </tr>\n                <tr>\n                  <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                  <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${getPOFieldValue('po-number', '[PO Number]')}</td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n\n\n  // Build Vendor-ShipTo Section XML with dynamic ordering\n  const buildVendorShipToSectionXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo section with order:', { leftSection, rightSection });\n    console.log('🔀 sections3And4 array:', data.sectionOrder?.sections3And4);\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      // Default order: Vendor left, Ship To right\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n      console.log('🔀 Using default order: Vendor left, Ship To right');\n    } else {\n      // Swapped order: Ship To left, Vendor right\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n      console.log('🔀 Using swapped order: Ship To left, Vendor right');\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\n  const buildShippingDetailsXML = () => {\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n          <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n          <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n          <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n          <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n          <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n          <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\n  const buildVendorShipToAndShippingDetailsXML = () => {\n    // Get section order from data, default to [sections3And4, sections5And6] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4And5And6 || ['sections3And4', 'sections5And6'];\n    const topSection = sectionOrder[0];\n    const bottomSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo + shipping details with order:', { topSection, bottomSection });\n    console.log('🔀 sections3And4And5And6 array:', data.sectionOrder?.sections3And4And5And6);\n    \n    let topContent, bottomContent;\n    \n    if (topSection === 'sections3And4') {\n      // Default order: Vendor-ShipTo on top, Shipping Details below\n      topContent = buildVendorShipToSectionXML();\n      bottomContent = buildShippingDetailsXML();\n      console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');\n    } else {\n      // Swapped order: Shipping Details on top, Vendor-ShipTo below\n      topContent = buildShippingDetailsXML();\n      bottomContent = buildVendorShipToSectionXML();\n      console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');\n    }\n    \n    return `\n      ${topContent}\n      ${bottomContent}\n    `;\n  };\n\n  // Build Header Section XML (Company + Purchase Order) with dynamic ordering\n  const buildHeaderSectionXML = () => {\n    // Get section order from data, default to [section1, section2] if not provided\n    const sectionOrder = data.sectionOrder?.sections1And2 || ['section1', 'section2'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building header section with order:', { leftSection, rightSection });\n    console.log('🔀 Full sectionOrder data:', data.sectionOrder);\n    console.log('🔀 Full data object keys:', Object.keys(data));\n    console.log('🔀 sections1And2 array:', data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 type:', typeof data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 length:', data.sectionOrder?.sections1And2?.length);\n    console.log('🔀 sections1And2 values:', JSON.stringify(data.sectionOrder?.sections1And2));\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section1') {\n      leftColumn = buildCompanyXML();\n      rightColumn = buildPurchaseOrderXML();\n      console.log('🔀 Using default order: Company left, Purchase Order right');\n    } else {\n      leftColumn = buildPurchaseOrderXML();\n      rightColumn = buildCompanyXML();\n      console.log('🔀 Using swapped order: Purchase Order left, Company right');\n    }\n    \n    return `\n      <table>\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor Information XML\n  const buildVendorXML = () => {\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"vendor\">\n        <table>\n          <tr>\n            <td class=\"section-header\">VENDOR</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <span data-field=\"vendor-company\">${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br/>\n              <span data-field=\"vendor-contact\">${getVendorFieldValue('vendor-contact', '[Contact Person]')}</span><br/>\n              <span data-field=\"vendor-address\">${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br/>\n              <span data-field=\"vendor-city-state\">${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br/>\n              Phone: <span data-field=\"vendor-phone\">${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br/>\n              Fax: <span data-field=\"vendor-fax\">${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Ship To Information XML\n  const buildShipToXML = () => {\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n        <table>\n          <tr>\n            <td class=\"section-header\">SHIP TO</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <span data-field=\"ship-to-name\">${getShipToFieldValue('ship-to-name', '[Contact Name]')}</span><br/>\n              <span data-field=\"ship-to-company\">${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br/>\n              <span data-field=\"ship-to-address\">${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br/>\n              <span data-field=\"ship-to-city-state\">${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br/>\n              Phone: <span data-field=\"ship-to-phone\">${getShipToFieldValue('ship-to-phone', '(000) 000-0000')}</span><br/>\n              Fax: <span data-field=\"ship-to-fax\">${getShipToFieldValue('ship-to-fax', '(000) 000-0000')}</span>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor/Ship-To Section XML with dynamic ordering\n  const buildVendorShipToXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor/ship-to section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n    } else {\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Line Items XML with dynamic column ordering\n  const buildLineItemsXML = () => {\n    // Get column order from data, default to standard order if not provided\n    const columnOrder = data.sectionOrder?.lineItemColumns || ['itemNumber', 'description', 'qty', 'rate', 'amount'];\n    \n    console.log('🔀 Building line items with column order:', columnOrder);\n    console.log('🔀 Line items data:', data.lineItems);\n    console.log('🔀 Column order from state:', data.sectionOrder?.lineItemColumns);\n    \n    // Column configuration mapping\n    const columnConfig = {\n      itemNumber: { label: 'Item#', colSpan: 3, field: 'itemNumber' },\n      description: { label: 'Description', colSpan: 12, field: 'description' },\n      qty: { label: 'Qty', colSpan: 2, field: 'qty' },\n      rate: { label: 'Rate', colSpan: 3, field: 'rate' },\n      amount: { label: 'Amount', colSpan: 3, field: 'amount' }\n    };\n    \n    // Build header row\n    const headerRow = columnOrder.map(columnId => {\n      const config = columnConfig[columnId];\n      return `<td class=\"item-header\" colSpan=\"${config.colSpan}\">${config.label}</td>`;\n    }).join('');\n    \n    // Build data rows using actual line item data\n    const lineItems = data.lineItems || [];\n    const dataRows = Array(5).fill(0).map((_, rowIndex) => {\n      const rowData = lineItems[rowIndex] || {};\n      const rowCells = columnOrder.map(columnId => {\n        const config = columnConfig[columnId];\n        const fieldValue = rowData[columnId] || '-';\n        return `<td colSpan=\"${config.colSpan}\">${fieldValue}</td>`;\n      }).join('');\n      \n      return `<tr data-row-id=\"line-item-${rowIndex}\" data-row-index=\"${rowIndex}\">${rowCells}</tr>`;\n    }).join('');\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n          ${headerRow}\n        </tr>\n        ${dataRows}\n      </table>\n    `;\n  };\n\n  // Build Comments Section XML\n  const buildCommentsXML = () => {\n    const comments = getFieldValue('comments', '[Enter comments or special instructions...]');\n    return `\n      <td style=\"width: 50%;\" data-section=\"comments\">\n        <table>\n          <tr>\n            <td class=\"comments-header\">Comments or Special Instructions</td>\n          </tr>\n          <tr>\n            <td class=\"comments-content\">${comments}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Totals Section XML\n  const buildTotalsXML = () => {\n    const subtotal = getTotalsFieldValue('subtotal', '$0.00');\n    const tax = getTotalsFieldValue('tax', '$0.00');\n    const shipping = getTotalsFieldValue('shipping', '$0.00');\n    const other = getTotalsFieldValue('other', '$0.00');\n    const total = getTotalsFieldValue('total', '$0.00');\n    \n    return `\n      <td style=\"width: 50%;\" data-section=\"totals\">\n        <table>\n          <tr>\n            <td class=\"section-header\">Totals</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <div>SUBTOTAL: ${subtotal}</div>\n              <div>TAX: ${tax}</div>\n              <div>SHIPPING: ${shipping}</div>\n              <div>OTHER: ${other}</div>\n              <div class=\"total-final\">TOTAL: ${total}</div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Comments and Totals Section XML with dynamic ordering\n  const buildCommentsTotalsXML = () => {\n    // Get section order from data, default to [section8, section9] if not provided\n    const sectionOrder = data.sectionOrder?.sections8And9 || ['section8', 'section9'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building comments/totals section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section8') {\n      leftColumn = buildCommentsXML();\n      rightColumn = buildTotalsXML();\n    } else {\n      leftColumn = buildTotalsXML();\n      rightColumn = buildCommentsXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `.shipping-${fieldType} .editable-field`,\n      `#shipping-${fieldType}`,\n      `[data-shipping-field=\"${fieldType}\"]`\n    ];\n    \n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`\n    ];\n    \n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = (fieldType) => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`\n    ];\n    \n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n    \n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      \n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    ${buildHeaderSectionXML()}\n    ${buildVendorShipToAndShippingDetailsXML()}\n\n\n    ${buildLineItemsXML()}\n\n\n    ${buildCommentsTotalsXML()}\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n\n  console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');\n  console.log('📄 XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    staticFields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website'],\n    dynamicPrefixes: ['company-field-', 'company-'],\n    dataAttribute: 'data-section=\"company-info\"'\n  },\n  purchaseOrder: {\n    staticFields: ['po-title', 'po-date', 'po-number'],\n    dynamicPrefixes: ['po-field-', 'po-'],\n    dataAttribute: 'data-section=\"purchase-order-info\"'\n  },\n  vendor: {\n    staticFields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax'],\n    dynamicPrefixes: ['vendor-field-', 'vendor-'],\n    dataAttribute: 'data-subsection=\"vendor\"'\n  },\n  shipTo: {\n    staticFields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone', 'ship-to-fax'],\n    dynamicPrefixes: ['ship-to-field-', 'ship-to-'],\n    dataAttribute: 'data-subsection=\"ship-to\"'\n  },\n  shipping: {\n    staticFields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms'],\n    dynamicPrefixes: ['shipping-field-', 'shipping-'],\n    dataAttribute: 'data-section=\"shipping-details\"'\n  },\n  lineItems: {\n    staticFields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total'],\n    dynamicPrefixes: ['line-item-', 'item-'],\n    dataAttribute: 'data-section=\"line-items\"',\n    maxRows: 5\n  },\n  totals: {\n    staticFields: ['subtotal', 'tax', 'shipping', 'other', 'total'],\n    dynamicPrefixes: ['total-', 'totals-'],\n    dataAttribute: 'data-subsection=\"totals\"'\n  },\n  comments: {\n    staticFields: ['comments'],\n    dynamicPrefixes: ['comments-field-', 'comment-'],\n    dataAttribute: 'data-subsection=\"comments\"'\n  },\n  contact: {\n    staticFields: ['contactInfo'],\n    dynamicPrefixes: ['contact-info-field-', 'contact-'],\n    dataAttribute: 'data-section=\"contact-signature\"'\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n\n// Dynamic ID Generation Utilities\nexport const dynamicIdUtils = {\n  // Generate a new dynamic ID with timestamp and random component\n  generateId: (prefix = 'field', section = 'general') => {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${section}-${prefix}-${timestamp}-${random}`;\n  },\n\n  // Generate multiple possible IDs for a field to try when looking up values\n  getPossibleIds: (staticId, section = 'unknown') => {\n    const baseName = staticId.replace(/^(company-|po-|vendor-|ship-to-)/, '');\n    return [\n      staticId, // Try static ID first\n      `${section}-field-${staticId}`,\n      `${section}-${baseName}`,\n      `${staticId}-${Date.now()}`,\n      `field-${baseName}`,\n      baseName\n    ];\n  },\n\n  // Validate if an ID follows our dynamic ID pattern\n  isValidDynamicId: (id) => {\n    const dynamicPattern = /^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;\n    return dynamicPattern.test(id);\n  },\n\n  // Extract the base field type from any ID (static or dynamic)\n  getFieldType: (id) => {\n    // Remove common prefixes and suffixes to get the core field type\n    return id\n      .replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/, '')\n      .replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/, '')\n      .replace(/^(field-)?/, '');\n  },\n\n  // Get section from ID\n  getSection: (id) => {\n    if (id.startsWith('company-')) return 'company';\n    if (id.startsWith('po-')) return 'purchase-order';\n    if (id.startsWith('vendor-')) return 'vendor';\n    if (id.startsWith('ship-to-')) return 'ship-to';\n    if (id.startsWith('shipping-')) return 'shipping';\n    if (id.startsWith('line-item-')) return 'line-items';\n    if (id.startsWith('total-')) return 'totals';\n    if (id.startsWith('comments-')) return 'comments';\n    if (id.startsWith('contact-')) return 'contact';\n    return 'unknown';\n  }\n};\n\n// Field Mapping Utilities\nexport const fieldMappingUtils = {\n  // Map all known static field IDs to their readable names\n  staticFieldNames: {\n    // Company fields\n    'company-name': 'Company Name',\n    'company-address': 'Street Address',\n    'company-city-state': 'City, State, ZIP',\n    'company-phone': 'Phone Number',\n    'company-fax': 'Fax Number',\n    'company-website': 'Website',\n    \n    // Purchase Order fields\n    'po-title': 'Purchase Order Title',\n    'po-date': 'Date',\n    'po-number': 'PO Number',\n    \n    // Vendor fields\n    'vendor-company': 'Vendor Company',\n    'vendor-contact': 'Vendor Contact',\n    'vendor-address': 'Vendor Address',\n    'vendor-city-state': 'Vendor City/State',\n    'vendor-phone': 'Vendor Phone',\n    'vendor-fax': 'Vendor Fax',\n    \n    // Ship To fields\n    'ship-to-name': 'Ship To Name',\n    'ship-to-company': 'Ship To Company',\n    'ship-to-address': 'Ship To Address',\n    'ship-to-city-state': 'Ship To City/State',\n    'ship-to-phone': 'Ship To Phone',\n    'ship-to-fax': 'Ship To Fax',\n    \n    // Shipping fields\n    'requisitioner': 'Requisitioner',\n    'shipVia': 'Ship Via',\n    'fob': 'F.O.B.',\n    'shippingTerms': 'Shipping Terms',\n    \n    // Line item fields\n    'itemNumber': 'Item Number',\n    'description': 'Description',\n    'quantity': 'Quantity',\n    'unitPrice': 'Unit Price',\n    'total': 'Total',\n    \n    // Totals fields\n    'subtotal': 'Subtotal',\n    'tax': 'Tax',\n    'shipping': 'Shipping',\n    'other': 'Other',\n    \n    // Other fields\n    'comments': 'Comments',\n    'contactInfo': 'Contact Information'\n  },\n\n  // Get human-readable name for any field ID\n  getFieldName: (id) => {\n    const staticName = fieldMappingUtils.staticFieldNames[id];\n    if (staticName) return staticName;\n    \n    // For dynamic IDs, try to extract the base field type\n    const fieldType = dynamicIdUtils.getFieldType(id);\n    const staticFieldName = fieldMappingUtils.staticFieldNames[fieldType];\n    if (staticFieldName) return staticFieldName;\n    \n    // Fallback: humanize the ID\n    return id.replace(/[-_]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  },\n\n  // Get all field IDs for a section\n  getFieldsForSection: (section) => {\n    const template = purchaseOrderTemplate[section];\n    return template ? template.staticFields : [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}