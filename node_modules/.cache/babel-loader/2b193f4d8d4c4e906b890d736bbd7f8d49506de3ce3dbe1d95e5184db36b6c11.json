{"ast":null,"code":"// AI provider hook - uses ChatGPT API directly\n// Set REACT_APP_OPENAI_API_KEY in your .env file to keep the key secure\n\nexport function useAIProvider() {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  async function getFieldSuggestions(payload) {\n    if (!apiKey) {\n      throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');\n    }\n    try {\n      var _payload$companyField, _payload$purchaseOrde, _payload$vendorFields, _payload$shipToFields, _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: `You are a helpful assistant that fills out purchase order forms. \n              Analyze the provided fields and return realistic, business-appropriate values.\n              Return ONLY a JSON object with field IDs as keys and suggested values as strings.\n              Example: {\"company-name\": \"Acme Corporation\", \"po-number\": \"PO-2024-001\"}`\n          }, {\n            role: 'user',\n            content: `Please fill out these purchase order fields with realistic business data:\n              Company Fields: ${(_payload$companyField = payload.companyFields) === null || _payload$companyField === void 0 ? void 0 : _payload$companyField.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Purchase Order Fields: ${(_payload$purchaseOrde = payload.purchaseOrderFields) === null || _payload$purchaseOrde === void 0 ? void 0 : _payload$purchaseOrde.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Vendor Fields: ${(_payload$vendorFields = payload.vendorFields) === null || _payload$vendorFields === void 0 ? void 0 : _payload$vendorFields.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Ship To Fields: ${(_payload$shipToFields = payload.shipToFields) === null || _payload$shipToFields === void 0 ? void 0 : _payload$shipToFields.map(f => `${f.id}: ${f.label}`).join(', ')}\n              \n              Return only valid JSON with field IDs as keys.`\n          }],\n          temperature: 0.7,\n          max_tokens: 1000\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        throw new Error(`OpenAI API error: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || response.statusText}`);\n      }\n      const data = await response.json();\n      const content = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n      if (!content) {\n        throw new Error('No response content from OpenAI');\n      }\n\n      // Parse the JSON response from ChatGPT\n      try {\n        const suggestions = JSON.parse(content);\n        return {\n          suggestions\n        };\n      } catch (parseError) {\n        console.error('Failed to parse OpenAI response:', content);\n        throw new Error('Invalid JSON response from AI - please try again');\n      }\n    } catch (error) {\n      console.error('OpenAI API call failed:', error);\n      throw error;\n    }\n  }\n  return {\n    getFieldSuggestions\n  };\n}","map":{"version":3,"names":["useAIProvider","apiKey","process","env","REACT_APP_OPENAI_API_KEY","getFieldSuggestions","payload","Error","_payload$companyField","_payload$purchaseOrde","_payload$vendorFields","_payload$shipToFields","_data$choices$","_data$choices$$messag","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","companyFields","map","f","id","label","join","purchaseOrderFields","vendorFields","shipToFields","temperature","max_tokens","ok","_errorData$error","errorData","json","error","message","statusText","data","choices","suggestions","parse","parseError","console"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useAIProvider.js"],"sourcesContent":["// AI provider hook - uses ChatGPT API directly\n// Set REACT_APP_OPENAI_API_KEY in your .env file to keep the key secure\n\nexport function useAIProvider() {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n\n  async function getFieldSuggestions(payload) {\n    if (!apiKey) {\n      throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');\n    }\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [\n            {\n              role: 'system',\n              content: `You are a helpful assistant that fills out purchase order forms. \n              Analyze the provided fields and return realistic, business-appropriate values.\n              Return ONLY a JSON object with field IDs as keys and suggested values as strings.\n              Example: {\"company-name\": \"Acme Corporation\", \"po-number\": \"PO-2024-001\"}`\n            },\n            {\n              role: 'user',\n              content: `Please fill out these purchase order fields with realistic business data:\n              Company Fields: ${payload.companyFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Purchase Order Fields: ${payload.purchaseOrderFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Vendor Fields: ${payload.vendorFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Ship To Fields: ${payload.shipToFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              \n              Return only valid JSON with field IDs as keys.`\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 1000\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);\n      }\n\n      const data = await response.json();\n      const content = data.choices[0]?.message?.content;\n      \n      if (!content) {\n        throw new Error('No response content from OpenAI');\n      }\n\n      // Parse the JSON response from ChatGPT\n      try {\n        const suggestions = JSON.parse(content);\n        return { suggestions };\n      } catch (parseError) {\n        console.error('Failed to parse OpenAI response:', content);\n        throw new Error('Invalid JSON response from AI - please try again');\n      }\n    } catch (error) {\n      console.error('OpenAI API call failed:', error);\n      throw error;\n    }\n  }\n\n  return { getFieldSuggestions };\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}