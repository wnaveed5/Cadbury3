{"ast":null,"code":"var _jsxFileName = \"/Users/waleed/Documents/GitHub/Cadbury3/src/components/XMLGeneratorModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './XMLGeneratorModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XMLGeneratorModal = ({\n  isOpen,\n  onClose,\n  formData,\n  onRefresh\n}) => {\n  _s();\n  const [xmlContent, setXmlContent] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState(null);\n  const modalRef = useRef(null);\n  const xmlOutputRef = useRef(null);\n\n  // Initialize XML generator when component mounts\n  useEffect(() => {\n    if (isOpen && !window.XML_GENERATOR) {\n      initializeXMLGenerator();\n    }\n  }, [isOpen]);\n\n  // Initialize the XML generator module\n  const initializeXMLGenerator = () => {\n    // Create a global UTILS object for field mapping\n    window.UTILS = {\n      getFieldValues: () => {\n        return {\n          companyName: formData.companyName || 'Your Company Name',\n          companyAddress: formData.companyAddress || 'Your Company Address',\n          companyCityState: formData.companyCityState || 'City, State ZIP',\n          companyPhone: formData.companyPhone || 'Your Company Phone',\n          companyFax: formData.companyFax || 'Your Company Fax',\n          companyWebsite: formData.companyWebsite || 'Your Company Website',\n          poNumber: formData.poNumber || 'PO-001',\n          poDate: formData.poDate || new Date().toLocaleDateString(),\n          vendorCompany: formData.vendorCompany || 'Vendor Company',\n          vendorContact: formData.vendorContact || 'Vendor Contact',\n          vendorAddress: formData.vendorAddress || 'Vendor Address',\n          vendorCityState: formData.vendorCityState || 'City, ST ZIP',\n          vendorPhone: formData.vendorPhone || 'Vendor Phone',\n          shipToName: formData.shipToName || 'Ship To Name',\n          shipToCompany: formData.shipToCompany || 'Ship To Company',\n          shipToAddress: formData.shipToAddress || 'Ship To Address',\n          shipToCityState: formData.shipToCityState || 'City, ST ZIP',\n          shipToPhone: formData.shipToPhone || 'Ship To Phone',\n          shipToFax: formData.shipToFax || '',\n          requisitioner: formData.requisitioner || 'Requisitioner Name',\n          shipVia: formData.shipVia || 'Standard Shipping',\n          fob: formData.fob || 'FOB Origin',\n          shippingTerms: formData.shippingTerms || 'Net 30',\n          comments: formData.comments || 'No special instructions',\n          subtotal: formData.subtotal || '$0.00',\n          tax: formData.tax || '$0.00',\n          shipping: formData.shipping || '$0.00',\n          other: formData.other || '$0.00',\n          total: formData.total || '$0.00',\n          contactInfo: formData.contactInfo || 'Contact information here'\n        };\n      },\n      getDynamicFieldMapping: () => {\n        return {\n          companyName: '[data-field-id=\"company-name\"]',\n          companyAddress: '[data-field-id=\"company-address\"]',\n          companyCityState: '[data-field-id=\"company-city-state\"]',\n          companyPhone: '[data-field-id=\"company-phone\"]',\n          companyFax: '[data-field-id=\"company-fax\"]',\n          companyWebsite: '[data-field-id=\"company-website\"]',\n          poNumber: '[data-field-id=\"po-number\"]',\n          poDate: '[data-field-id=\"po-date\"]',\n          vendorCompany: '[data-field-id=\"vendor-company\"]',\n          vendorContact: '[data-field-id=\"vendor-contact\"]',\n          vendorAddress: '[data-field-id=\"vendor-address\"]',\n          vendorCityState: '[data-field-id=\"vendor-city-state\"]',\n          vendorPhone: '[data-field-id=\"vendor-phone\"]',\n          shipToName: '[data-field-id=\"ship-to-name\"]',\n          shipToCompany: '[data-field-id=\"ship-to-company\"]',\n          shipToAddress: '[data-field-id=\"ship-to-address\"]',\n          shipToCityState: '[data-field-id=\"ship-to-city-state\"]',\n          shipToPhone: '[data-field-id=\"ship-to-phone\"]'\n        };\n      },\n      findFieldByLabel: (label, section) => {\n        // Find fields by label and section\n        const elements = document.querySelectorAll('.editable-field');\n        for (let element of elements) {\n          var _element$closest;\n          const parentSection = ((_element$closest = element.closest('.section-header')) === null || _element$closest === void 0 ? void 0 : _element$closest.textContent) || '';\n          if (parentSection.toLowerCase().includes(section.toLowerCase()) && element.textContent.toLowerCase().includes(label.toLowerCase())) {\n            return element;\n          }\n        }\n        return null;\n      }\n    };\n\n    // Create global functions for the modal\n    window.MAIN_APP = {\n      showError: message => {\n        setError(message);\n        setTimeout(() => setError(null), 5000);\n      },\n      showSuccess: message => {\n        // You can implement a success notification here\n        console.log('Success:', message);\n      }\n    };\n\n    // Create global currency formatter\n    window.CURRENCY_FORMATTER = {\n      format: value => {\n        if (!value || value.toString().trim() === '') return '$0.00';\n        const cleanValue = value.toString().replace(/[$,\\s]/g, '');\n        if (isNaN(cleanValue) || cleanValue === '') return '$0.00';\n        const number = parseFloat(cleanValue);\n        return '$' + number.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        });\n      }\n    };\n\n    // Create global drag and drop module\n    window.DRAG_AND_DROP = {\n      getCurrentCommentsOrder: () => {\n        // Return the current order of comments and totals sections\n        return {\n          leftSection: 'comments',\n          rightSection: 'totals'\n        };\n      }\n    };\n\n    // Load the XML generator module\n    loadXMLGeneratorModule();\n  };\n\n  // Load the XML generator module\n  const loadXMLGeneratorModule = () => {\n    const script = document.createElement('script');\n    script.textContent = `\n      // XML Generator Module for NetSuite Integration\n      window.XML_GENERATOR = {\n        // Convert form data to XML and display in modal\n        convertToXml: function() {\n          console.log('üîÑ Converting form to XML...');\n          \n          try {\n            const xmlContent = this.generateXml();\n            this.displayXmlModal(xmlContent);\n            console.log('‚úÖ XML conversion completed');\n          } catch (error) {\n            console.error('‚ùå XML conversion failed:', error);\n            if (window.MAIN_APP && window.MAIN_APP.showError) {\n              window.MAIN_APP.showError('Failed to generate XML. Please check the console for details.');\n            }\n          }\n        },\n\n        // Close the XML modal\n        closeXmlModal: function() {\n          if (window.MAIN_APP && window.MAIN_APP.closeModal) {\n            window.MAIN_APP.closeModal();\n          }\n        },\n\n        // Refresh XML display (called when rows are reordered)\n        refreshXmlDisplay: function() {\n          console.log('üîÑ Refreshing XML display...');\n          try {\n            const xmlContent = this.generateXml();\n            if (window.MAIN_APP && window.MAIN_APP.updateXmlContent) {\n              window.MAIN_APP.updateXmlContent(xmlContent);\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to refresh XML display:', error);\n          }\n        },\n\n        // Update XML preview in real-time\n        updateXmlPreview: function() {\n          console.log('üîÑ Updating XML preview...');\n          this.refreshXmlDisplay();\n        },\n\n        // Display XML content in modal\n        displayXmlModal: function(xmlContent) {\n          console.log('üîÑ displayXmlModal called');\n          if (window.MAIN_APP && window.MAIN_APP.updateXmlContent) {\n            window.MAIN_APP.updateXmlContent(xmlContent);\n          }\n        },\n\n        // Generate XML from current form data\n        generateXml: function() {\n          console.log('üöÄ Starting XML generation...');\n          \n          // Get field values from UTILS\n          let fieldValues;\n          if (window.UTILS && window.UTILS.getFieldValues) {\n            fieldValues = window.UTILS.getFieldValues();\n          } else {\n            fieldValues = this.getFieldValues();\n          }\n          \n          // Generate line items XML (simplified for React integration)\n          const lineItems = this.generateLineItemsFromFormData();\n          const lineItemsXml = this.generateLineItemsXml(lineItems);\n          \n          // Generate the complete XML\n          const headerBlockColor = this.getHeaderBlockColorHex();\n          \n          const xmlContent = \\`<?xml version=\"1.0\"?><!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"\\${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"\\${new Date().toISOString()}\"/>\n    <style>\n        * { font-family: Arial, Helvetica, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: \\${headerBlockColor}; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: \\${headerBlockColor}; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: \\${headerBlockColor}; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: \\${headerBlockColor}; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \\${this.generateHeaderXml(fieldValues)}\n    \\${this.generateVendorXml(fieldValues)}\n    \\${this.generateShippingXml(fieldValues)}\n    \\${lineItemsXml}\n    \\${this.generateCommentsXml(fieldValues)}\n    \\${this.generateContactInfoXml(fieldValues)}\n</body>\n</pdf>\\`;\n\n          console.log('‚úÖ XML generation completed');\n          return xmlContent;\n        },\n\n        // Generate header XML\n        generateHeaderXml: function(fieldValues) {\n          return \\`\n    <table>\n        <tr>\n            <td style=\"width: 65%; padding-right: 20px;\">\n                <table>\n                    <tr>\n                        <td class=\"header-company\">\\${this.escapeXml(fieldValues.companyName || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>\\${this.escapeXml(fieldValues.companyAddress || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>\\${this.escapeXml(fieldValues.companyCityState || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>Phone: \\${this.escapeXml(fieldValues.companyPhone || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>Fax: \\${this.escapeXml(fieldValues.companyFax || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>Website: \\${this.escapeXml(fieldValues.companyWebsite || '')}</td>\n                    </tr>\n                </table>\n            </td>\n            <td style=\"width: 35%; padding-left: 20px;\" align=\"right\">\n                <table>\n                    <tr>\n                        <td class=\"header-title\">PURCHASE ORDER</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <table style=\"width: 100%;\">\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\">\\${this.escapeXml(fieldValues.poDate || '')}</td>\n                                </tr>\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\">\\${this.escapeXml(fieldValues.poNumber || '')}</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate vendor XML\n        generateVendorXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 20px;\">\n        <tr>\n            <td style=\"width: 50%;\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">VENDOR</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            \\${this.escapeXml(fieldValues.vendorCompany)}<br/>\n                            \\${this.escapeXml(fieldValues.vendorContact || '')}<br/>\n                            \\${this.escapeXml(fieldValues.vendorAddress)}<br/>\n                            \\${this.escapeXml(fieldValues.vendorCityState)}<br/>\n                            Phone: \\${this.escapeXml(fieldValues.vendorPhone)}<br/>\n                            Fax: \\${this.escapeXml(fieldValues.vendorFax || '')}\n                        </td>\n                    </tr>\n                </table>\n            </td>\n            <td style=\"width: 50%;\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">SHIP TO</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            \\${this.escapeXml(fieldValues.shipToName || '')}<br/>\n                            \\${this.escapeXml(fieldValues.shipToCompany || fieldValues.companyName)}<br/>\n                            \\${this.escapeXml(fieldValues.shipToAddress || fieldValues.companyAddress)}<br/>\n                            \\${this.escapeXml(fieldValues.shipToCityState || fieldValues.companyCityState)}<br/>\n                            Phone: \\${this.escapeXml(fieldValues.shipToPhone || fieldValues.companyPhone || '')}<br/>\n                            Fax: \\${this.escapeXml(fieldValues.shipToFax || '')}\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate shipping XML\n        generateShippingXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 15px;\">\n        <tr>\n            <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n            <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.requisitioner || '')}</td>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.shipVia || '')}</td>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.fob || '')}</td>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.shippingTerms || '')}</td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate line items from form data\n        generateLineItemsFromFormData: function() {\n          // This would be populated from your form's line items\n          // For now, return a sample item\n          return [\n            {\n              item: 'Sample Item',\n              description: 'Sample Description',\n              quantity: '1',\n              rate: '10.00',\n              amount: '10.00'\n            }\n          ];\n        },\n\n        // Generate line items XML\n        generateLineItemsXml: function(lineItems) {\n          if (!lineItems || lineItems.length === 0) {\n            return '';\n          }\n          \n          let tableHeaders = \\`\n        <tr>\n            <td class=\"item-header\" align=\"center\" colspan=\"3\">ITEM#</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"12\">DESCRIPTION</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"2\">QTY</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"3\">RATE</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"3\">AMOUNT</td>\n        </tr>\\`;\n          \n          let tableRows = '';\n          lineItems.forEach((item, index) => {\n            tableRows += \\`\\n        <tr>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"center\" colspan=\"3\">\\${this.escapeXml(item.item || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\">\\${this.escapeXml(item.description || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\">\\${this.escapeXml(item.quantity || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\">\\${this.escapeXml(item.rate || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\">\\${this.escapeXml(item.amount || '')}</td>\\`;\n            tableRows += \\`\\n        </tr>\\`;\n          });\n          \n          return \\`\n    <table style=\"margin-top: 15px;\">\n        \\${tableHeaders}\\${tableRows}\n    </table>\\`;\n        },\n\n        // Generate comments XML\n        generateCommentsXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 15px;\">\n        <tr>\n            <td style=\"width: 70%; vertical-align: top;\">\n                <table style=\"width: 100%; border: 1px solid #e5e7eb;\">\n                    <tr>\n                        <td class=\"comments-header\">Comments or Special Instructions</td>\n                    </tr>\n                    <tr>\n                        <td class=\"comments-content\" style=\"padding: 15px; height: 120px; vertical-align: top;\">\\${this.escapeXml(fieldValues.comments || '')}</td>\n                    </tr>\n                </table>\n            </td>\n            <td style=\"width: 30%; padding: 0;\">\n                <table>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SUBTOTAL</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.subtotal || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TAX</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.tax || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SHIPPING</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.shipping || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">OTHER</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.other || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TOTAL</td>\n                        <td class=\"total-amount\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.total || ''))}</td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate contact info XML\n        generateContactInfoXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 20px;\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\">\n                \\${this.formatContactInfo(fieldValues.contactInfo, fieldValues.companyName, fieldValues.companyPhone)}\n            </td>\n            <td style=\"width: 30%; text-align: center;\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Get header block color\n        getHeaderBlockColorHex: function() {\n          return '#333333';\n        },\n\n        // Format currency\n        formatCurrency: function(value) {\n          return window.CURRENCY_FORMATTER ? window.CURRENCY_FORMATTER.format(value) : '\\$0.00';\n        },\n\n        // Format contact info\n        formatContactInfo: function(contactInfo, companyName, companyPhone) {\n          if (!contactInfo) {\n            const fallback = \\`For questions about this purchase order, please contact \\${companyName || 'us'}\\`;\n            return this.escapeXml(companyPhone ? \\`\\${fallback} at \\${companyPhone}\\` : fallback);\n          }\n          return this.escapeXml(contactInfo.toString().trim());\n        },\n\n        // Escape XML\n        escapeXml: function(text) {\n          if (!text) return '';\n          return text.replace(/&/g, '&amp;')\n                    .replace(/</g, '&lt;')\n                    .replace(/>/g, '&gt;')\n                    .replace(/\"/g, '&quot;')\n                    .replace(/'/g, '&apos;');\n        },\n\n        // Get field values (fallback)\n        getFieldValues: function() {\n          return window.UTILS ? window.UTILS.getFieldValues() : {};\n        }\n      };\n\n      // Global functions for the modal\n      window.closeXmlModal = function() {\n        if (window.MAIN_APP && window.MAIN_APP.closeModal) {\n          window.MAIN_APP.closeModal();\n        }\n      };\n\n      window.copyXmlToClipboard = function() {\n        const xmlText = window.MAIN_APP ? window.MAIN_APP.getXmlContent() : '';\n        if (navigator.clipboard && navigator.clipboard.writeText) {\n          navigator.clipboard.writeText(xmlText).then(() => {\n            if (window.MAIN_APP && window.MAIN_APP.showSuccess) {\n              window.MAIN_APP.showSuccess('XML copied to clipboard!');\n            }\n          }).catch(err => {\n            console.error('Failed to copy XML to clipboard:', err);\n          });\n        }\n      };\n\n      window.downloadXml = function() {\n        const xmlText = window.MAIN_APP ? window.MAIN_APP.getXmlContent() : '';\n        const blob = new Blob([xmlText], { type: 'application/xml' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'purchase-order.xml';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        \n        if (window.MAIN_APP && window.MAIN_APP.showSuccess) {\n          window.MAIN_APP.showSuccess('XML file downloaded!');\n        }\n      };\n\n      console.log('‚úÖ XML Generator module loaded successfully');\n    `;\n    document.head.appendChild(script);\n  };\n\n  // Generate XML when modal opens\n  useEffect(() => {\n    if (isOpen && window.XML_GENERATOR) {\n      generateXML();\n    }\n  }, [isOpen, formData]);\n\n  // Generate XML content\n  const generateXML = async () => {\n    setIsGenerating(true);\n    setError(null);\n    try {\n      if (window.XML_GENERATOR) {\n        const xml = window.XML_GENERATOR.generateXml();\n        setXmlContent(xml);\n\n        // Update MAIN_APP functions\n        window.MAIN_APP.updateXmlContent = content => setXmlContent(content);\n        window.MAIN_APP.closeModal = onClose;\n        window.MAIN_APP.getXmlContent = () => xmlContent;\n      }\n    } catch (err) {\n      setError('Failed to generate XML: ' + err.message);\n      console.error('XML generation error:', err);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Handle refresh\n  const handleRefresh = () => {\n    if (onRefresh) {\n      onRefresh();\n    }\n    generateXML();\n  };\n\n  // Handle copy to clipboard\n  const handleCopyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(xmlContent);\n      // You can add a success notification here\n    } catch (err) {\n      console.error('Failed to copy to clipboard:', err);\n    }\n  };\n\n  // Handle download\n  const handleDownload = () => {\n    const blob = new Blob([xmlContent], {\n      type: 'application/xml'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'purchase-order.xml';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"xml-modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"xml-modal\",\n      ref: modalRef,\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"xml-modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCC4 XML Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"xml-modal-content\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u274C \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"xml-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn refresh-btn\",\n            onClick: handleRefresh,\n            disabled: isGenerating,\n            children: \"\\uD83D\\uDD04 Refresh XML\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn copy-btn\",\n            onClick: handleCopyToClipboard,\n            disabled: !xmlContent,\n            children: \"\\uD83D\\uDCCB Copy to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn download-btn\",\n            onClick: handleDownload,\n            disabled: !xmlContent,\n            children: \"\\uD83D\\uDCBE Download XML\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"xml-output-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"xml-output-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Generated XML\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"xml-info\",\n              children: xmlContent ? `${xmlContent.length} characters` : 'No XML generated'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"xml-output\",\n            ref: xmlOutputRef,\n            children: isGenerating ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading\",\n              children: \"\\uD83D\\uDD04 Generating XML...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 17\n            }, this) : xmlContent ? /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"xml-content\",\n              children: xmlContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-content\",\n              children: \"No XML content available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 615,\n    columnNumber: 5\n  }, this);\n};\n_s(XMLGeneratorModal, \"OM2+vACHqKVAtn1mCBBTqAVkG6Q=\");\n_c = XMLGeneratorModal;\nexport default XMLGeneratorModal;\nvar _c;\n$RefreshReg$(_c, \"XMLGeneratorModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","XMLGeneratorModal","isOpen","onClose","formData","onRefresh","_s","xmlContent","setXmlContent","isGenerating","setIsGenerating","error","setError","modalRef","xmlOutputRef","window","XML_GENERATOR","initializeXMLGenerator","UTILS","getFieldValues","companyName","companyAddress","companyCityState","companyPhone","companyFax","companyWebsite","poNumber","poDate","Date","toLocaleDateString","vendorCompany","vendorContact","vendorAddress","vendorCityState","vendorPhone","shipToName","shipToCompany","shipToAddress","shipToCityState","shipToPhone","shipToFax","requisitioner","shipVia","fob","shippingTerms","comments","subtotal","tax","shipping","other","total","contactInfo","getDynamicFieldMapping","findFieldByLabel","label","section","elements","document","querySelectorAll","element","_element$closest","parentSection","closest","textContent","toLowerCase","includes","MAIN_APP","showError","message","setTimeout","showSuccess","console","log","CURRENCY_FORMATTER","format","value","toString","trim","cleanValue","replace","isNaN","number","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","DRAG_AND_DROP","getCurrentCommentsOrder","leftSection","rightSection","loadXMLGeneratorModule","script","createElement","head","appendChild","generateXML","xml","generateXml","updateXmlContent","content","closeModal","getXmlContent","err","handleRefresh","handleCopyToClipboard","navigator","clipboard","writeText","handleDownload","blob","Blob","type","url","URL","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL","className","onClick","children","ref","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","disabled","length","_c","$RefreshReg$"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/components/XMLGeneratorModal.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './XMLGeneratorModal.css';\n\nconst XMLGeneratorModal = ({ isOpen, onClose, formData, onRefresh }) => {\n  const [xmlContent, setXmlContent] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState(null);\n  const modalRef = useRef(null);\n  const xmlOutputRef = useRef(null);\n\n  // Initialize XML generator when component mounts\n  useEffect(() => {\n    if (isOpen && !window.XML_GENERATOR) {\n      initializeXMLGenerator();\n    }\n  }, [isOpen]);\n\n  // Initialize the XML generator module\n  const initializeXMLGenerator = () => {\n    // Create a global UTILS object for field mapping\n    window.UTILS = {\n      getFieldValues: () => {\n        return {\n          companyName: formData.companyName || 'Your Company Name',\n          companyAddress: formData.companyAddress || 'Your Company Address',\n          companyCityState: formData.companyCityState || 'City, State ZIP',\n          companyPhone: formData.companyPhone || 'Your Company Phone',\n          companyFax: formData.companyFax || 'Your Company Fax',\n          companyWebsite: formData.companyWebsite || 'Your Company Website',\n          poNumber: formData.poNumber || 'PO-001',\n          poDate: formData.poDate || new Date().toLocaleDateString(),\n          vendorCompany: formData.vendorCompany || 'Vendor Company',\n          vendorContact: formData.vendorContact || 'Vendor Contact',\n          vendorAddress: formData.vendorAddress || 'Vendor Address',\n          vendorCityState: formData.vendorCityState || 'City, ST ZIP',\n          vendorPhone: formData.vendorPhone || 'Vendor Phone',\n          shipToName: formData.shipToName || 'Ship To Name',\n          shipToCompany: formData.shipToCompany || 'Ship To Company',\n          shipToAddress: formData.shipToAddress || 'Ship To Address',\n          shipToCityState: formData.shipToCityState || 'City, ST ZIP',\n          shipToPhone: formData.shipToPhone || 'Ship To Phone',\n          shipToFax: formData.shipToFax || '',\n          requisitioner: formData.requisitioner || 'Requisitioner Name',\n          shipVia: formData.shipVia || 'Standard Shipping',\n          fob: formData.fob || 'FOB Origin',\n          shippingTerms: formData.shippingTerms || 'Net 30',\n          comments: formData.comments || 'No special instructions',\n          subtotal: formData.subtotal || '$0.00',\n          tax: formData.tax || '$0.00',\n          shipping: formData.shipping || '$0.00',\n          other: formData.other || '$0.00',\n          total: formData.total || '$0.00',\n          contactInfo: formData.contactInfo || 'Contact information here'\n        };\n      },\n      \n      getDynamicFieldMapping: () => {\n        return {\n          companyName: '[data-field-id=\"company-name\"]',\n          companyAddress: '[data-field-id=\"company-address\"]',\n          companyCityState: '[data-field-id=\"company-city-state\"]',\n          companyPhone: '[data-field-id=\"company-phone\"]',\n          companyFax: '[data-field-id=\"company-fax\"]',\n          companyWebsite: '[data-field-id=\"company-website\"]',\n          poNumber: '[data-field-id=\"po-number\"]',\n          poDate: '[data-field-id=\"po-date\"]',\n          vendorCompany: '[data-field-id=\"vendor-company\"]',\n          vendorContact: '[data-field-id=\"vendor-contact\"]',\n          vendorAddress: '[data-field-id=\"vendor-address\"]',\n          vendorCityState: '[data-field-id=\"vendor-city-state\"]',\n          vendorPhone: '[data-field-id=\"vendor-phone\"]',\n          shipToName: '[data-field-id=\"ship-to-name\"]',\n          shipToCompany: '[data-field-id=\"ship-to-company\"]',\n          shipToAddress: '[data-field-id=\"ship-to-address\"]',\n          shipToCityState: '[data-field-id=\"ship-to-city-state\"]',\n          shipToPhone: '[data-field-id=\"ship-to-phone\"]'\n        };\n      },\n      \n      findFieldByLabel: (label, section) => {\n        // Find fields by label and section\n        const elements = document.querySelectorAll('.editable-field');\n        for (let element of elements) {\n          const parentSection = element.closest('.section-header')?.textContent || '';\n          if (parentSection.toLowerCase().includes(section.toLowerCase()) && \n              element.textContent.toLowerCase().includes(label.toLowerCase())) {\n            return element;\n          }\n        }\n        return null;\n      }\n    };\n\n    // Create global functions for the modal\n    window.MAIN_APP = {\n      showError: (message) => {\n        setError(message);\n        setTimeout(() => setError(null), 5000);\n      },\n      showSuccess: (message) => {\n        // You can implement a success notification here\n        console.log('Success:', message);\n      }\n    };\n\n    // Create global currency formatter\n    window.CURRENCY_FORMATTER = {\n      format: (value) => {\n        if (!value || value.toString().trim() === '') return '$0.00';\n        const cleanValue = value.toString().replace(/[$,\\s]/g, '');\n        if (isNaN(cleanValue) || cleanValue === '') return '$0.00';\n        const number = parseFloat(cleanValue);\n        return '$' + number.toLocaleString('en-US', { \n          minimumFractionDigits: 2, \n          maximumFractionDigits: 2 \n        });\n      }\n    };\n\n    // Create global drag and drop module\n    window.DRAG_AND_DROP = {\n      getCurrentCommentsOrder: () => {\n        // Return the current order of comments and totals sections\n        return { leftSection: 'comments', rightSection: 'totals' };\n      }\n    };\n\n    // Load the XML generator module\n    loadXMLGeneratorModule();\n  };\n\n  // Load the XML generator module\n  const loadXMLGeneratorModule = () => {\n    const script = document.createElement('script');\n    script.textContent = `\n      // XML Generator Module for NetSuite Integration\n      window.XML_GENERATOR = {\n        // Convert form data to XML and display in modal\n        convertToXml: function() {\n          console.log('üîÑ Converting form to XML...');\n          \n          try {\n            const xmlContent = this.generateXml();\n            this.displayXmlModal(xmlContent);\n            console.log('‚úÖ XML conversion completed');\n          } catch (error) {\n            console.error('‚ùå XML conversion failed:', error);\n            if (window.MAIN_APP && window.MAIN_APP.showError) {\n              window.MAIN_APP.showError('Failed to generate XML. Please check the console for details.');\n            }\n          }\n        },\n\n        // Close the XML modal\n        closeXmlModal: function() {\n          if (window.MAIN_APP && window.MAIN_APP.closeModal) {\n            window.MAIN_APP.closeModal();\n          }\n        },\n\n        // Refresh XML display (called when rows are reordered)\n        refreshXmlDisplay: function() {\n          console.log('üîÑ Refreshing XML display...');\n          try {\n            const xmlContent = this.generateXml();\n            if (window.MAIN_APP && window.MAIN_APP.updateXmlContent) {\n              window.MAIN_APP.updateXmlContent(xmlContent);\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to refresh XML display:', error);\n          }\n        },\n\n        // Update XML preview in real-time\n        updateXmlPreview: function() {\n          console.log('üîÑ Updating XML preview...');\n          this.refreshXmlDisplay();\n        },\n\n        // Display XML content in modal\n        displayXmlModal: function(xmlContent) {\n          console.log('üîÑ displayXmlModal called');\n          if (window.MAIN_APP && window.MAIN_APP.updateXmlContent) {\n            window.MAIN_APP.updateXmlContent(xmlContent);\n          }\n        },\n\n        // Generate XML from current form data\n        generateXml: function() {\n          console.log('üöÄ Starting XML generation...');\n          \n          // Get field values from UTILS\n          let fieldValues;\n          if (window.UTILS && window.UTILS.getFieldValues) {\n            fieldValues = window.UTILS.getFieldValues();\n          } else {\n            fieldValues = this.getFieldValues();\n          }\n          \n          // Generate line items XML (simplified for React integration)\n          const lineItems = this.generateLineItemsFromFormData();\n          const lineItemsXml = this.generateLineItemsXml(lineItems);\n          \n          // Generate the complete XML\n          const headerBlockColor = this.getHeaderBlockColorHex();\n          \n          const xmlContent = \\`<?xml version=\"1.0\"?><!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"\\${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"\\${new Date().toISOString()}\"/>\n    <style>\n        * { font-family: Arial, Helvetica, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: \\${headerBlockColor}; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: \\${headerBlockColor}; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: \\${headerBlockColor}; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: \\${headerBlockColor}; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \\${this.generateHeaderXml(fieldValues)}\n    \\${this.generateVendorXml(fieldValues)}\n    \\${this.generateShippingXml(fieldValues)}\n    \\${lineItemsXml}\n    \\${this.generateCommentsXml(fieldValues)}\n    \\${this.generateContactInfoXml(fieldValues)}\n</body>\n</pdf>\\`;\n\n          console.log('‚úÖ XML generation completed');\n          return xmlContent;\n        },\n\n        // Generate header XML\n        generateHeaderXml: function(fieldValues) {\n          return \\`\n    <table>\n        <tr>\n            <td style=\"width: 65%; padding-right: 20px;\">\n                <table>\n                    <tr>\n                        <td class=\"header-company\">\\${this.escapeXml(fieldValues.companyName || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>\\${this.escapeXml(fieldValues.companyAddress || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>\\${this.escapeXml(fieldValues.companyCityState || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>Phone: \\${this.escapeXml(fieldValues.companyPhone || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>Fax: \\${this.escapeXml(fieldValues.companyFax || '')}</td>\n                    </tr>\n                    <tr>\n                        <td>Website: \\${this.escapeXml(fieldValues.companyWebsite || '')}</td>\n                    </tr>\n                </table>\n            </td>\n            <td style=\"width: 35%; padding-left: 20px;\" align=\"right\">\n                <table>\n                    <tr>\n                        <td class=\"header-title\">PURCHASE ORDER</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <table style=\"width: 100%;\">\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\">\\${this.escapeXml(fieldValues.poDate || '')}</td>\n                                </tr>\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\">\\${this.escapeXml(fieldValues.poNumber || '')}</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate vendor XML\n        generateVendorXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 20px;\">\n        <tr>\n            <td style=\"width: 50%;\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">VENDOR</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            \\${this.escapeXml(fieldValues.vendorCompany)}<br/>\n                            \\${this.escapeXml(fieldValues.vendorContact || '')}<br/>\n                            \\${this.escapeXml(fieldValues.vendorAddress)}<br/>\n                            \\${this.escapeXml(fieldValues.vendorCityState)}<br/>\n                            Phone: \\${this.escapeXml(fieldValues.vendorPhone)}<br/>\n                            Fax: \\${this.escapeXml(fieldValues.vendorFax || '')}\n                        </td>\n                    </tr>\n                </table>\n            </td>\n            <td style=\"width: 50%;\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">SHIP TO</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            \\${this.escapeXml(fieldValues.shipToName || '')}<br/>\n                            \\${this.escapeXml(fieldValues.shipToCompany || fieldValues.companyName)}<br/>\n                            \\${this.escapeXml(fieldValues.shipToAddress || fieldValues.companyAddress)}<br/>\n                            \\${this.escapeXml(fieldValues.shipToCityState || fieldValues.companyCityState)}<br/>\n                            Phone: \\${this.escapeXml(fieldValues.shipToPhone || fieldValues.companyPhone || '')}<br/>\n                            Fax: \\${this.escapeXml(fieldValues.shipToFax || '')}\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate shipping XML\n        generateShippingXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 15px;\">\n        <tr>\n            <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n            <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.requisitioner || '')}</td>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.shipVia || '')}</td>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.fob || '')}</td>\n            <td class=\"section-content\">\\${this.escapeXml(fieldValues.shippingTerms || '')}</td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate line items from form data\n        generateLineItemsFromFormData: function() {\n          // This would be populated from your form's line items\n          // For now, return a sample item\n          return [\n            {\n              item: 'Sample Item',\n              description: 'Sample Description',\n              quantity: '1',\n              rate: '10.00',\n              amount: '10.00'\n            }\n          ];\n        },\n\n        // Generate line items XML\n        generateLineItemsXml: function(lineItems) {\n          if (!lineItems || lineItems.length === 0) {\n            return '';\n          }\n          \n          let tableHeaders = \\`\n        <tr>\n            <td class=\"item-header\" align=\"center\" colspan=\"3\">ITEM#</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"12\">DESCRIPTION</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"2\">QTY</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"3\">RATE</td>\n            <td class=\"item-header\" align=\"center\" colspan=\"3\">AMOUNT</td>\n        </tr>\\`;\n          \n          let tableRows = '';\n          lineItems.forEach((item, index) => {\n            tableRows += \\`\\n        <tr>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"center\" colspan=\"3\">\\${this.escapeXml(item.item || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\">\\${this.escapeXml(item.description || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\">\\${this.escapeXml(item.quantity || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\">\\${this.escapeXml(item.rate || '')}</td>\\`;\n            tableRows += \\`\\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\">\\${this.escapeXml(item.amount || '')}</td>\\`;\n            tableRows += \\`\\n        </tr>\\`;\n          });\n          \n          return \\`\n    <table style=\"margin-top: 15px;\">\n        \\${tableHeaders}\\${tableRows}\n    </table>\\`;\n        },\n\n        // Generate comments XML\n        generateCommentsXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 15px;\">\n        <tr>\n            <td style=\"width: 70%; vertical-align: top;\">\n                <table style=\"width: 100%; border: 1px solid #e5e7eb;\">\n                    <tr>\n                        <td class=\"comments-header\">Comments or Special Instructions</td>\n                    </tr>\n                    <tr>\n                        <td class=\"comments-content\" style=\"padding: 15px; height: 120px; vertical-align: top;\">\\${this.escapeXml(fieldValues.comments || '')}</td>\n                    </tr>\n                </table>\n            </td>\n            <td style=\"width: 30%; padding: 0;\">\n                <table>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SUBTOTAL</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.subtotal || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TAX</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.tax || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SHIPPING</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.shipping || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">OTHER</td>\n                        <td class=\"total-label\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.other || ''))}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TOTAL</td>\n                        <td class=\"total-amount\" align=\"right\">\\${this.escapeXml(this.formatCurrency(fieldValues.total || ''))}</td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Generate contact info XML\n        generateContactInfoXml: function(fieldValues) {\n          return \\`\n    <table style=\"margin-top: 20px;\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\">\n                \\${this.formatContactInfo(fieldValues.contactInfo, fieldValues.companyName, fieldValues.companyPhone)}\n            </td>\n            <td style=\"width: 30%; text-align: center;\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\\`;\n        },\n\n        // Get header block color\n        getHeaderBlockColorHex: function() {\n          return '#333333';\n        },\n\n        // Format currency\n        formatCurrency: function(value) {\n          return window.CURRENCY_FORMATTER ? window.CURRENCY_FORMATTER.format(value) : '\\$0.00';\n        },\n\n        // Format contact info\n        formatContactInfo: function(contactInfo, companyName, companyPhone) {\n          if (!contactInfo) {\n            const fallback = \\`For questions about this purchase order, please contact \\${companyName || 'us'}\\`;\n            return this.escapeXml(companyPhone ? \\`\\${fallback} at \\${companyPhone}\\` : fallback);\n          }\n          return this.escapeXml(contactInfo.toString().trim());\n        },\n\n        // Escape XML\n        escapeXml: function(text) {\n          if (!text) return '';\n          return text.replace(/&/g, '&amp;')\n                    .replace(/</g, '&lt;')\n                    .replace(/>/g, '&gt;')\n                    .replace(/\"/g, '&quot;')\n                    .replace(/'/g, '&apos;');\n        },\n\n        // Get field values (fallback)\n        getFieldValues: function() {\n          return window.UTILS ? window.UTILS.getFieldValues() : {};\n        }\n      };\n\n      // Global functions for the modal\n      window.closeXmlModal = function() {\n        if (window.MAIN_APP && window.MAIN_APP.closeModal) {\n          window.MAIN_APP.closeModal();\n        }\n      };\n\n      window.copyXmlToClipboard = function() {\n        const xmlText = window.MAIN_APP ? window.MAIN_APP.getXmlContent() : '';\n        if (navigator.clipboard && navigator.clipboard.writeText) {\n          navigator.clipboard.writeText(xmlText).then(() => {\n            if (window.MAIN_APP && window.MAIN_APP.showSuccess) {\n              window.MAIN_APP.showSuccess('XML copied to clipboard!');\n            }\n          }).catch(err => {\n            console.error('Failed to copy XML to clipboard:', err);\n          });\n        }\n      };\n\n      window.downloadXml = function() {\n        const xmlText = window.MAIN_APP ? window.MAIN_APP.getXmlContent() : '';\n        const blob = new Blob([xmlText], { type: 'application/xml' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'purchase-order.xml';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        \n        if (window.MAIN_APP && window.MAIN_APP.showSuccess) {\n          window.MAIN_APP.showSuccess('XML file downloaded!');\n        }\n      };\n\n      console.log('‚úÖ XML Generator module loaded successfully');\n    `;\n    \n    document.head.appendChild(script);\n  };\n\n  // Generate XML when modal opens\n  useEffect(() => {\n    if (isOpen && window.XML_GENERATOR) {\n      generateXML();\n    }\n  }, [isOpen, formData]);\n\n  // Generate XML content\n  const generateXML = async () => {\n    setIsGenerating(true);\n    setError(null);\n    \n    try {\n      if (window.XML_GENERATOR) {\n        const xml = window.XML_GENERATOR.generateXml();\n        setXmlContent(xml);\n        \n        // Update MAIN_APP functions\n        window.MAIN_APP.updateXmlContent = (content) => setXmlContent(content);\n        window.MAIN_APP.closeModal = onClose;\n        window.MAIN_APP.getXmlContent = () => xmlContent;\n      }\n    } catch (err) {\n      setError('Failed to generate XML: ' + err.message);\n      console.error('XML generation error:', err);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Handle refresh\n  const handleRefresh = () => {\n    if (onRefresh) {\n      onRefresh();\n    }\n    generateXML();\n  };\n\n  // Handle copy to clipboard\n  const handleCopyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(xmlContent);\n      // You can add a success notification here\n    } catch (err) {\n      console.error('Failed to copy to clipboard:', err);\n    }\n  };\n\n  // Handle download\n  const handleDownload = () => {\n    const blob = new Blob([xmlContent], { type: 'application/xml' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'purchase-order.xml';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"xml-modal-overlay\" onClick={onClose}>\n      <div className=\"xml-modal\" ref={modalRef} onClick={(e) => e.stopPropagation()}>\n        <div className=\"xml-modal-header\">\n          <h2>üìÑ XML Generator</h2>\n          <button className=\"close-btn\" onClick={onClose}>√ó</button>\n        </div>\n        \n        <div className=\"xml-modal-content\">\n          {error && (\n            <div className=\"error-message\">\n              ‚ùå {error}\n            </div>\n          )}\n          \n          <div className=\"xml-controls\">\n            <button \n              className=\"btn refresh-btn\" \n              onClick={handleRefresh}\n              disabled={isGenerating}\n            >\n              üîÑ Refresh XML\n            </button>\n            <button \n              className=\"btn copy-btn\" \n              onClick={handleCopyToClipboard}\n              disabled={!xmlContent}\n            >\n              üìã Copy to Clipboard\n            </button>\n            <button \n              className=\"btn download-btn\" \n              onClick={handleDownload}\n              disabled={!xmlContent}\n            >\n              üíæ Download XML\n            </button>\n          </div>\n          \n          <div className=\"xml-output-container\">\n            <div className=\"xml-output-header\">\n              <h3>Generated XML</h3>\n              <span className=\"xml-info\">\n                {xmlContent ? `${xmlContent.length} characters` : 'No XML generated'}\n              </span>\n            </div>\n            \n            <div className=\"xml-output\" ref={xmlOutputRef}>\n              {isGenerating ? (\n                <div className=\"loading\">üîÑ Generating XML...</div>\n              ) : xmlContent ? (\n                <pre className=\"xml-content\">{xmlContent}</pre>\n              ) : (\n                <div className=\"no-content\">No XML content available</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default XMLGeneratorModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}