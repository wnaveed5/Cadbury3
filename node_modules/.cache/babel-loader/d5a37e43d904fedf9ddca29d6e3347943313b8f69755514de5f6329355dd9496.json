{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSensor, useSensors, PointerSensor, KeyboardSensor } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates, arrayMove } from '@dnd-kit/sortable';\nexport function useDragAndDropSensors() {\n  _s();\n  var _pointerSensor$constr, _keyboardSensor$const;\n  console.log('ðŸ”§ Creating sensors...');\n  const pointerSensor = useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 3,\n      // Reduce from 8px to 3px for easier activation\n      tolerance: 2 // Reduce tolerance for more responsive dragging\n    }\n  });\n  const keyboardSensor = useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  });\n  console.log('ðŸ”§ Individual sensors:', {\n    pointerSensor: pointerSensor,\n    keyboardSensor: keyboardSensor,\n    pointerSensorType: pointerSensor === null || pointerSensor === void 0 ? void 0 : (_pointerSensor$constr = pointerSensor.constructor) === null || _pointerSensor$constr === void 0 ? void 0 : _pointerSensor$constr.name,\n    keyboardSensorType: keyboardSensor === null || keyboardSensor === void 0 ? void 0 : (_keyboardSensor$const = keyboardSensor.constructor) === null || _keyboardSensor$const === void 0 ? void 0 : _keyboardSensor$const.name\n  });\n  const sensors = useSensors(pointerSensor, keyboardSensor);\n  console.log('ðŸ”§ Sensors created:', {\n    sensors: sensors,\n    sensorCount: sensors.length,\n    sensorTypes: sensors.map(s => s.name || s.constructor.name),\n    hasPointerSensor: sensors.some(s => s.name === 'PointerSensor' || s.constructor.name === 'PointerSensor'),\n    hasKeyboardSensor: sensors.some(s => s.name === 'KeyboardSensor' || s.constructor.name === 'KeyboardSensor'),\n    timestamp: new Date().toISOString()\n  });\n  return sensors;\n}\n_s(useDragAndDropSensors, \"tgdR9Inv1mpltQwo4l07Lioqxf8=\", false, function () {\n  return [useSensor, useSensor, useSensors];\n});\nexport function useCompanyFieldsDragEnd(setCompanyFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      console.log('ðŸ”„ Company field drag detected:', {\n        active: active.id,\n        over: over.id\n      });\n      setCompanyFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        console.log('ðŸ”„ Company field indices:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('ðŸ”„ New company field order:', newOrder.map(f => f.id));\n        return newOrder;\n      });\n    }\n  };\n}\nexport function usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setPurchaseOrderFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\nexport function useVendorFieldsDragEnd(setVendorFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setVendorFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\nexport function useShipToFieldsDragEnd(setShipToFields) {\n  return event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setShipToFields(items => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}","map":{"version":3,"names":["useSensor","useSensors","PointerSensor","KeyboardSensor","sortableKeyboardCoordinates","arrayMove","useDragAndDropSensors","_s","_pointerSensor$constr","_keyboardSensor$const","console","log","pointerSensor","activationConstraint","distance","tolerance","keyboardSensor","coordinateGetter","pointerSensorType","constructor","name","keyboardSensorType","sensors","sensorCount","length","sensorTypes","map","s","hasPointerSensor","some","hasKeyboardSensor","timestamp","Date","toISOString","useCompanyFieldsDragEnd","setCompanyFields","event","active","over","id","items","oldIndex","findIndex","field","newIndex","newOrder","f","usePurchaseOrderFieldsDragEnd","setPurchaseOrderFields","useVendorFieldsDragEnd","setVendorFields","useShipToFieldsDragEnd","setShipToFields"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useDragAndDrop.js"],"sourcesContent":["import { useSensor, useSensors, PointerSensor, KeyboardSensor } from '@dnd-kit/core';\nimport { sortableKeyboardCoordinates, arrayMove } from '@dnd-kit/sortable';\n\nexport function useDragAndDropSensors() {\n  console.log('ðŸ”§ Creating sensors...');\n  \n  const pointerSensor = useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 3, // Reduce from 8px to 3px for easier activation\n      tolerance: 2, // Reduce tolerance for more responsive dragging\n    },\n  });\n  \n  const keyboardSensor = useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates,\n  });\n  \n  console.log('ðŸ”§ Individual sensors:', {\n    pointerSensor: pointerSensor,\n    keyboardSensor: keyboardSensor,\n    pointerSensorType: pointerSensor?.constructor?.name,\n    keyboardSensorType: keyboardSensor?.constructor?.name\n  });\n  \n  const sensors = useSensors(pointerSensor, keyboardSensor);\n  \n  console.log('ðŸ”§ Sensors created:', {\n    sensors: sensors,\n    sensorCount: sensors.length,\n    sensorTypes: sensors.map(s => s.name || s.constructor.name),\n    hasPointerSensor: sensors.some(s => s.name === 'PointerSensor' || s.constructor.name === 'PointerSensor'),\n    hasKeyboardSensor: sensors.some(s => s.name === 'KeyboardSensor' || s.constructor.name === 'KeyboardSensor'),\n    timestamp: new Date().toISOString()\n  });\n  \n  return sensors;\n}\n\n\n\nexport function useCompanyFieldsDragEnd(setCompanyFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      console.log('ðŸ”„ Company field drag detected:', { active: active.id, over: over.id });\n      setCompanyFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        console.log('ðŸ”„ Company field indices:', { oldIndex, newIndex });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('ðŸ”„ New company field order:', newOrder.map(f => f.id));\n        \n        return newOrder;\n      });\n    }\n  };\n}\n\nexport function usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setPurchaseOrderFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n\nexport function useVendorFieldsDragEnd(setVendorFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setVendorFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n\nexport function useShipToFieldsDragEnd(setShipToFields) {\n  return (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setShipToFields((items) => {\n        const oldIndex = items.findIndex(field => field.id === active.id);\n        const newIndex = items.findIndex(field => field.id === over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}