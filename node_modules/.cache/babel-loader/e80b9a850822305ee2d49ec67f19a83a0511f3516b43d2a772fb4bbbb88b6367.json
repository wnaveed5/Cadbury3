{"ast":null,"code":"// AI provider hook - uses OpenAI Chat Completions (3.5-turbo JSON mode)\n// NOTE: Exposing API keys in a browser is insecure. Prefer a small server proxy.\nexport function useAIProvider(){const apiKey=process.env.REACT_APP_OPENAI_API_KEY;const MODEL='gpt-3.5-turbo-0125';// 3.5 model that supports JSON mode; fallback below\nasync function getFieldSuggestions(payload){if(!apiKey){throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');}// Defensive helpers\nconst arr=v=>Array.isArray(v)?v:[];const safeMap=(xs,fn)=>arr(xs).map(fn).filter(Boolean);const todayUS=new Date().toLocaleDateString('en-US',{timeZone:'America/Chicago'});// Build the \"example schema\" segment safely (avoid 'undefined' strings)\nconst schemaLines=[].concat(safeMap(payload===null||payload===void 0?void 0:payload.companyFields,f=>\"\\\"\".concat(f.id,\"\\\": \\\"string\\\"\"))).concat(safeMap(payload===null||payload===void 0?void 0:payload.purchaseOrderFields,f=>\"\\\"\".concat(f.id,\"\\\": \\\"string\\\"\"))).concat(safeMap(payload===null||payload===void 0?void 0:payload.vendorFields,f=>\"\\\"\".concat(f.id,\"\\\": \\\"string\\\"\"))).concat(safeMap(payload===null||payload===void 0?void 0:payload.shipToFields,f=>\"\\\"\".concat(f.id,\"\\\": \\\"string\\\"\")));const messages=[{role:'system',content:\"You are a professional business data generator. Output ONLY valid JSON (no code fences, no prose).\\nGenerate realistic purchase order data for a US company.\\n\\nRules:\\n- Use real US cities and professional formatting.\\n- Monetary fields MUST have exactly one leading dollar sign, e.g., \\\"$1,234.56\\\".\\n- Do NOT prefix any amount with more than one \\\"$\\\".\\n- Return ONLY a single JSON object (no arrays, no extra text).\"},{role:'user',content:\"Generate a complete purchase order for a medium enterprise in the general business industry.\\n\\nConstraints:\\n- PO date: today (America/Chicago)\\n- Use real US cities and professional formatting\\n- 3 line items\\n- Totals: subtotal, 8.5% tax, shipping in $25\\u2013$75 range, \\\"other\\\" (may be \\\"$0.00\\\"), total must add up\\n- Every money value must have exactly one \\\"$\\\" (e.g., \\\"$1,234.56\\\")\\n\\nReturn ONLY a single JSON object with these exact keys:\\n\\n{\\n  \".concat(schemaLines.join(',\\n  ')).concat(schemaLines.length?',':'',\"\\n\\n  \\\"requisitioner\\\": \\\"string\\\",\\n  \\\"shipVia\\\": \\\"string\\\",\\n  \\\"fob\\\": \\\"string\\\",\\n  \\\"shippingTerms\\\": \\\"string\\\",\\n\\n  \\\"itemNumber1\\\": \\\"string\\\",\\n  \\\"description1\\\": \\\"string\\\",\\n  \\\"qty1\\\": \\\"string\\\",\\n  \\\"rate1\\\": \\\"string\\\",\\n  \\\"amount1\\\": \\\"string\\\",\\n\\n  \\\"itemNumber2\\\": \\\"string\\\",\\n  \\\"description2\\\": \\\"string\\\",\\n  \\\"qty2\\\": \\\"string\\\",\\n  \\\"rate2\\\": \\\"string\\\",\\n  \\\"amount2\\\": \\\"string\\\",\\n\\n  \\\"itemNumber3\\\": \\\"string\\\",\\n  \\\"description3\\\": \\\"string\\\",\\n  \\\"qty3\\\": \\\"string\\\",\\n  \\\"rate3\\\": \\\"string\\\",\\n  \\\"amount3\\\": \\\"string\\\",\\n\\n  \\\"subtotal\\\": \\\"string\\\",   // with $ sign\\n  \\\"tax\\\": \\\"string\\\",        // with $ sign\\n  \\\"shipping\\\": \\\"string\\\",   // with $ sign\\n  \\\"other\\\": \\\"string\\\",      // with $ sign\\n  \\\"total\\\": \\\"string\\\",      // with $ sign\\n\\n  \\\"comments\\\": \\\"string\\\",\\n  \\\"contactInfo\\\": \\\"string\\\"\\n}\")}];// Single call (JSON mode) + robust parsing\ntry{var _data$choices,_data$choices$,_data$choices$$messag;const controller=new AbortController();const timeout=setTimeout(()=>controller.abort(),60000);const body=JSON.stringify({model:MODEL,messages,temperature:0.2,// Ask 3.5 to produce a strict JSON object\nresponse_format:{type:'json_object'},max_tokens:1500});let response=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{'Authorization':\"Bearer \".concat(apiKey),'Content-Type':'application/json'},body,signal:controller.signal});// Simple model fallback if needed\nif(response.status===404||response.status===400){const bodyFallback=JSON.stringify({model:'gpt-3.5-turbo',// legacy alias, if enabled on your account\nmessages,temperature:0.2,response_format:{type:'json_object'},max_tokens:1500});response=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{'Authorization':\"Bearer \".concat(apiKey),'Content-Type':'application/json'},body:bodyFallback,signal:controller.signal});}clearTimeout(timeout);if(!response.ok){let errTxt='';try{errTxt=JSON.stringify(await response.json());}catch(_unused){}throw new Error(\"OpenAI API error: \".concat(errTxt||response.statusText));}const data=await response.json();console.debug('🧪 OpenAI chat data:',data);// Extract content safely\nlet content=data===null||data===void 0?void 0:(_data$choices=data.choices)===null||_data$choices===void 0?void 0:(_data$choices$=_data$choices[0])===null||_data$choices$===void 0?void 0:(_data$choices$$messag=_data$choices$.message)===null||_data$choices$$messag===void 0?void 0:_data$choices$$messag.content;if(typeof content!=='string'||!content.trim()){throw new Error('No response content from OpenAI');}// Strip accidental code fences just in case\nlet cleaned=content.trim();if(cleaned.startsWith('```')){cleaned=cleaned.replace(/^```(?:json)?\\s*/i,'').replace(/```$/i,'').trim();}// Verbose logging to inspect raw/cleaned text\ntry{console.debug('🧪 Raw message.content length:',content.length);console.debug('🧪 Cleaned JSON text (first 2000 chars):',cleaned.slice(0,2000));}catch(_unused2){}// Parse JSON; if it fails, try to salvage the first {...} block\nlet parsed;try{parsed=JSON.parse(cleaned);}catch(e){console.warn('⚠️ JSON.parse failed on cleaned text. Attempting salvage...',e);const first=cleaned.indexOf('{');const last=cleaned.lastIndexOf('}');if(first!==-1&&last>first){parsed=JSON.parse(cleaned.slice(first,last+1));}else{throw e;}}// Whitelist to known fields and fuzzy-match by label\nconst allFields=[...arr(payload===null||payload===void 0?void 0:payload.companyFields),...arr(payload===null||payload===void 0?void 0:payload.purchaseOrderFields),...arr(payload===null||payload===void 0?void 0:payload.vendorFields),...arr(payload===null||payload===void 0?void 0:payload.shipToFields),...arr(payload===null||payload===void 0?void 0:payload.shippingFields)];// Include fixed keys that aren't in React state arrays (line items, totals, comments)\nconst fixedExtraIds=[// Line items (first 3 rows)\n'itemNumber1','description1','qty1','rate1','amount1','itemNumber2','description2','qty2','rate2','amount2','itemNumber3','description3','qty3','rate3','amount3',// Totals\n'subtotal','tax','shipping','other','total',// Comments / contact\n'comments','contactInfo'];const allowedIds=new Set([...allFields.map(f=>f.id),...fixedExtraIds]);const normalize=s=>String(s||'').toLowerCase().replace(/[`\"'']/g,'').replace(/\\s+/g,' ').trim().replace(/[^a-z0-9]+/g,'');const labelToId=Object.fromEntries(allFields.map(f=>[normalize(f.label||f.id),f.id]));const coerceToString=v=>{if(typeof v==='string')return v;if(typeof v==='number'||typeof v==='boolean')return String(v);if(v&&typeof v==='object'){if(typeof v.value==='string')return v.value;if(typeof v.text==='string')return v.text;}return undefined;};const suggestions={};for(const[rawKey,rawVal]of Object.entries(parsed||{})){const value=coerceToString(rawVal);if(value===undefined)continue;if(allowedIds.has(rawKey)){suggestions[rawKey]=value;continue;}const maybeId=labelToId[normalize(rawKey)];if(maybeId&&allowedIds.has(maybeId)){suggestions[maybeId]=value;}}try{console.debug('🧪 Parsed keys from model:',Object.keys(parsed||{}));console.debug('🧪 Suggestions keys (whitelisted to known IDs):',Object.keys(suggestions));console.debug('🧪 Suggestions preview (first 2000 chars):',JSON.stringify(suggestions,null,2).slice(0,2000));}catch(_unused3){}return{suggestions};}catch(error){console.error('OpenAI API call failed:',error);throw error;}}return{getFieldSuggestions};}","map":{"version":3,"names":["useAIProvider","apiKey","process","env","REACT_APP_OPENAI_API_KEY","MODEL","getFieldSuggestions","payload","Error","arr","v","Array","isArray","safeMap","xs","fn","map","filter","Boolean","todayUS","Date","toLocaleDateString","timeZone","schemaLines","concat","companyFields","f","id","purchaseOrderFields","vendorFields","shipToFields","messages","role","content","join","length","_data$choices","_data$choices$","_data$choices$$messag","controller","AbortController","timeout","setTimeout","abort","body","JSON","stringify","model","temperature","response_format","type","max_tokens","response","fetch","method","headers","signal","status","bodyFallback","clearTimeout","ok","errTxt","json","_unused","statusText","data","console","debug","choices","message","trim","cleaned","startsWith","replace","slice","_unused2","parsed","parse","e","warn","first","indexOf","last","lastIndexOf","allFields","shippingFields","fixedExtraIds","allowedIds","Set","normalize","s","String","toLowerCase","labelToId","Object","fromEntries","label","coerceToString","value","text","undefined","suggestions","rawKey","rawVal","entries","has","maybeId","keys","_unused3","error"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useAIProvider.js"],"sourcesContent":["// AI provider hook - uses OpenAI Chat Completions (3.5-turbo JSON mode)\n// NOTE: Exposing API keys in a browser is insecure. Prefer a small server proxy.\n\nexport function useAIProvider() {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  const MODEL = 'gpt-3.5-turbo-0125'; // 3.5 model that supports JSON mode; fallback below\n\n  async function getFieldSuggestions(payload) {\n    if (!apiKey) {\n      throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');\n    }\n\n    // Defensive helpers\n    const arr = (v) => Array.isArray(v) ? v : [];\n    const safeMap = (xs, fn) => arr(xs).map(fn).filter(Boolean);\n    const todayUS = new Date().toLocaleDateString('en-US', { timeZone: 'America/Chicago' });\n\n    // Build the \"example schema\" segment safely (avoid 'undefined' strings)\n    const schemaLines = []\n      .concat(safeMap(payload?.companyFields, f => `\"${f.id}\": \"string\"`))\n      .concat(safeMap(payload?.purchaseOrderFields, f => `\"${f.id}\": \"string\"`))\n      .concat(safeMap(payload?.vendorFields, f => `\"${f.id}\": \"string\"`))\n      .concat(safeMap(payload?.shipToFields, f => `\"${f.id}\": \"string\"`));\n\n    const messages = [\n      {\n        role: 'system',\n        content:\n`You are a professional business data generator. Output ONLY valid JSON (no code fences, no prose).\nGenerate realistic purchase order data for a US company.\n\nRules:\n- Use real US cities and professional formatting.\n- Monetary fields MUST have exactly one leading dollar sign, e.g., \"$1,234.56\".\n- Do NOT prefix any amount with more than one \"$\".\n- Return ONLY a single JSON object (no arrays, no extra text).`\n      },\n              {\n          role: 'user',\n          content:\n`Generate a complete purchase order for a medium enterprise in the general business industry.\n\nConstraints:\n- PO date: today (America/Chicago)\n- Use real US cities and professional formatting\n- 3 line items\n- Totals: subtotal, 8.5% tax, shipping in $25–$75 range, \"other\" (may be \"$0.00\"), total must add up\n- Every money value must have exactly one \"$\" (e.g., \"$1,234.56\")\n\nReturn ONLY a single JSON object with these exact keys:\n\n{\n  ${schemaLines.join(',\\n  ')}${schemaLines.length ? ',' : ''}\n\n  \"requisitioner\": \"string\",\n  \"shipVia\": \"string\",\n  \"fob\": \"string\",\n  \"shippingTerms\": \"string\",\n\n  \"itemNumber1\": \"string\",\n  \"description1\": \"string\",\n  \"qty1\": \"string\",\n  \"rate1\": \"string\",\n  \"amount1\": \"string\",\n\n  \"itemNumber2\": \"string\",\n  \"description2\": \"string\",\n  \"qty2\": \"string\",\n  \"rate2\": \"string\",\n  \"amount2\": \"string\",\n\n  \"itemNumber3\": \"string\",\n  \"description3\": \"string\",\n  \"qty3\": \"string\",\n  \"rate3\": \"string\",\n  \"amount3\": \"string\",\n\n  \"subtotal\": \"string\",   // with $ sign\n  \"tax\": \"string\",        // with $ sign\n  \"shipping\": \"string\",   // with $ sign\n  \"other\": \"string\",      // with $ sign\n  \"total\": \"string\",      // with $ sign\n\n  \"comments\": \"string\",\n  \"contactInfo\": \"string\"\n}`\n      }\n    ];\n\n    // Single call (JSON mode) + robust parsing\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 60_000);\n\n      const body = JSON.stringify({\n        model: MODEL,\n        messages,\n        temperature: 0.2,\n        // Ask 3.5 to produce a strict JSON object\n        response_format: { type: 'json_object' },\n        max_tokens: 1500\n      });\n\n      let response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body,\n        signal: controller.signal\n      });\n\n      // Simple model fallback if needed\n      if (response.status === 404 || response.status === 400) {\n        const bodyFallback = JSON.stringify({\n          model: 'gpt-3.5-turbo', // legacy alias, if enabled on your account\n          messages,\n          temperature: 0.2,\n          response_format: { type: 'json_object' },\n          max_tokens: 1500\n        });\n        response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: bodyFallback,\n          signal: controller.signal\n        });\n      }\n\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        let errTxt = '';\n        try { errTxt = JSON.stringify(await response.json()); } catch {}\n        throw new Error(`OpenAI API error: ${errTxt || response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.debug('🧪 OpenAI chat data:', data);\n\n      // Extract content safely\n      let content = data?.choices?.[0]?.message?.content;\n      if (typeof content !== 'string' || !content.trim()) {\n        throw new Error('No response content from OpenAI');\n      }\n\n      // Strip accidental code fences just in case\n      let cleaned = content.trim();\n      if (cleaned.startsWith('```')) {\n        cleaned = cleaned.replace(/^```(?:json)?\\s*/i, '').replace(/```$/i, '').trim();\n      }\n\n      // Verbose logging to inspect raw/cleaned text\n      try {\n        console.debug('🧪 Raw message.content length:', content.length);\n        console.debug('🧪 Cleaned JSON text (first 2000 chars):', cleaned.slice(0, 2000));\n      } catch {}\n\n      // Parse JSON; if it fails, try to salvage the first {...} block\n      let parsed;\n      try {\n        parsed = JSON.parse(cleaned);\n      } catch (e) {\n        console.warn('⚠️ JSON.parse failed on cleaned text. Attempting salvage...', e);\n        const first = cleaned.indexOf('{');\n        const last = cleaned.lastIndexOf('}');\n        if (first !== -1 && last > first) {\n          parsed = JSON.parse(cleaned.slice(first, last + 1));\n        } else {\n          throw e;\n        }\n      }\n\n      // Whitelist to known fields and fuzzy-match by label\n      const allFields = [\n        ...arr(payload?.companyFields),\n        ...arr(payload?.purchaseOrderFields),\n        ...arr(payload?.vendorFields),\n        ...arr(payload?.shipToFields),\n        ...arr(payload?.shippingFields)\n      ];\n\n      // Include fixed keys that aren't in React state arrays (line items, totals, comments)\n      const fixedExtraIds = [\n        // Line items (first 3 rows)\n        'itemNumber1','description1','qty1','rate1','amount1',\n        'itemNumber2','description2','qty2','rate2','amount2',\n        'itemNumber3','description3','qty3','rate3','amount3',\n        // Totals\n        'subtotal','tax','shipping','other','total',\n        // Comments / contact\n        'comments','contactInfo'\n      ];\n\n      const allowedIds = new Set([\n        ...allFields.map(f => f.id),\n        ...fixedExtraIds\n      ]);\n      const normalize = (s) => String(s || '')\n        .toLowerCase()\n        .replace(/[`\"'']/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim()\n        .replace(/[^a-z0-9]+/g, '');\n\n      const labelToId = Object.fromEntries(\n        allFields.map(f => [normalize(f.label || f.id), f.id])\n      );\n\n      const coerceToString = (v) => {\n        if (typeof v === 'string') return v;\n        if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n        if (v && typeof v === 'object') {\n          if (typeof v.value === 'string') return v.value;\n          if (typeof v.text === 'string') return v.text;\n        }\n        return undefined;\n      };\n\n      const suggestions = {};\n      for (const [rawKey, rawVal] of Object.entries(parsed || {})) {\n        const value = coerceToString(rawVal);\n        if (value === undefined) continue;\n\n        if (allowedIds.has(rawKey)) {\n          suggestions[rawKey] = value;\n          continue;\n        }\n        const maybeId = labelToId[normalize(rawKey)];\n        if (maybeId && allowedIds.has(maybeId)) {\n          suggestions[maybeId] = value;\n        }\n      }\n      try {\n        console.debug('🧪 Parsed keys from model:', Object.keys(parsed || {}));\n        console.debug('🧪 Suggestions keys (whitelisted to known IDs):', Object.keys(suggestions));\n        console.debug('🧪 Suggestions preview (first 2000 chars):', JSON.stringify(suggestions, null, 2).slice(0, 2000));\n      } catch {}\n\n      return { suggestions };\n    } catch (error) {\n      console.error('OpenAI API call failed:', error);\n      throw error;\n    }\n  }\n\n  return { getFieldSuggestions };\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}