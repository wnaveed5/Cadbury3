{"ast":null,"code":"// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('ðŸš€ DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('ðŸ“… Template updated at:', new Date().toISOString());\n  console.log('ðŸ“Š Form data received:', formData);\n\n  // Ensure formData exists and has required properties\n  const data = formData || {};\n\n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n\n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [staticId, `company-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [staticId, `po-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [staticId, `vendor-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [staticId, `ship-to-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [`.shipping-field-${fieldType} .editable-field`, `.shipping-field[data-field=\"${fieldType}\"] .editable-field`, `.shipping-${fieldType} .editable-field`, `#shipping-${fieldType}`, `[data-shipping-field=\"${fieldType}\"]`];\n\n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    const possibleSelectors = [`#line-item-${rowIndex}-${fieldType}`, `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`];\n\n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = fieldType => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [`#total-${fieldType}`, `.total-${fieldType} .editable-field`, `.total-row[data-field=\"${fieldType}\"] .editable-field`, `.totals-section .${fieldType}-field .editable-field`];\n\n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = ['#comments-field', '.comments-content .editable-field', '.comments-section .editable-field', '[data-field=\"comments\"]'];\n\n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = ['#contact-info-field', '.contact-section .editable-field', '.contact-info .editable-field', '[data-field=\"contactInfo\"]'];\n\n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n\n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    <table>\n        <tr>\n            \n            <td style=\"width: 65%; padding-right: 20px;\" data-section=\"company-info\">\n                <table>\n                    <tr>\n                        <td class=\"header-company\" style=\"text-align: left;\" data-field=\"company-name\">${getCompanyFieldValue('company-name', '[Company Name]')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-address\">${getCompanyFieldValue('company-address', '[Street Address]')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-city-state\">${getCompanyFieldValue('company-city-state', '[City, ST ZIP]')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-phone\">Phone: ${getCompanyFieldValue('company-phone', '(000) 000-0000')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-fax\">Fax: ${getCompanyFieldValue('company-fax', '(000) 000-0000')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-website\">Website: ${getCompanyFieldValue('company-website', 'www.example.com')}</td>\n                    </tr>\n                </table>\n            </td>\n            \n            <td style=\"width: 35%; padding-left: 20px;\" align=\"right\" data-section=\"purchase-order-info\">\n                <table>\n                    <tr>\n                        <td class=\"header-title\" style=\"text-align: right;\" data-field=\"po-title\">${getPOFieldValue('po-title', 'PURCHASE ORDER')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: right;\">\n                            <table style=\"width: 100%;\">\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${getPOFieldValue('po-date', 'MM/DD/YYYY')}</td>\n                                </tr>\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${getPOFieldValue('po-number', '[PO Number]')}</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n            \n            <td style=\"width: 50%;\" data-subsection=\"vendor\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">VENDOR</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            <span data-field=\"vendor-company\">${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br/>\n                            <span data-field=\"vendor-contact\">${getVendorFieldValue('vendor-contact', '[Contact Person]')}</span><br/>\n                            <span data-field=\"vendor-address\">${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br/>\n                            <span data-field=\"vendor-city-state\">${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br/>\n                            Phone: <span data-field=\"vendor-phone\">${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br/>\n                            Fax: <span data-field=\"vendor-fax\">${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n            \n            <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">SHIP TO</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            <span data-field=\"ship-to-name\">${getShipToFieldValue('ship-to-name', '[Contact Name]')}</span><br/>\n                            <span data-field=\"ship-to-company\">${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br/>\n                            <span data-field=\"ship-to-address\">${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br/>\n                            <span data-field=\"ship-to-city-state\">${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br/>\n                            Phone: <span data-field=\"ship-to-phone\">${getShipToFieldValue('ship-to-phone', '(000) 000-0000')}</span><br/>\n                            Fax: <span data-field=\"ship-to-fax\">${getShipToFieldValue('ship-to-fax', '(000) 000-0000')}</span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n\n    <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n            <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n            <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n            <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n            <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n            <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n            <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n    </table>\n\n\n    <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n            <td class=\"item-header\" align=\"left\" colspan=\"3\">ITEM</td><td class=\"item-header\" align=\"left\" colspan=\"12\">DESCRIPTION</td><td class=\"item-header\" align=\"center\" colspan=\"2\">QUANTITY</td><td class=\"item-header\" align=\"right\" colspan=\"3\">RATE</td><td class=\"item-header\" align=\"right\" colspan=\"3\">AMOUNT</td>\n        </tr>\n        ${generateLineItemsXML()}\n    </table>\n\n\n    <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n            \n            <td style=\"width: 70%; vertical-align: top;\" data-subsection=\"comments\">\n                <table style=\"width: 100%; border: 1px solid #e5e7eb;\">\n                    <tr>\n                        <td class=\"comments-header\">Comments or Special Instructions</td>\n                    </tr>\n                    <tr>\n                        <td class=\"comments-content\" style=\"padding: 15px; height: 120px; vertical-align: top;\" data-field=\"comments\">${getCommentsValue('')}</td>\n                    </tr>\n                </table>\n            </td>\n            \n            <td style=\"width: 30%; padding: 0;\" data-subsection=\"totals\">\n                <table>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SUBTOTAL</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"subtotal\">${getTotalFieldValue('subtotal', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TAX</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"tax\">${getTotalFieldValue('tax', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SHIPPING</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"shipping-total\">${getTotalFieldValue('shipping', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">OTHER</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"other\">${getTotalFieldValue('other', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TOTAL</td>\n                        <td class=\"total-amount\" align=\"right\" data-field=\"total\">${getTotalFieldValue('total', '$0.00')}</td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n  console.log('âœ… NEW TEMPLATE: XML generated successfully with NetSuite structure');\n  console.log('ðŸ“„ XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    fields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website']\n  },\n  purchaseOrder: {\n    fields: ['po-title', 'po-date', 'po-number']\n  },\n  vendor: {\n    fields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax']\n  },\n  shipTo: {\n    fields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone']\n  },\n  shipping: {\n    fields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms']\n  },\n  items: {\n    fields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total']\n  },\n  totals: {\n    fields: ['subtotal', 'tax', 'shipping', 'other', 'total']\n  },\n  comments: {\n    fields: ['comments']\n  },\n  contact: {\n    fields: ['contactInfo']\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}","map":{"version":3,"names":["generatePurchaseOrderXML","formData","console","log","Date","toISOString","data","getFieldValue","fieldName","defaultValue","getDynamicFieldValue","fieldArray","possibleIds","Array","isArray","fieldId","field","find","f","id","value","getCompanyFieldValue","staticId","companyFields","now","filter","includes","replace","map","getPOFieldValue","purchaseOrderFields","getVendorFieldValue","vendorFields","getShipToFieldValue","shipToFields","getShippingFieldValue","fieldType","possibleSelectors","selector","element","document","querySelector","textContent","trim","getLineItemValue","rowIndex","getColumnIndex","lineItems","columnMap","itemNumber","description","quantity","unitPrice","total","getTotalFieldValue","getCommentsValue","comments","getContactInfoValue","contactInfo","generateLineItemsXML","maxRows","fill","_","index","join","xml","substring","purchaseOrderTemplate","companyInfo","fields","purchaseOrder","vendor","shipTo","shipping","items","totals","contact","getTemplateStructure"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/PurchaseOrderTemplate.js"],"sourcesContent":["// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('ðŸš€ DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('ðŸ“… Template updated at:', new Date().toISOString());\n  console.log('ðŸ“Š Form data received:', formData);\n  \n  // Ensure formData exists and has required properties\n  const data = formData || {};\n  \n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n    \n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [\n        staticId,\n        `company-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [\n        staticId,\n        `po-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [\n        staticId,\n        `vendor-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [\n        staticId,\n        `ship-to-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `.shipping-${fieldType} .editable-field`,\n      `#shipping-${fieldType}`,\n      `[data-shipping-field=\"${fieldType}\"]`\n    ];\n    \n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`\n    ];\n    \n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = (fieldType) => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`\n    ];\n    \n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n    \n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      \n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    <table>\n        <tr>\n            \n            <td style=\"width: 65%; padding-right: 20px;\" data-section=\"company-info\">\n                <table>\n                    <tr>\n                        <td class=\"header-company\" style=\"text-align: left;\" data-field=\"company-name\">${getCompanyFieldValue('company-name', '[Company Name]')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-address\">${getCompanyFieldValue('company-address', '[Street Address]')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-city-state\">${getCompanyFieldValue('company-city-state', '[City, ST ZIP]')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-phone\">Phone: ${getCompanyFieldValue('company-phone', '(000) 000-0000')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-fax\">Fax: ${getCompanyFieldValue('company-fax', '(000) 000-0000')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\" data-field=\"company-website\">Website: ${getCompanyFieldValue('company-website', 'www.example.com')}</td>\n                    </tr>\n                </table>\n            </td>\n            \n            <td style=\"width: 35%; padding-left: 20px;\" align=\"right\" data-section=\"purchase-order-info\">\n                <table>\n                    <tr>\n                        <td class=\"header-title\" style=\"text-align: right;\" data-field=\"po-title\">${getPOFieldValue('po-title', 'PURCHASE ORDER')}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: right;\">\n                            <table style=\"width: 100%;\">\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${getPOFieldValue('po-date', 'MM/DD/YYYY')}</td>\n                                </tr>\n                                <tr>\n                                    <td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td>\n                                    <td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${getPOFieldValue('po-number', '[PO Number]')}</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n            \n            <td style=\"width: 50%;\" data-subsection=\"vendor\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">VENDOR</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            <span data-field=\"vendor-company\">${getVendorFieldValue('vendor-company', '[Company Name]')}</span><br/>\n                            <span data-field=\"vendor-contact\">${getVendorFieldValue('vendor-contact', '[Contact Person]')}</span><br/>\n                            <span data-field=\"vendor-address\">${getVendorFieldValue('vendor-address', '[Street Address]')}</span><br/>\n                            <span data-field=\"vendor-city-state\">${getVendorFieldValue('vendor-city-state', '[City, ST ZIP]')}</span><br/>\n                            Phone: <span data-field=\"vendor-phone\">${getVendorFieldValue('vendor-phone', '(000) 000-0000')}</span><br/>\n                            Fax: <span data-field=\"vendor-fax\">${getVendorFieldValue('vendor-fax', '(000) 000-0000')}</span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n            \n            <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n                <table>\n                    <tr>\n                        <td class=\"section-header\">SHIP TO</td>\n                    </tr>\n                    <tr>\n                        <td class=\"section-content\">\n                            <span data-field=\"ship-to-name\">${getShipToFieldValue('ship-to-name', '[Contact Name]')}</span><br/>\n                            <span data-field=\"ship-to-company\">${getShipToFieldValue('ship-to-company', '[Company Name]')}</span><br/>\n                            <span data-field=\"ship-to-address\">${getShipToFieldValue('ship-to-address', '[Street Address]')}</span><br/>\n                            <span data-field=\"ship-to-city-state\">${getShipToFieldValue('ship-to-city-state', '[City, ST ZIP]')}</span><br/>\n                            Phone: <span data-field=\"ship-to-phone\">${getShipToFieldValue('ship-to-phone', '(000) 000-0000')}</span><br/>\n                            Fax: <span data-field=\"ship-to-fax\">${getShipToFieldValue('ship-to-fax', '(000) 000-0000')}</span>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n\n    <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n            <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n            <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n            <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n            <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n            <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n            <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n            <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n    </table>\n\n\n    <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n            <td class=\"item-header\" align=\"left\" colspan=\"3\">ITEM</td><td class=\"item-header\" align=\"left\" colspan=\"12\">DESCRIPTION</td><td class=\"item-header\" align=\"center\" colspan=\"2\">QUANTITY</td><td class=\"item-header\" align=\"right\" colspan=\"3\">RATE</td><td class=\"item-header\" align=\"right\" colspan=\"3\">AMOUNT</td>\n        </tr>\n        ${generateLineItemsXML()}\n    </table>\n\n\n    <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n            \n            <td style=\"width: 70%; vertical-align: top;\" data-subsection=\"comments\">\n                <table style=\"width: 100%; border: 1px solid #e5e7eb;\">\n                    <tr>\n                        <td class=\"comments-header\">Comments or Special Instructions</td>\n                    </tr>\n                    <tr>\n                        <td class=\"comments-content\" style=\"padding: 15px; height: 120px; vertical-align: top;\" data-field=\"comments\">${getCommentsValue('')}</td>\n                    </tr>\n                </table>\n            </td>\n            \n            <td style=\"width: 30%; padding: 0;\" data-subsection=\"totals\">\n                <table>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SUBTOTAL</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"subtotal\">${getTotalFieldValue('subtotal', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TAX</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"tax\">${getTotalFieldValue('tax', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">SHIPPING</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"shipping-total\">${getTotalFieldValue('shipping', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">OTHER</td>\n                        <td class=\"total-label\" align=\"right\" data-field=\"other\">${getTotalFieldValue('other', '$0.00')}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"total-label\" align=\"right\">TOTAL</td>\n                        <td class=\"total-amount\" align=\"right\" data-field=\"total\">${getTotalFieldValue('total', '$0.00')}</td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n\n  console.log('âœ… NEW TEMPLATE: XML generated successfully with NetSuite structure');\n  console.log('ðŸ“„ XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    fields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website']\n  },\n  purchaseOrder: {\n    fields: ['po-title', 'po-date', 'po-number']\n  },\n  vendor: {\n    fields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax']\n  },\n  shipTo: {\n    fields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone']\n  },\n  shipping: {\n    fields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms']\n  },\n  items: {\n    fields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total']\n  },\n  totals: {\n    fields: ['subtotal', 'tax', 'shipping', 'other', 'total']\n  },\n  comments: {\n    fields: ['comments']\n  },\n  contact: {\n    fields: ['contactInfo']\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}