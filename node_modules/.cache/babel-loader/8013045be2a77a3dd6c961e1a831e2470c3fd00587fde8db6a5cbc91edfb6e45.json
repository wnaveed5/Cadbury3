{"ast":null,"code":"var _jsxFileName = \"/Users/waleed/Documents/GitHub/Cadbury3/src/PurchaseOrderForm.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s8 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PurchaseOrderForm.css';\nimport './section-styles.css';\nimport './section-title-colors.css';\nimport SectionTitleColorPicker from './components/SectionTitleColorPicker';\nimport { generatePurchaseOrderXML } from './templates/PurchaseOrderTemplate';\n\n// Import modular components\nimport Section1CompanyInfo from './components/Section1CompanyInfo';\nimport Section2PurchaseOrder from './components/Section2PurchaseOrder';\nimport Section3Vendor from './components/Section3Vendor';\nimport Section4ShipTo from './components/Section4ShipTo';\nimport Section5Shipping from './components/Section5Shipping';\nimport AvailableFields from './components/AvailableFields';\nimport { useAIProvider } from './hooks/useAIProvider';\n\n// Import custom hooks\nimport { useDragAndDropSensors, useCompanyFieldsDragEnd, usePurchaseOrderFieldsDragEnd, useVendorFieldsDragEnd, useShipToFieldsDragEnd } from './hooks/useDragAndDrop';\nimport { DndContext, closestCenter, useDraggable, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, verticalListSortingStrategy, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove } from '@dnd-kit/sortable';\n\n// Draggable Section Wrapper Component for Sections\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DraggableSectionWrapper({\n  children,\n  id,\n  sectionNumber,\n  isSectionHandleDragging = false,\n  showDragHandle = true\n}) {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id,\n    data: {\n      type: 'section',\n      sectionNumber: sectionNumber\n    }\n  });\n\n  // Map section numbers to proper CSS classes\n  const getSectionClass = sectionNum => {\n    switch (sectionNum) {\n      case 1:\n        return 'section-1-company-info';\n      case 2:\n        return 'section-2-purchase-order';\n      default:\n        return `section-${sectionNum}`;\n    }\n  };\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.6 : 1,\n    zIndex: isDragging ? 1000 : 1,\n    cursor: isDragging ? 'grabbing' : 'grab',\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    border: isDragging ? '3px solid #ff6b6b' : '2px solid #ddd',\n    borderRadius: '8px',\n    backgroundColor: isDragging ? 'rgba(255, 107, 107, 0.1)' : 'transparent'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: `sortable-section ${getSectionClass(sectionNumber)} ${isDragging ? 'dragging' : ''}`,\n    \"data-section\": sectionNumber,\n    \"data-testid\": `draggable-section-${id}`,\n    \"data-dragging\": isDragging,\n    ...attributes,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-content\",\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/React.cloneElement(children, {\n        dragListeners: listeners,\n        dragAttributes: attributes\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n// Sortable shipping column header component for shipping details\n_s(DraggableSectionWrapper, \"9J/a3p2iAf7PAeqkD/B/H2PQwgk=\", false, function () {\n  return [useSortable];\n});\n_c = DraggableSectionWrapper;\nfunction SortableShippingColumnHeader({\n  children,\n  id\n}) {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    userSelect: 'none'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    className: `sortable-column-header ${isDragging ? 'dragging' : ''}`,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n// Sortable line item column header component for line items\n_s2(SortableShippingColumnHeader, \"wZ9LrlAdu45h+k5IBlwhyTPFbVs=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableShippingColumnHeader;\nfunction SortableLineItemColumnHeader({\n  children,\n  id\n}) {\n  _s3();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    userSelect: 'none'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    className: `sortable-column-header ${isDragging ? 'dragging' : ''}`,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n// Draggable Section Header Component for Comments and Totals\n_s3(SortableLineItemColumnHeader, \"wZ9LrlAdu45h+k5IBlwhyTPFbVs=\", false, function () {\n  return [useSortable];\n});\n_c3 = SortableLineItemColumnHeader;\nfunction DraggableSectionHeader({\n  children,\n  id\n}) {\n  _s4();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: \"section-header\",\n    ...attributes,\n    ...listeners,\n    title: \"Drag to reorder sections\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n\n// Draggable Group Handle Component for Sections 3 & 4\n_s4(DraggableSectionHeader, \"jv8kPLlEaSR8/o9+iCuLK6K7PFU=\", false, function () {\n  return [useSortable];\n});\n_c4 = DraggableSectionHeader;\nfunction DraggableGroupHandle({\n  children,\n  id,\n  label\n}) {\n  _s5();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id,\n    data: {\n      type: 'section-group',\n      label: label\n    }\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n    position: 'relative'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ...attributes,\n      ...listeners,\n      style: {\n        position: 'absolute',\n        left: '-40px',\n        top: '50%',\n        transform: 'translateY(-50%)',\n        width: '30px',\n        height: '60px',\n        backgroundColor: 'white',\n        borderRadius: '6px',\n        cursor: 'grab',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        gap: '4px',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        zIndex: 10,\n        border: '2px solid #8b5cf6'\n      },\n      title: `Drag to move ${label} as a group`,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#8b5cf6',\n          fontSize: '18px',\n          fontWeight: 'bold'\n        },\n        children: \"\\u22EE\\u22EE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Purchase Order Form Component\n_s5(DraggableGroupHandle, \"9J/a3p2iAf7PAeqkD/B/H2PQwgk=\", false, function () {\n  return [useSortable];\n});\n_c5 = DraggableGroupHandle;\nfunction PurchaseOrderForm() {\n  _s8();\n  var _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n  // ============================================================================\n  // STATE MANAGEMENT\n  // ============================================================================\n\n  // Company fields state for Section 1\n  const [companyFields, setCompanyFields] = useState([{\n    id: 'company-name',\n    label: 'Company Name:',\n    placeholder: 'Enter company name',\n    value: ''\n  }, {\n    id: 'company-address',\n    label: 'Street Address:',\n    placeholder: 'Enter street address',\n    value: ''\n  }, {\n    id: 'company-city-state',\n    label: 'City, ST ZIP:',\n    placeholder: 'City, State ZIP',\n    value: ''\n  }, {\n    id: 'company-phone',\n    label: 'Phone:',\n    placeholder: '(555) 123-4567',\n    value: ''\n  }, {\n    id: 'company-fax',\n    label: 'Fax:',\n    placeholder: '(555) 123-4567',\n    value: ''\n  }, {\n    id: 'company-website',\n    label: 'Website:',\n    placeholder: 'www.example.com',\n    value: ''\n  }]);\n\n  // Debug: Log company fields state changes\n  useEffect(() => {\n    console.log('🔄 Company fields state updated:', companyFields.map(f => ({\n      id: f.id,\n      label: f.label\n    })));\n  }, [companyFields]);\n\n  // Track last modification time for company fields\n  const [lastModified, setLastModified] = useState(new Date().toISOString());\n\n  // Track last modification time for purchase order fields\n  const [poLastModified, setPoLastModified] = useState(new Date().toISOString());\n\n  // ============================================================================\n  // SIDEBAR MANAGEMENT\n  // ============================================================================\n\n  // State for sidebar visibility on mobile\n  const [sidebarVisible, setSidebarVisible] = useState(true);\n\n  // Toggle sidebar visibility\n  const toggleSidebar = () => {\n    setSidebarVisible(!sidebarVisible);\n  };\n\n  // Helper: slugify and ensure unique id for new fields\n  const generateUniqueFieldId = (baseLabel, existingIds) => {\n    const slugBase = String(baseLabel).toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');\n    let candidate = slugBase || 'field';\n    let counter = 1;\n    while (existingIds.includes(candidate)) {\n      candidate = `${slugBase}-${counter++}`;\n    }\n    return candidate;\n  };\n\n  // ============================================================================\n  // DROPPABLE ZONES\n  // ============================================================================\n\n  // Handle palette drag end to add fields to target sections\n  const handlePaletteDragEnd = event => {\n    var _active$data;\n    const {\n      active,\n      over\n    } = event;\n    console.log('🎯 Palette drag end:', {\n      active,\n      over\n    });\n    if (!(active !== null && active !== void 0 && (_active$data = active.data) !== null && _active$data !== void 0 && _active$data.current) || !(over !== null && over !== void 0 && over.id)) {\n      console.log('❌ Missing active data or over id');\n      return;\n    }\n    const data = active.data.current;\n    if (data.source !== 'palette') {\n      console.log('❌ Not a palette source:', data.source);\n      return;\n    }\n    const baseLabel = data.label;\n    console.log('🎯 Dropping on zone:', over.id);\n\n    // Check if dropping on section elements\n    if (over.id === 'section1') {\n      console.log('✅ Adding to company section');\n      const existingIds = companyFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = {\n        id,\n        label: `${baseLabel}:`,\n        placeholder: baseLabel,\n        value: ''\n      };\n      handleAddCompanyField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Company Info`, 'success');\n    } else if (over.id === 'section2') {\n      console.log('✅ Adding to purchase order section');\n      const existingIds = purchaseOrderFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = {\n        id,\n        label: `${baseLabel}:`,\n        placeholder: baseLabel,\n        value: ''\n      };\n      handleAddPurchaseOrderField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Purchase Order`, 'success');\n    } else if (over.id === 'section3') {\n      console.log('✅ Adding to vendor section');\n      const existingIds = vendorFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = {\n        id,\n        label: `${baseLabel}:`,\n        placeholder: baseLabel,\n        value: ''\n      };\n      handleAddVendorField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Vendor section`, 'success');\n    } else if (over.id === 'section4') {\n      console.log('✅ Adding to ship-to section');\n      const existingIds = shipToFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = {\n        id,\n        label: `${baseLabel}:`,\n        placeholder: baseLabel,\n        value: ''\n      };\n      handleAddShipToField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Ship-To section`, 'success');\n    } else {\n      console.log('❌ Unknown drop zone:', over.id);\n    }\n  };\n\n  // Purchase Order fields state for Section 2\n  const [purchaseOrderFields, setPurchaseOrderFields] = useState([{\n    id: 'po-title',\n    label: 'Purchase Order',\n    placeholder: '',\n    isTitle: true,\n    value: 'Purchase Order'\n  }, {\n    id: 'po-date',\n    label: 'DATE:',\n    placeholder: 'MM/DD/YYYY',\n    value: ''\n  }, {\n    id: 'po-number',\n    label: 'PO #:',\n    placeholder: 'PO#123456',\n    value: ''\n  }]);\n\n  // Vendor fields state for Section 3\n  const [vendorFields, setVendorFields] = useState([{\n    id: 'vendor-company',\n    label: 'Company:',\n    placeholder: 'Vendor name',\n    value: ''\n  }, {\n    id: 'vendor-contact',\n    label: 'Contact:',\n    placeholder: 'Contact person',\n    value: ''\n  }, {\n    id: 'vendor-address',\n    label: 'Address:',\n    placeholder: 'Street address',\n    value: ''\n  }, {\n    id: 'vendor-city-state',\n    label: 'City/State:',\n    placeholder: 'City, ST ZIP',\n    value: ''\n  }, {\n    id: 'vendor-phone',\n    label: 'Phone:',\n    placeholder: '(555) 123-4567',\n    value: ''\n  }]);\n\n  // Ship To fields state for Section 3\n  const [shipToFields, setShipToFields] = useState([{\n    id: 'ship-to-name',\n    label: 'Name:',\n    placeholder: 'Contact name',\n    value: ''\n  }, {\n    id: 'ship-to-company',\n    label: 'Company:',\n    placeholder: 'Shipping company',\n    value: ''\n  }, {\n    id: 'ship-to-address',\n    label: 'Address:',\n    placeholder: 'Street address',\n    value: ''\n  }, {\n    id: 'ship-to-city-state',\n    label: 'City/State:',\n    placeholder: 'City, ST ZIP',\n    value: ''\n  }, {\n    id: 'ship-to-phone',\n    label: 'Phone:',\n    placeholder: '(555) 123-4567',\n    value: ''\n  }]);\n\n  // Line Items state for the items table\n  const [lineItemRows, setLineItemRows] = useState([1, 2, 3, 4, 5]);\n\n  // Totals fields state for Section 9\n  const [totalsFields, setTotalsFields] = useState([{\n    id: 'subtotal',\n    label: 'SUBTOTAL:',\n    placeholder: '$0.00',\n    value: '$0.00',\n    isCalculated: true\n  }, {\n    id: 'tax',\n    label: 'TAX:',\n    placeholder: '$0.00',\n    value: ''\n  }, {\n    id: 'shipping',\n    label: 'SHIPPING:',\n    placeholder: '$0.00',\n    value: ''\n  }, {\n    id: 'other',\n    label: 'OTHER:',\n    placeholder: '$0.00',\n    value: ''\n  }, {\n    id: 'total',\n    label: 'TOTAL:',\n    placeholder: '$0.00',\n    value: '$0.00',\n    isCalculated: true\n  }]);\n\n  // ============================================================================\n  // CUSTOM HOOKS\n  // ============================================================================\n\n  const sensors = useDragAndDropSensors();\n  const handleVendorDragEnd = useVendorFieldsDragEnd(setVendorFields);\n  const handleShipToDragEnd = useShipToFieldsDragEnd(setShipToFields);\n\n  // ============================================================================\n  // COMPANY FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n\n  // Helper function to update timestamp when company fields change\n  const updateCompanyFieldsTimestamp = () => {\n    setLastModified(new Date().toISOString());\n  };\n\n  // Add new company field\n  const handleAddCompanyField = newField => {\n    setCompanyFields(prevFields => [...prevFields, newField]);\n    updateCompanyFieldsTimestamp();\n    logChange('field-add', newField.id, '', newField.label, 'company');\n    console.log('➕ Added new company field:', newField);\n  };\n\n  // Remove company field\n  const handleRemoveCompanyField = fieldId => {\n    console.log('🗑️ handleRemoveCompanyField called with fieldId:', fieldId);\n    console.log('🗑️ Current company fields before removal:', companyFields);\n    setCompanyFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      console.log('🗑️ Field to remove found:', fieldToRemove);\n      showNotification(`🗑️ Removed company field: \"${fieldToRemove === null || fieldToRemove === void 0 ? void 0 : fieldToRemove.label}\"`, 'warning');\n      console.log('🗑️ Removed company field:', fieldToRemove);\n      const newFields = prevFields.filter(field => field.id !== fieldId);\n      console.log('🗑️ New company fields after removal:', newFields);\n      return newFields;\n    });\n    updateCompanyFieldsTimestamp();\n  };\n\n  // ============================================================================\n  // ENHANCED CHANGE TRACKING\n  // ============================================================================\n\n  // State for tracking all changes\n  const [changeHistory, setChangeHistory] = useState([]);\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [lastExportTime, setLastExportTime] = useState(null);\n\n  // Function to log changes with timestamps\n  const logChange = (changeType, fieldId, oldValue, newValue, section) => {\n    const change = {\n      id: Date.now(),\n      timestamp: new Date().toISOString(),\n      type: changeType,\n      fieldId,\n      oldValue,\n      newValue,\n      section\n    };\n    setChangeHistory(prev => [change, ...prev.slice(0, 49)]); // Keep last 50 changes\n    console.log('📝 Change logged:', change);\n  };\n\n  // Function to add changes to change history (for section operations)\n  const addToChangeHistory = (changeType, fieldId, newValue) => {\n    const change = {\n      id: Date.now(),\n      timestamp: new Date().toISOString(),\n      type: changeType,\n      fieldId,\n      oldValue: '',\n      newValue,\n      section: 'section'\n    };\n    setChangeHistory(prev => [change, ...prev.slice(0, 49)]); // Keep last 50 changes\n    console.log('📝 Section change logged:', change);\n  };\n\n  // Enhanced field update functions with change logging\n  const handleCompanyFieldLabelChange = (fieldId, newLabel) => {\n    setCompanyFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      logChange('label-change', fieldId, oldLabel, newLabel, 'company');\n      return prevFields.map(field => field.id === fieldId ? {\n        ...field,\n        label: newLabel\n      } : field);\n    });\n    updateCompanyFieldsTimestamp();\n  };\n  const handlePurchaseOrderFieldLabelChange = (fieldId, newLabel) => {\n    setPurchaseOrderFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      logChange('label-change', fieldId, oldLabel, newLabel, 'purchase-order');\n      return prevFields.map(field => field.id === fieldId ? {\n        ...field,\n        label: newLabel\n      } : field);\n    });\n    updatePurchaseOrderFieldsTimestamp();\n  };\n\n  // Function to handle content changes in editable fields\n  const handleContentChange = (fieldId, newContent, section) => {\n    // Find the field and log the change\n    let oldValue = '';\n    let fieldType = '';\n    if (section === 'company') {\n      const field = companyFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    } else if (section === 'purchase-order') {\n      const field = purchaseOrderFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    } else if (section === 'vendor') {\n      const field = vendorFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    } else if (section === 'ship-to') {\n      const field = shipToFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    }\n    if (oldValue !== newContent) {\n      logChange('content-change', fieldId, oldValue, newContent, section);\n    }\n  };\n\n  // Function to toggle preview mode\n  const togglePreviewMode = () => {\n    setIsPreviewMode(!isPreviewMode);\n  };\n\n  // Function to clear change history\n  const clearChangeHistory = () => {\n    setChangeHistory([]);\n    console.log('🗑️ Change history cleared');\n  };\n\n  // ============================================================================\n  // XML DISPLAY MODAL\n  // ============================================================================\n\n  // State for XML modal\n  const [showXMLModal, setShowXMLModal] = useState(false);\n  const [xmlOutput, setXmlOutput] = useState('');\n\n  // Function to display XML output in a modal\n  const displayXMLOutput = xml => {\n    setXmlOutput(xml);\n    setShowXMLModal(true);\n  };\n\n  // Function to close XML modal\n  const closeXMLModal = () => {\n    setShowXMLModal(false);\n    setXmlOutput('');\n  };\n\n  // Function to copy XML to clipboard\n  const copyXMLToClipboard = () => {\n    navigator.clipboard.writeText(xmlOutput).then(() => {\n      showNotification('📋 XML copied to clipboard!', 'success');\n    }).catch(() => {\n      showNotification('❌ Failed to copy XML to clipboard', 'error');\n    });\n  };\n\n  // Function to download XML file\n  const downloadXML = () => {\n    var _purchaseOrderFields$;\n    const blob = new Blob([xmlOutput], {\n      type: 'application/xml'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `purchase-order-${((_purchaseOrderFields$ = purchaseOrderFields.find(f => f.id === 'po-number')) === null || _purchaseOrderFields$ === void 0 ? void 0 : _purchaseOrderFields$.value) || 'unknown'}.xml`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    showNotification('📥 XML downloaded successfully!', 'success');\n  };\n\n  // =========================================================================\n  // AI SUGGESTIONS\n  // =========================================================================\n  const {\n    getFieldSuggestions\n  } = useAIProvider();\n  const applySuggestionsToFields = (suggestionsMap, fields) => {\n    if (!Array.isArray(fields)) return fields;\n    return fields.map(f => {\n      const newVal = suggestionsMap === null || suggestionsMap === void 0 ? void 0 : suggestionsMap[f.id];\n      if (typeof newVal === 'string') {\n        return {\n          ...f,\n          value: newVal\n        };\n      }\n      return f;\n    });\n  };\n\n  // Helper function to generate additional line item suggestions for rows beyond the first 3\n  const generateAdditionalLineItemSuggestions = (rowNumber, baseSuggestions) => {\n    // Try to extract patterns from existing AI suggestions for more realistic data\n    const baseItem = (baseSuggestions === null || baseSuggestions === void 0 ? void 0 : baseSuggestions.itemNumber1) || 'ITEM';\n    const baseDesc = (baseSuggestions === null || baseSuggestions === void 0 ? void 0 : baseSuggestions.description1) || 'Product';\n\n    // Safely parse base values with fallbacks\n    const baseQty = parseFloat(baseSuggestions === null || baseSuggestions === void 0 ? void 0 : baseSuggestions.qty1) || 1;\n    const baseRate = parseFloat(baseSuggestions === null || baseSuggestions === void 0 ? void 0 : baseSuggestions.rate1) || 50.00;\n\n    // Create variations that follow similar patterns to the base suggestions\n    const variations = [{\n      itemNumber: `${baseItem.replace(/\\d+$/, '')}${rowNumber.toString().padStart(3, '0')}`,\n      description: `${baseDesc} ${rowNumber} - Extended`,\n      qty: Math.max(1, Math.floor(Math.random() * 10) + 1),\n      rate: (baseRate * (0.8 + Math.random() * 0.6)).toFixed(2),\n      amount: ''\n    }, {\n      itemNumber: `${baseItem.replace(/\\d+$/, '')}${rowNumber.toString().padStart(3, '0')}`,\n      description: `${baseDesc} ${rowNumber} - Premium`,\n      qty: Math.max(1, Math.floor(Math.random() * 5) + 1),\n      rate: (baseRate * (1.2 + Math.random() * 0.8)).toFixed(2),\n      amount: ''\n    }, {\n      itemNumber: `${baseItem.replace(/\\d+$/, '')}${rowNumber.toString().padStart(3, '0')}`,\n      description: `${baseDesc} ${rowNumber} - Standard`,\n      qty: Math.max(1, Math.floor(Math.random() * 8) + 1),\n      rate: (baseRate * (0.6 + Math.random() * 0.4)).toFixed(2),\n      amount: ''\n    }];\n\n    // Select a variation based on row number for consistency\n    const variationIndex = (rowNumber - 1) % variations.length;\n    const variation = variations[variationIndex];\n\n    // Calculate amount based on qty and rate (ensure both are numbers)\n    const qty = parseFloat(variation.qty) || 1;\n    const rate = parseFloat(variation.rate) || 50.00;\n    variation.amount = (qty * rate).toFixed(2);\n    return variation;\n  };\n\n  // Helper function to generate data for custom columns\n  const generateCustomColumnData = (columnId, rowNumber, baseSuggestions) => {\n    const customType = columnId.replace('custom-', '');\n\n    // Generate different types of data based on column patterns\n    if (customType.includes('date') || customType.includes('Date')) {\n      const today = new Date();\n      const futureDate = new Date(today.getTime() + (Math.random() * 30 + 1) * 24 * 60 * 60 * 1000);\n      return futureDate.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    } else if (customType.includes('status') || customType.includes('Status')) {\n      const statuses = ['Pending', 'Approved', 'In Progress', 'Completed', 'On Hold'];\n      return statuses[Math.floor(Math.random() * statuses.length)];\n    } else if (customType.includes('priority') || customType.includes('Priority')) {\n      const priorities = ['Low', 'Medium', 'High', 'Urgent'];\n      return priorities[Math.floor(Math.random() * priorities.length)];\n    } else if (customType.includes('category') || customType.includes('Category')) {\n      const categories = ['Electronics', 'Office Supplies', 'Services', 'Equipment', 'Software'];\n      return categories[Math.floor(Math.random() * categories.length)];\n    } else if (customType.includes('location') || customType.includes('Location')) {\n      const locations = ['Warehouse A', 'Warehouse B', 'Main Office', 'Branch Office', 'Remote'];\n      return locations[Math.floor(Math.random() * locations.length)];\n    } else if (customType.includes('supplier') || customType.includes('Supplier')) {\n      const suppliers = ['TechCorp', 'OfficeMax', 'ServicePro', 'EquipmentPlus', 'SupplyCo'];\n      return suppliers[Math.floor(Math.random() * suppliers.length)];\n    } else {\n      // Generic custom field - generate realistic data\n      const genericData = [`Value ${rowNumber}`, `Option ${rowNumber}`, `Setting ${rowNumber}`, `Config ${rowNumber}`, `Param ${rowNumber}`];\n      return genericData[Math.floor(Math.random() * genericData.length)];\n    }\n  };\n  const handleAIFill = async () => {\n    try {\n      showNotification('🤖 Fetching AI suggestions...', 'info');\n      const payload = {\n        context: 'purchase_order',\n        companyFields,\n        purchaseOrderFields,\n        vendorFields,\n        shipToFields,\n        shippingFields: [\n        // Include default shipping fields\n        {\n          id: 'requisitioner',\n          label: 'Requisitioner name'\n        }, {\n          id: 'shipVia',\n          label: 'Shipping method'\n        }, {\n          id: 'fob',\n          label: 'FOB terms'\n        }, {\n          id: 'shippingTerms',\n          label: 'Shipping terms'\n        },\n        // Include custom columns dynamically\n        ...shippingColumnOrder.filter(id => id.startsWith('custom-')).map(id => ({\n          id,\n          label: `Custom ${id.replace('custom-', '')}`\n        }))]\n      };\n      const {\n        suggestions\n      } = await getFieldSuggestions(payload);\n      try {\n        console.debug('🧪 AI suggestions keys:', Object.keys(suggestions || {}));\n        // Preview a few critical values to verify mapping\n        console.debug('🧪 AI preview:', {\n          company: {\n            name: suggestions === null || suggestions === void 0 ? void 0 : suggestions['company-name'],\n            phone: suggestions === null || suggestions === void 0 ? void 0 : suggestions['company-phone']\n          },\n          po: {\n            date: suggestions === null || suggestions === void 0 ? void 0 : suggestions['po-date'],\n            number: suggestions === null || suggestions === void 0 ? void 0 : suggestions['po-number']\n          },\n          shipping: {\n            requisitioner: suggestions === null || suggestions === void 0 ? void 0 : suggestions.requisitioner,\n            shipVia: suggestions === null || suggestions === void 0 ? void 0 : suggestions.shipVia\n          },\n          totals: {\n            subtotal: suggestions === null || suggestions === void 0 ? void 0 : suggestions.subtotal,\n            tax: suggestions === null || suggestions === void 0 ? void 0 : suggestions.tax,\n            total: suggestions === null || suggestions === void 0 ? void 0 : suggestions.total\n          },\n          line1: {\n            item: suggestions === null || suggestions === void 0 ? void 0 : suggestions.itemNumber1,\n            desc: suggestions === null || suggestions === void 0 ? void 0 : suggestions.description1,\n            qty: suggestions === null || suggestions === void 0 ? void 0 : suggestions.qty1,\n            rate: suggestions === null || suggestions === void 0 ? void 0 : suggestions.rate1,\n            amount: suggestions === null || suggestions === void 0 ? void 0 : suggestions.amount1\n          }\n        });\n      } catch {}\n\n      // 1) Apply to Section 1–3 states (company/po/vendor/ship-to) with mapping logs\n      setCompanyFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(companyFields):', {\n                id,\n                from: before[id],\n                to: after[id],\n                sourceKey: id\n              });\n            }\n          });\n        } catch {}\n        return next;\n      });\n      setPurchaseOrderFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(purchaseOrderFields):', {\n                id,\n                from: before[id],\n                to: after[id],\n                sourceKey: id\n              });\n            }\n          });\n        } catch {}\n        return next;\n      });\n      setVendorFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(vendorFields):', {\n                id,\n                from: before[id],\n                to: after[id],\n                sourceKey: id\n              });\n            }\n          });\n        } catch {}\n        return next;\n      });\n      setShipToFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(shipToFields):', {\n                id,\n                from: before[id],\n                to: after[id],\n                sourceKey: id\n              });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      // 2) Shipping details (DOM spans)\n      const write = (el, val) => {\n        if (el && typeof val === 'string') el.textContent = val;\n      };\n      const shipSelectors = key => [`.shipping-details [data-field=\"${key}\"] .editable-field`, `.shipping-field[data-field=\"${key}\"] .editable-field`, `#shipping-${key}`, `.shipping-field-${key} .editable-field`];\n\n      // Use dynamic shipping column order instead of hardcoded array\n      const shipOrder = shippingColumnOrder;\n      shipOrder.forEach((key, idx) => {\n        let el = null,\n          used = '';\n\n        // Handle custom columns (those that start with 'custom-')\n        let suggestionKey = key;\n        if (key.startsWith('custom-')) {\n          // For custom columns, try to find a relevant suggestion or generate one\n          suggestionKey = 'customField'; // Use a generic key for AI suggestions\n        }\n        for (const sel of shipSelectors(key)) {\n          el = document.querySelector(sel);\n          if (el) {\n            used = sel;\n            break;\n          }\n        }\n        // Fallback to positional selector used in your JSX\n        if (!el) {\n          const nth = idx + 1; // 1-based\n          // Prefer :nth-of-type within container to ignore headers\n          const selA = `.shipping-details .shipping-field:nth-of-type(${nth}) .editable-field`;\n          el = document.querySelector(selA);\n          if (el) {\n            used = selA;\n          } else {\n            // Last resort: original child-based selector\n            const selB = `.shipping-field:nth-child(${nth}) .editable-field`;\n            el = document.querySelector(selB);\n            if (el) used = selB;\n          }\n        }\n\n        // Get the suggestion value, with fallback for custom columns\n        let suggestionValue = suggestions[suggestionKey];\n        if (key.startsWith('custom-') && !suggestionValue) {\n          // Generate a placeholder value for custom columns\n          suggestionValue = `[Custom ${key.replace('custom-', '')}]`;\n        }\n        write(el, suggestionValue);\n        try {\n          const count = document.querySelectorAll('.shipping-details .shipping-field').length;\n          console.debug('🧭 map(shippingDetails):', {\n            key,\n            selector: used || '(not found)',\n            value: suggestionValue,\n            fieldsInDOM: count,\n            isCustom: key.startsWith('custom-')\n          });\n        } catch {}\n      });\n\n      // 3) Line items (fill all rows dynamically)\n      // Rows are rendered with data-column per your table; we fill itemNumber, description, qty, rate, amount.\n      const setCell = (row, col, val) => {\n        const selector = `.itemtable tbody tr:nth-child(${row}) td[data-column=\"${col}\"] .editable-field`;\n        const cell = document.querySelector(selector);\n        if (cell && typeof val === 'string') {\n          cell.textContent = val;\n        }\n        try {\n          console.debug('🧭 map(lineItem):', {\n            row,\n            col,\n            selector,\n            value: val\n          });\n        } catch {}\n      };\n      const li = (i, k) => suggestions === null || suggestions === void 0 ? void 0 : suggestions[`${k}${i}`];\n\n      // Get the total number of rows in the table\n      const totalRows = document.querySelectorAll('.itemtable tbody tr').length;\n      console.log(`🤖 Filling ${totalRows} line item rows with AI suggestions`);\n\n      // Fill all rows with AI suggestions\n      for (let i = 1; i <= totalRows; i++) {\n        // For rows beyond the first 3, generate additional suggestions or use fallbacks\n        let itemNumber, description, qty, rate, amount;\n        if (i <= 3) {\n          // Use existing AI suggestions for first 3 rows\n          itemNumber = li(i, 'itemNumber') || `ITEM${i.toString().padStart(3, '0')}`;\n          description = li(i, 'description') || `Product ${i}`;\n          qty = li(i, 'qty') || '1';\n          rate = li(i, 'rate') || '50.00';\n          amount = li(i, 'amount') || '50.00';\n          console.log(`🤖 Row ${i} (AI):`, {\n            itemNumber,\n            description,\n            qty,\n            rate,\n            amount\n          });\n        } else {\n          // Generate additional suggestions for rows 4+\n          const additionalSuggestions = generateAdditionalLineItemSuggestions(i, suggestions);\n          itemNumber = additionalSuggestions.itemNumber;\n          description = additionalSuggestions.description;\n          qty = additionalSuggestions.qty;\n          rate = additionalSuggestions.rate;\n          amount = additionalSuggestions.amount;\n          console.log(`🤖 Row ${i} (Generated):`, {\n            itemNumber,\n            description,\n            qty,\n            rate,\n            amount\n          });\n        }\n\n        // Ensure all values are strings and handle any undefined/null values\n        setCell(i, 'itemNumber', String(itemNumber || ''));\n        setCell(i, 'description', String(description || ''));\n        setCell(i, 'qty', String(qty || ''));\n        setCell(i, 'rate', String(rate || ''));\n        setCell(i, 'amount', String(amount || ''));\n\n        // Fill custom columns with AI-generated data\n        lineItemColumnOrder.forEach(columnId => {\n          if (columnId.startsWith('custom-')) {\n            const customValue = generateCustomColumnData(columnId, i, suggestions);\n            setCell(i, columnId, String(customValue || ''));\n          }\n        });\n      }\n\n      // 4) Totals (state + DOM)\n      setTotalsFields(prev => {\n        const map = {\n          subtotal: suggestions.subtotal,\n          tax: suggestions.tax,\n          shipping: suggestions.shipping,\n          other: suggestions.other,\n          total: suggestions.total\n        };\n        const next = prev.map(f => map[f.id] ? {\n          ...f,\n          value: map[f.id]\n        } : f);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && map[id] !== undefined) {\n              console.debug('🧭 map(totalsFields):', {\n                id,\n                from: before[id],\n                to: after[id],\n                sourceKey: id\n              });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      // Write editable totals into DOM for non-calculated rows\n      const domTotals = field => document.querySelector(`.totals-section .total-row[data-field=\"${field}\"] .editable-field`);\n      ['tax', 'shipping', 'other'].forEach(key => {\n        const sel = `.totals-section .total-row[data-field=\"${key}\"] .editable-field`;\n        write(domTotals(key), suggestions[key]);\n        try {\n          console.debug('🧭 map(totalsDOM):', {\n            key,\n            selector: sel,\n            value: suggestions[key]\n          });\n        } catch {}\n      });\n\n      // Calculated-looking spans (subtotal, total) in your layout use .calculated-field\n      const calcTotal = document.querySelector(`.totals-section .total-row[data-field=\"total\"] .total-field`);\n      const calcSub = document.querySelector(`.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`);\n      write(calcSub, suggestions.subtotal);\n      write(calcTotal, suggestions.total);\n      try {\n        console.debug('🧭 map(totalsDOM):', {\n          key: 'subtotal',\n          selector: `.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`,\n          value: suggestions.subtotal\n        });\n        console.debug('🧭 map(totalsDOM):', {\n          key: 'total',\n          selector: `.totals-section .total-row[data-field=\"total\"] .total-field`,\n          value: suggestions.total\n        });\n      } catch {}\n\n      // 5) Comments, Contact Info (DOM)\n      const commentsEl = document.querySelector('.comments-content .editable-field');\n      const contactEl = document.querySelector('.contact-section .editable-field');\n      write(commentsEl, suggestions.comments);\n      write(contactEl, suggestions.contactInfo);\n      try {\n        console.debug('🧭 map(comments):', {\n          selector: '.comments-content .editable-field',\n          value: suggestions.comments\n        });\n        console.debug('🧭 map(contactInfo):', {\n          selector: '.contact-section .editable-field',\n          value: suggestions.contactInfo\n        });\n      } catch {}\n\n      // 6) Bump timestamps\n      updateCompanyFieldsTimestamp();\n      updatePurchaseOrderFieldsTimestamp();\n      showNotification('✅ AI suggestions applied', 'success');\n    } catch (e) {\n      console.error('AI fill failed:', e);\n      showNotification(`❌ AI fill failed: ${e.message}`, 'error');\n    }\n  };\n\n  // ============================================================================\n  // XML EXPORT FUNCTIONALITY\n  // ============================================================================\n\n  // Function to export form data as XML\n  const exportToXML = () => {\n    try {\n      console.log('📄 Starting XML generation...');\n\n      // Capture current field values first\n      const capturedData = captureFieldValues();\n\n      // Prepare data for XML generation\n      // Determine current visual order of sections 1 & 2 from DOM to avoid async state lag\n      const headerSections = Array.from(document.querySelectorAll('.header-section .sortable-section'));\n      const visualSections1And2 = headerSections.map(el => el.id).filter(id => id === 'section1' || id === 'section2');\n      const sections1And2ForExport = visualSections1And2.length === 2 ? visualSections1And2 : sections1And2Order;\n\n      // Determine current visual order of sections 3 & 4 (Vendor / Ship-To) from DOM\n      const vendorShipToSections = Array.from(document.querySelectorAll('.vendor-shipping-section .sortable-section'));\n      const visualSections3And4 = vendorShipToSections.map(el => el.id).filter(id => id === 'section3' || id === 'section4');\n      const sections3And4ForExport = visualSections3And4.length === 2 ? visualSections3And4 : vendorShipToSectionOrder;\n\n      // Helpers for DOM reads\n      const getText = sel => {\n        var _document$querySelect, _document$querySelect2;\n        return ((_document$querySelect = document.querySelector(sel)) === null || _document$querySelect === void 0 ? void 0 : (_document$querySelect2 = _document$querySelect.textContent) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.trim()) || '';\n      };\n\n      // Normalize line items to include both UI keys (qty/rate/amount) and template keys (quantity/unitPrice/total)\n      // Also preserve all custom column data\n      const normalizedLineItems = (capturedData.lineItems || []).map(row => {\n        const normalizedRow = {\n          // original UI keys\n          itemNumber: row.itemNumber || '',\n          description: row.description || '',\n          qty: row.qty || row.quantity || '',\n          rate: row.rate || row.unitPrice || '',\n          amount: row.amount || row.total || '',\n          // template-expected keys\n          quantity: row.quantity || row.qty || '',\n          unitPrice: row.unitPrice || row.rate || '',\n          total: row.total || row.amount || ''\n        };\n\n        // Preserve all custom column data\n        lineItemColumnOrder.forEach(columnId => {\n          if (columnId.startsWith('custom-') && row[columnId] !== undefined) {\n            normalizedRow[columnId] = row[columnId];\n          }\n        });\n        return normalizedRow;\n      });\n      const exportData = {\n        ...capturedData,\n        // Add major sections order for group swapping\n        majorSectionsOrder: majorSectionsOrder,\n        // New state for sections 3+4 group swapping with section 5\n        // Add section order information for dynamic XML generation\n        sectionOrder: {\n          sections1And2: sections1And2ForExport,\n          // Use current visual order to ensure XML matches UI\n          sections3And4: sections3And4ForExport,\n          // Use current visual order to ensure XML matches UI\n          sections5And6: sections5And6Order,\n          // Use actual state for sections 5&6\n          sections8And9: commentsTotalsSectionOrder,\n          // Use actual state for sections 8&9\n          lineItemColumns: lineItemColumnOrder,\n          // Use actual state for line item columns\n          shippingColumns: shippingColumnOrder // Use actual state for shipping columns\n        },\n        // CRITICAL: Add field order information for dynamic XML generation (same pattern as section order)\n        fieldOrder: {\n          company: companyFieldOrder,\n          // Preserve company field order independently of section position\n          purchaseOrder: purchaseOrderFieldOrder,\n          // Preserve PO field order independently of section position\n          vendor: vendorFields.map(f => f.id),\n          // Vendor field order\n          shipTo: shipToFields.map(f => f.id) // Ship-to field order\n        },\n        // Add normalized line items (support both key schemes)\n        lineItems: normalizedLineItems,\n        // Shipping details (prefer data-field; fall back handled in XML builder too)\n        // Capture all shipping columns dynamically, including custom ones\n        ...(() => {\n          const shippingData = {};\n          shippingColumnOrder.forEach(columnId => {\n            const value = getText(`.section-5 [data-field=\"${columnId}\"] .editable-field`);\n            shippingData[columnId] = value;\n          });\n          return shippingData;\n        })(),\n        // Totals: read what the user sees\n        subtotal: getText('.totals-section .total-row[data-field=\"subtotal\"] .calculated-field') || '$0.00',\n        tax: getText('.totals-section .total-row[data-field=\"tax\"] .editable-field') || '$0.00',\n        shipping: getText('.totals-section .total-row[data-field=\"shipping\"] .editable-field') || '$0.00',\n        other: getText('.totals-section .total-row[data-field=\"other\"] .editable-field') || '$0.00',\n        total: getText('.totals-section .total-row[data-field=\"total\"] .total-field') || '$0.00',\n        comments: getText('.comments-content .editable-field'),\n        contactInfo: getText('.contact-section .editable-field')\n      };\n      console.debug('🔎 Export DOM reads:', {\n        requisitioner: exportData.requisitioner,\n        shipVia: exportData.shipVia,\n        fob: exportData.fob,\n        shippingTerms: exportData.shippingTerms,\n        subtotal: exportData.subtotal,\n        tax: exportData.tax,\n        shipping: exportData.shipping,\n        other: exportData.other,\n        total: exportData.total\n      });\n      console.log('📄 Export data prepared:', exportData);\n      console.log('🔀 Major sections order being sent to XML:', exportData.majorSectionsOrder);\n      console.log('🔀 Section order being sent to XML:', exportData.sectionOrder);\n      console.log('🔀 Sections 1&2 order:', exportData.sectionOrder.sections1And2);\n      console.log('🔀 Sections 3&4 order:', exportData.sectionOrder.sections3And4);\n      console.log('🔀 Sections 3&4 + 5&6 order:', exportData.sectionOrder.sections3And4And5And6);\n      console.log('🔀 Line item columns order:', exportData.sectionOrder.lineItemColumns);\n      console.log('🔀 Shipping columns order:', exportData.sectionOrder.shippingColumns);\n      console.log('🔀 Line items data:', exportData.lineItems);\n\n      // CRITICAL: Log field order information\n      console.log('🔀 Field order being sent to XML:', exportData.fieldOrder);\n      console.log('🔀 Company field order:', exportData.fieldOrder.company);\n      console.log('🔀 Purchase order field order:', exportData.fieldOrder.purchaseOrder);\n      console.log('🔀 Vendor field order:', exportData.fieldOrder.vendor);\n      console.log('🔀 Ship-to field order:', exportData.fieldOrder.shipTo);\n\n      // Generate XML\n      const xml = generatePurchaseOrderXML(exportData);\n\n      // Display XML in a modal instead of downloading\n      displayXMLOutput(xml);\n\n      // Update export timestamp\n      setLastExportTime(new Date().toISOString());\n      showNotification('📄 XML generated successfully!', 'success');\n      console.log('✅ XML generation completed successfully');\n    } catch (error) {\n      console.error('❌ XML generation failed:', error);\n      showNotification(`❌ XML generation failed: ${error.message}`, 'error');\n    }\n  };\n\n  // Show notification function\n  const showNotification = (message, type = 'info') => {\n    // Remove any existing notifications\n    const existingNotification = document.querySelector('.notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <span class=\"notification-message\">${message}</span>\n        <button class=\"notification-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Add to notification container\n    const container = document.getElementById('notification-container');\n    if (container) {\n      container.appendChild(notification);\n    } else {\n      // Fallback to body if container not found\n      document.body.appendChild(notification);\n    }\n\n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      if (notification.parentElement) {\n        notification.remove();\n      }\n    }, 3000);\n  };\n\n  // Get current form statistics\n  const getFormStats = () => {\n    return {\n      totalFields: companyFields.length + purchaseOrderFields.length + vendorFields.length + shipToFields.length,\n      companyFields: companyFields.length,\n      purchaseOrderFields: purchaseOrderFields.length,\n      vendorFields: vendorFields.length,\n      shipToFields: shipToFields.length,\n      totalChanges: changeHistory.length,\n      lastModified: Math.max(new Date(lastModified).getTime(), new Date(poLastModified).getTime())\n    };\n  };\n\n  // Handle company field drag and drop with timestamp update\n  const handleCompanyDragEnd = event => {\n    _s6();\n    useCompanyFieldsDragEnd(setCompanyFields)(event);\n    updateCompanyFieldsTimestamp();\n\n    // CRITICAL: Update field order state to preserve drag-and-drop order (same pattern as section swapping)\n    if (event.active.id !== event.over.id) {\n      setCompanyFieldOrder(prevOrder => {\n        const oldIndex = prevOrder.indexOf(event.active.id);\n        const newIndex = prevOrder.indexOf(event.over.id);\n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, event.active.id);\n        console.log('🔄 Company field order updated:', {\n          oldIndex,\n          newIndex,\n          newOrder\n        });\n        return newOrder;\n      });\n      console.log('🔄 Company fields reordered');\n    }\n  };\n\n  // ============================================================================\n  // SUMMARY LOGGING FUNCTION\n  // ============================================================================\n\n  // Function to log a summary of all field states\n  _s6(handleCompanyDragEnd, \"Z4WIFLscuzsxuDjcfj/36TQtLNg=\", false, function () {\n    return [useCompanyFieldsDragEnd];\n  });\n  const logFieldSummary = () => {\n    console.log('📊 FIELD SUMMARY:', {\n      company: {\n        total: companyFields.length,\n        lastModified: new Date(lastModified).toLocaleString(),\n        fields: companyFields.map(f => ({\n          id: f.id,\n          label: f.label\n        }))\n      },\n      purchaseOrder: {\n        total: purchaseOrderFields.length,\n        lastModified: new Date(poLastModified).toLocaleString(),\n        fields: purchaseOrderFields.map(f => ({\n          id: f.id,\n          label: f.label,\n          isTitle: f.isTitle\n        }))\n      }\n    });\n  };\n\n  // Log summary on component mount\n  React.useEffect(() => {\n    logFieldSummary();\n  }, []); // Only run once on mount\n\n  // ============================================================================\n  // PURCHASE ORDER FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n\n  // Helper function to update timestamp when purchase order fields change\n  const updatePurchaseOrderFieldsTimestamp = () => {\n    setPoLastModified(new Date().toISOString());\n  };\n\n  // Add new purchase order field\n  const handleAddPurchaseOrderField = newField => {\n    setPurchaseOrderFields(prevFields => [...prevFields, newField]);\n    updatePurchaseOrderFieldsTimestamp();\n    console.log('➕ Added new purchase order field:', newField);\n  };\n\n  // Remove purchase order field\n  const handleRemovePurchaseOrderField = fieldId => {\n    setPurchaseOrderFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      showNotification(`🗑️ Removed purchase order field: \"${fieldToRemove === null || fieldToRemove === void 0 ? void 0 : fieldToRemove.label}\"`, 'warning');\n      console.log('🗑️ Removed purchase order field:', fieldToRemove);\n      return prevFields.filter(field => field.id !== fieldId);\n    });\n    updatePurchaseOrderFieldsTimestamp();\n  };\n\n  // ============================================================================\n  // VENDOR FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n\n  // Add new vendor field\n  const handleAddVendorField = newField => {\n    setVendorFields(prevFields => [...prevFields, newField]);\n    console.log('➕ Added new vendor field:', newField);\n    showNotification(`➕ Added vendor field: \"${newField.label}\"`, 'success');\n  };\n\n  // Remove vendor field\n  const handleRemoveVendorField = fieldId => {\n    setVendorFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      showNotification(`🗑️ Removed vendor field: \"${fieldToRemove === null || fieldToRemove === void 0 ? void 0 : fieldToRemove.label}\"`, 'warning');\n      console.log('🗑️ Removed vendor field:', fieldToRemove);\n      return prevFields.filter(field => field.id !== fieldId);\n    });\n  };\n\n  // Handle vendor field label changes\n  const handleVendorFieldLabelChange = (fieldId, newLabel) => {\n    setVendorFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      logChange('label-change', fieldId, oldLabel, newLabel, 'vendor');\n      return prevFields.map(field => field.id === fieldId ? {\n        ...field,\n        label: newLabel\n      } : field);\n    });\n  };\n\n  // ============================================================================\n  // SHIP-TO FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n\n  // Add new ship-to field\n  const handleAddShipToField = newField => {\n    setShipToFields(prevFields => [...prevFields, newField]);\n    console.log('➕ Added new ship-to field:', newField);\n    showNotification(`➕ Added ship-to field: \"${newField.label}\"`, 'success');\n  };\n\n  // Remove ship-to field\n  const handleRemoveShipToField = fieldId => {\n    setShipToFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      showNotification(`🗑️ Removed ship-to field: \"${fieldToRemove === null || fieldToRemove === void 0 ? void 0 : fieldToRemove.label}\"`, 'warning');\n      console.log('🗑️ Removed ship-to field:', fieldToRemove);\n      return prevFields.filter(field => field.id !== fieldId);\n    });\n  };\n\n  // Add new line item row\n  const handleAddLineItemRow = () => {\n    setLineItemRows(prevRows => {\n      const newRowNumber = Math.max(...prevRows) + 1;\n      const newRows = [...prevRows, newRowNumber];\n      console.log('➕ Added new line item row:', newRowNumber);\n      showNotification(`➕ Added new line item row ${newRowNumber}`, 'success');\n      return newRows;\n    });\n  };\n\n  // Add new line item column\n  const handleAddLineItemColumn = () => {\n    setLineItemColumnOrder(prevOrder => {\n      // Generate a more descriptive column ID\n      const columnTypes = ['Status', 'Priority', 'Category', 'Location', 'Supplier', 'Date', 'Notes', 'Reference'];\n      const randomType = columnTypes[Math.floor(Math.random() * columnTypes.length)];\n      const newColumnId = `custom-${randomType.toLowerCase()}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const newOrder = [...prevOrder, newColumnId];\n      console.log('➕ Added new line item column:', newColumnId);\n      showNotification(`➕ Added new ${randomType} column`, 'success');\n      return newOrder;\n    });\n  };\n\n  // Handle ship-to field label changes\n  const handleShipToFieldLabelChange = (fieldId, newLabel) => {\n    setShipToFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      logChange('label-change', fieldId, oldLabel, newLabel, 'ship-to');\n      return prevFields.map(field => field.id === fieldId ? {\n        ...field,\n        label: newLabel\n      } : field);\n    });\n  };\n\n  // Handle purchase order field drag and drop with timestamp update\n  const handlePurchaseOrderDragEnd = event => {\n    _s7();\n    usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields)(event);\n    updatePurchaseOrderFieldsTimestamp();\n\n    // CRITICAL: Update field order state to preserve drag-and-drop order (same pattern as section swapping)\n    if (event.active.id !== event.over.id) {\n      setPurchaseOrderFieldOrder(prevOrder => {\n        const oldIndex = prevOrder.indexOf(event.active.id);\n        const newIndex = prevOrder.indexOf(event.over.id);\n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, event.active.id);\n        console.log('🔄 Purchase order field order updated:', {\n          oldIndex,\n          newIndex,\n          newOrder\n        });\n        return newOrder;\n      });\n      console.log('🔄 Purchase order fields reordered');\n    }\n  };\n\n  // ============================================================================\n  // SECTION-LEVEL DRAG AND DROP\n  // ============================================================================\n\n  // State for vendor/ship-to section order\n  _s7(handlePurchaseOrderDragEnd, \"v6fWquKCV6fyV8vMqH2r576JyB4=\", false, function () {\n    return [usePurchaseOrderFieldsDragEnd];\n  });\n  const [vendorShipToSectionOrder, setVendorShipToSectionOrder] = useState(['section3', 'section4']);\n  const [vendorShipToShippingGroupOrder, setVendorShipToShippingGroupOrder] = useState(['vendor-ship-to-shipping-group']);\n\n  // State for sections 1 and 2 order (Company Info and Purchase Order)\n  const [sections1And2Order, setSections1And2Order] = useState(['section1', 'section2']);\n\n  // State for sections 5 and 6 order (Vendor/Ship-To and Shipping Details)\n  const [sections5And6Order, setSections5And6Order] = useState(['section5']);\n\n  // State for major sections order (vendor-shipto-group and shipping-section)\n  const [majorSectionsOrder, setMajorSectionsOrder] = useState(['vendor-shipto-group', 'shipping-section']);\n\n  // State for vendor-ship-to and shipping-details sections order (simplified after removing section 7)\n  const [vendorShipToAndShippingDetailsOrder, setVendorShipToAndShippingDetailsOrder] = useState(['section5']);\n\n  // CRITICAL: Add field order state management (same pattern as section order)\n  // State for company field order (preserves drag-and-drop order independently of section position)\n  const [companyFieldOrder, setCompanyFieldOrder] = useState([]);\n\n  // State for purchase order field order (preserves drag-and-drop order independently of section position)\n  const [purchaseOrderFieldOrder, setPurchaseOrderFieldOrder] = useState([]);\n\n  // Initialize field order states with current field IDs\n  React.useEffect(() => {\n    setCompanyFieldOrder(companyFields.map(field => field.id));\n  }, [companyFields]);\n  React.useEffect(() => {\n    setPurchaseOrderFieldOrder(purchaseOrderFields.map(field => field.id));\n  }, [purchaseOrderFields]);\n\n  // Line item column order state\n  const [lineItemColumnOrder, setLineItemColumnOrder] = useState(['itemNumber', 'description', 'qty', 'rate', 'amount']);\n\n  // Log line item column order changes\n  useEffect(() => {\n    console.log('🔀 Line item column order updated:', lineItemColumnOrder);\n  }, [lineItemColumnOrder]);\n\n  // Shipping column order state\n  const [shippingColumnOrder, setShippingColumnOrder] = useState(['requisitioner', 'shipVia', 'fob', 'shippingTerms']);\n\n  // Log shipping column order changes\n  useEffect(() => {\n    console.log('🚢 Shipping column order updated:', shippingColumnOrder);\n  }, [shippingColumnOrder]);\n\n  // Comments and Totals section order state (Section 8 & 9)\n  const [commentsTotalsSectionOrder, setCommentsTotalsSectionOrder] = useState(['section8', 'section9']);\n\n  // Function to handle drag start\n  const handleDragStart = event => {\n    const {\n      active\n    } = event;\n\n    // Add dragging state to the dragged element\n    if (active.id === 'section1' || active.id === 'section2') {\n      const element = document.getElementById(active.id);\n      if (element) {\n        element.setAttribute('data-is-dragging', 'true');\n\n        // Add visual feedback\n        element.style.border = '3px solid #ff6b6b';\n        element.style.backgroundColor = 'rgba(255, 107, 107, 0.1)';\n      }\n    }\n  };\n\n  // Function to handle drag over\n  const handleDragOver = event => {\n    const {\n      active,\n      over\n    } = event;\n\n    // Handle section reordering drag over\n    if (active.id === 'section1' || active.id === 'section2') {\n      if (over && (over.id === 'section1' || over.id === 'section2')) {\n        // Add over state to the target element\n        const targetElement = document.getElementById(over.id);\n        if (targetElement) {\n          targetElement.setAttribute('data-is-over', 'true');\n\n          // Enhanced visual feedback for section reordering\n          targetElement.style.border = '3px solid #4ecdc4';\n          targetElement.style.backgroundColor = 'rgba(78, 205, 196, 0.15)';\n          targetElement.style.transform = 'scale(1.01)';\n          targetElement.style.transition = 'all 0.2s ease-in-out';\n          targetElement.style.boxShadow = '0 6px 20px rgba(78, 205, 196, 0.3)';\n        }\n      }\n    }\n  };\n\n  // Function to handle section reordering\n  const handleSectionDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!active || !over) {\n      return;\n    }\n    if (active.id !== over.id) {\n      setSections1And2Order(prevOrder => {\n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        console.log('🔄 Index calculations:', {\n          oldIndex,\n          newIndex\n        });\n        if (oldIndex === -1 || newIndex === -1) {\n          console.log('❌ Invalid indices found');\n          return prevOrder;\n        }\n        const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\n        console.log('🔄 New section order:', newOrder);\n        console.log('✅ Section swap successful!');\n        showNotification('🔄 Sections swapped successfully!', 'success');\n        console.log('✅ Sections swapped via drag & drop!');\n        return newOrder;\n      });\n\n      // Clean up data attributes and visual feedback\n      const section1Element = document.getElementById('section1');\n      const section2Element = document.getElementById('section2');\n      if (section1Element) {\n        section1Element.removeAttribute('data-is-dragging');\n        section1Element.removeAttribute('data-is-over');\n        section1Element.style.border = '';\n        section1Element.style.backgroundColor = '';\n      }\n      if (section2Element) {\n        section2Element.removeAttribute('data-is-dragging');\n        section2Element.removeAttribute('data-is-over');\n        section2Element.style.border = '';\n        section2Element.style.backgroundColor = '';\n      }\n    } else {\n      console.log('🔍 No section swap - same position');\n\n      // Clean up data attributes and visual feedback even if no swap\n      const section1Element = document.getElementById('section1');\n      const section2Element = document.getElementById('section2');\n      if (section1Element) {\n        section1Element.removeAttribute('data-is-dragging');\n        section1Element.removeAttribute('data-is-over');\n        section1Element.style.border = '';\n        section1Element.style.backgroundColor = '';\n      }\n      if (section2Element) {\n        section2Element.removeAttribute('data-is-dragging');\n        section2Element.removeAttribute('data-is-over');\n        section2Element.style.border = '';\n        section2Element.style.backgroundColor = '';\n      }\n    }\n  };\n\n  // Function to handle sections 5 and 6 reordering (Vendor/Ship-To and Shipping Details)\n  const handleSections5And6DragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    console.log('🔍 SECTIONS 5&6 DRAG DEBUG - Event received:', {\n      active,\n      over\n    });\n    if (active.id !== over.id) {\n      console.log('🔄 Sections 5&6 swap detected!', {\n        active: active.id,\n        over: over.id\n      });\n      setSections5And6Order(prevOrder => {\n        console.log('🔄 Previous sections 5&6 order:', prevOrder);\n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        console.log('🔄 Index calculations:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, active.id);\n        console.log('🔄 New sections 5&6 order:', newOrder);\n        showNotification('🔄 Sections 5 and 6 reordered!', 'info');\n        console.log('🔄 Sections 5&6 reordered via drag & drop!');\n        console.log('📊 New section order:', newOrder);\n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No sections 5&6 swap - same position');\n    }\n  };\n\n  // Handle line item column drag end\n  const handleLineItemColumnDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    console.log('🔍 LINE ITEM COLUMN DRAG DEBUG - Event received:', {\n      active: active.id,\n      over: over.id\n    });\n    if (active.id !== over.id) {\n      console.log('🔄 Line item column swap detected!', {\n        active: active.id,\n        over: over.id\n      });\n\n      // Extract column IDs from the header IDs (remove 'line-item-header-' prefix)\n      const activeColumnId = active.id.replace('line-item-header-', '');\n      const overColumnId = over.id.replace('line-item-header-', '');\n      setLineItemColumnOrder(items => {\n        const oldIndex = items.indexOf(activeColumnId);\n        const newIndex = items.indexOf(overColumnId);\n        console.log('🔍 Column ID extraction:', {\n          activeColumnId,\n          overColumnId\n        });\n        console.log('🔄 Previous line item column order:', items);\n        console.log('🔀 Index calculations:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('🔄 New line item column order:', newOrder);\n        showNotification('🔄 Line item columns reordered!', 'info');\n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No line item column swap - same position');\n    }\n  };\n\n  // Handle shipping column drag end\n  const handleShippingColumnDragEnd = event => {\n    // Check if this is an add-column event from Section5Shipping\n    if (event.type === 'add-column' && event.newOrder) {\n      console.log('🔍 SHIPPING COLUMN ADD DEBUG - New column added:', event.newOrder);\n      setShippingColumnOrder(event.newOrder);\n      showNotification('🚢 New shipping column added!', 'success');\n      return;\n    }\n\n    // Check if this is the new event format from Section5Shipping (reordering)\n    if (event.newOrder) {\n      console.log('🔍 SHIPPING COLUMN DRAG DEBUG - New order received:', event.newOrder);\n      setShippingColumnOrder(event.newOrder);\n      showNotification('🚢 Shipping columns reordered!', 'info');\n      return;\n    }\n\n    // Handle the old event format (fallback)\n    const {\n      active,\n      over\n    } = event;\n    console.log('🔍 SHIPPING COLUMN DRAG DEBUG - Event received:', {\n      active: active.id,\n      over: over.id\n    });\n    if (active.id !== over.id) {\n      console.log('🔄 Shipping column swap detected!', {\n        active: active.id,\n        over: over.id\n      });\n      setShippingColumnOrder(items => {\n        const oldIndex = items.indexOf(active.id);\n        const newIndex = items.indexOf(over.id);\n        console.log('🔄 Previous shipping column order:', items);\n        console.log('🔀 Index calculations:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        console.log('🔄 New shipping column order:', newOrder);\n        showNotification('🚢 Shipping columns reordered!', 'info');\n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No shipping column swap - same position');\n    }\n  };\n\n  // Handle Comments and Totals section drag end\n  const handleCommentsTotalsDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setCommentsTotalsSectionOrder(items => {\n        const oldIndex = items.indexOf(active.id);\n        const newIndex = items.indexOf(over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Function to handle vendor/ship-to section reordering\n  const handleVendorShipToSectionDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    console.log('🔍 VENDOR/SHIP-TO DRAG DEBUG - Event received:', {\n      active,\n      over\n    });\n    if (active.id !== over.id) {\n      console.log('🔄 Vendor/Ship-To section swap detected!', {\n        active: active.id,\n        over: over.id\n      });\n      setVendorShipToSectionOrder(prevOrder => {\n        console.log('🔄 Previous vendor/ship-to order:', prevOrder);\n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        console.log('🔄 Index calculations:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, active.id);\n        console.log('🔄 New vendor/ship-to order:', newOrder);\n\n        // The sections are already reordered by the code above, no need to swap field data\n        // Just show notification that sections were reordered\n        showNotification('🔄 Vendor and Ship To sections reordered!', 'info');\n        console.log('🔄 Vendor/Ship-To sections reordered via drag & drop!');\n        console.log('📊 New section order:', newOrder);\n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No vendor/ship-to swap - same position');\n    }\n  };\n\n  // Function to handle vendor-ship-to and shipping-details sections reordering\n  const handleVendorShipToAndShippingDetailsDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    console.log('🔍 VENDOR-SHIP-TO + SHIPPING DETAILS DRAG DEBUG - Event received:', {\n      active,\n      over\n    });\n    if (active.id !== over.id) {\n      console.log('🔄 Vendor-ShipTo + Shipping Details swap detected!', {\n        active: active.id,\n        over: over.id\n      });\n      setVendorShipToAndShippingDetailsOrder(prevOrder => {\n        console.log('🔄 Previous vendor-shipTo + shipping details order:', prevOrder);\n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        console.log('🔄 Index calculations:', {\n          oldIndex,\n          newIndex\n        });\n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, active.id);\n        console.log('🔄 New vendor-shipTo + shipping details order:', newOrder);\n        showNotification('🔄 Vendor-ShipTo and Shipping Details sections reordered!', 'info');\n        console.log('🔄 Vendor-ShipTo + Shipping Details sections reordered via drag & drop!');\n        console.log('📊 New section order:', newOrder);\n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No vendor-shipTo + shipping details swap - same position');\n    }\n  };\n\n  // ============================================================================\n  // SECTION SWAPPING FUNCTION\n  // ============================================================================\n\n  // Function to swap Section 1 and Section 2\n  const handleSwapSections = () => {\n    console.log('🔄 MANUAL SWAP FUNCTION CALLED');\n    console.log('🔄 Before swap - Company fields:', companyFields);\n    console.log('🔄 Before swap - Purchase Order fields:', purchaseOrderFields);\n\n    // Store current values before swapping\n    const companyFieldValues = companyFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    const purchaseOrderFieldValues = purchaseOrderFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        isTitle: field.isTitle,\n        // Explicitly preserve isTitle property\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    console.log('🔍 Before swap - Purchase Order fields:', purchaseOrderFieldValues);\n    console.log('🔍 Title field check:', purchaseOrderFieldValues.find(f => f.isTitle));\n\n    // IMPORTANT: Create new field arrays to avoid reference issues\n    const newCompanyFields = purchaseOrderFields.map(field => ({\n      ...field,\n      isTitle: field.isTitle // Ensure isTitle is preserved\n    }));\n    const newPurchaseOrderFields = companyFields.map(field => ({\n      ...field,\n      isTitle: false // Company fields should never be title\n    }));\n    console.log('🔄 About to swap fields...');\n    console.log('🔄 New company fields (with title check):', newCompanyFields.map(f => ({\n      id: f.id,\n      label: f.label,\n      isTitle: f.isTitle\n    })));\n    console.log('🔄 New PO fields (with title check):', newPurchaseOrderFields.map(f => ({\n      id: f.id,\n      label: f.label,\n      isTitle: f.isTitle\n    })));\n\n    // Swap the fields - keep Purchase Order section intact (title + date + po#)\n    setCompanyFields(newCompanyFields);\n    setPurchaseOrderFields(newPurchaseOrderFields);\n\n    // Update timestamps\n    setLastModified(new Date().toISOString());\n    setPoLastModified(new Date().toISOString());\n    showNotification('🔄 Sections swapped!', 'info');\n    console.log('🔄 Sections swapped successfully!');\n    console.log('📊 New Section 1 (was Section 2):', newCompanyFields);\n    console.log('📊 New Section 2 (was Section 1):', newPurchaseOrderFields);\n\n    // Log the swap operation\n    console.log('🔄 Section Swap Details:', {\n      'Section 1 → Section 2': newCompanyFields.map(f => ({\n        id: f.id,\n        label: f.label,\n        value: f.value,\n        isTitle: f.isTitle\n      })),\n      'Section 2 → Section 1': newPurchaseOrderFields.map(f => ({\n        id: f.id,\n        label: f.label,\n        value: f.value,\n        isTitle: f.isTitle\n      }))\n    });\n  };\n\n  // Function to manually swap Vendor and Ship To sections\n  const handleSwapVendorShipTo = () => {\n    console.log('🔄 MANUAL VENDOR/SHIP-TO SWAP FUNCTION CALLED');\n    console.log('🔄 Before swap - Vendor fields:', vendorFields);\n    console.log('🔄 Before swap - Ship To fields:', shipToFields);\n\n    // Store current values before swapping\n    const vendorFieldValues = vendorFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    const shipToFieldValues = shipToFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    console.log('🔍 Before swap - Vendor field values:', vendorFieldValues);\n    console.log('🔍 Before swap - Ship To field values:', shipToFieldValues);\n\n    // Swap the fields\n    setVendorFields(shipToFieldValues);\n    setShipToFields(vendorFieldValues);\n\n    // Update section order\n    setVendorShipToSectionOrder(prevOrder => {\n      const newOrder = [...prevOrder].reverse();\n      return newOrder;\n    });\n    showNotification('🔄 Vendor and Ship To sections swapped!', 'info');\n    console.log('🔄 Vendor and Ship To sections swapped successfully!');\n    console.log('📊 New Vendor fields (was Ship To):', shipToFieldValues);\n    console.log('📊 New Ship To fields (was Vendor):', vendorFieldValues);\n\n    // Log the swap operation\n    console.log('🔄 Vendor/Ship-To Swap Details:', {\n      'Vendor → Ship To': shipToFieldValues.map(f => ({\n        id: f.id,\n        label: f.label,\n        value: f.value\n      })),\n      'Ship To → Vendor': vendorFieldValues.map(f => ({\n        id: f.id,\n        label: f.label,\n        value: f.value\n      }))\n    });\n  };\n\n  // ============================================================================\n  // FIELD VALUE CAPTURE\n  // ============================================================================\n\n  // Function to capture current field values from the DOM\n  const captureFieldValues = () => {\n    console.log('📝 Capturing field values from DOM...');\n\n    // Capture company field values - PRESERVE CURRENT ORDER\n    console.log('🔍 DEBUG: Current company fields order before capture:', companyFields.map(f => ({\n      id: f.id,\n      label: f.label\n    })));\n    const updatedCompanyFields = companyFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 Company field \"${field.label}\": \"${value}\"`);\n      return {\n        ...field,\n        value\n      };\n    });\n    console.log('🔍 DEBUG: Updated company fields order after capture:', updatedCompanyFields.map(f => ({\n      id: f.id,\n      label: f.label\n    })));\n\n    // Capture purchase order field values\n    const updatedPurchaseOrderFields = purchaseOrderFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 PO field \"${field.label}\": \"${value}\"`);\n      return {\n        ...field,\n        value\n      };\n    });\n\n    // Capture vendor field values\n    const updatedVendorFields = vendorFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 Vendor field \"${field.label}\": \"${value}\"`);\n      return {\n        ...field,\n        value\n      };\n    });\n\n    // Capture ship-to field values\n    const updatedShipToFields = shipToFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 Ship-to field \"${field.label}\": \"${value}\"`);\n      return {\n        ...field,\n        value\n      };\n    });\n\n    // Capture line item values from the table\n    const capturedLineItems = [];\n    // Get the actual number of rows from the table\n    const actualRows = document.querySelectorAll('.itemtable tbody tr').length;\n    console.log(`📝 Capturing ${actualRows} line item rows...`);\n    console.log(`📝 Line item column order:`, lineItemColumnOrder);\n    for (let rowIndex = 0; rowIndex < actualRows; rowIndex++) {\n      const rowData = {};\n      lineItemColumnOrder.forEach(columnId => {\n        const cellSelector = `tr:nth-child(${rowIndex + 1}) td[data-column=\"${columnId}\"] .editable-field`;\n        const cell = document.querySelector(`.itemtable tbody ${cellSelector}`);\n        const value = cell ? cell.textContent.trim() : '';\n        rowData[columnId] = value;\n        console.log(`📝 Row ${rowIndex + 1}, Column ${columnId}: \"${value}\" (selector: \"${cellSelector}\")`);\n\n        // Debug: Check if cell exists and what's in it\n        if (!cell) {\n          console.warn(`⚠️ Cell not found for selector: \"${cellSelector}\"`);\n          // Try to find the td element to see what's there\n          const tdElement = document.querySelector(`.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-column=\"${columnId}\"]`);\n          if (tdElement) {\n            console.log(`🔍 Found td element:`, tdElement);\n            console.log(`🔍 td content:`, tdElement.innerHTML);\n          } else {\n            console.warn(`⚠️ td element not found for column: ${columnId}`);\n          }\n        }\n      });\n      capturedLineItems.push(rowData);\n    }\n    console.log('📝 Line items captured:', capturedLineItems);\n\n    // Capture totals field values using the new state structure\n    const updatedTotalsFields = totalsFields.map(field => {\n      let value = field.value; // Default to current state value\n\n      // For editable fields, try to get from DOM\n      if (!field.isCalculated) {\n        const selector = `.totals-section .total-row[data-field=\"${field.id}\"] .editable-field`;\n        const element = document.querySelector(selector);\n        if (element) {\n          value = element.textContent.trim();\n        }\n      }\n      console.log(`📝 Totals field \"${field.label}\": \"${value}\"`);\n      return {\n        ...field,\n        value\n      };\n    });\n\n    // Update state with captured values\n    setCompanyFields(updatedCompanyFields);\n    setPurchaseOrderFields(updatedPurchaseOrderFields);\n    setVendorFields(updatedVendorFields);\n    setShipToFields(updatedShipToFields);\n    setTotalsFields(updatedTotalsFields);\n    console.log('📝 Field values captured and state updated!');\n    return {\n      companyFields: updatedCompanyFields,\n      purchaseOrderFields: updatedPurchaseOrderFields,\n      vendorFields: updatedVendorFields,\n      shipToFields: updatedShipToFields,\n      lineItems: capturedLineItems,\n      totalsFields: updatedTotalsFields\n    };\n  };\n\n  // Unified drag end dispatcher for a single top-level DndContext\n  const handleRootDragEnd = event => {\n    var _active$data2, _active$data2$current;\n    const {\n      active\n    } = event;\n    const activeId = (active === null || active === void 0 ? void 0 : active.id) || '';\n    const source = active === null || active === void 0 ? void 0 : (_active$data2 = active.data) === null || _active$data2 === void 0 ? void 0 : (_active$data2$current = _active$data2.current) === null || _active$data2$current === void 0 ? void 0 : _active$data2$current.source;\n\n    // Reset section handle dragging state\n    setIsSectionHandleDragging(false);\n\n    // Clean up all visual feedback states\n    const allSections = document.querySelectorAll('[id^=\"section\"]');\n    allSections.forEach(section => {\n      section.removeAttribute('data-is-over');\n      section.removeAttribute('data-is-dragging');\n\n      // Reset styles\n      section.style.border = '';\n      section.style.backgroundColor = '';\n      section.style.transform = '';\n      section.style.transition = '';\n      section.style.boxShadow = '';\n\n      // Remove drop indicators\n      const dropIndicator = section.querySelector('.drop-indicator');\n      if (dropIndicator) {\n        dropIndicator.remove();\n      }\n    });\n    if (source === 'palette') {\n      handlePaletteDragEnd(event);\n      return;\n    }\n\n    // Sections 1 & 2 swap\n    if (activeId === 'section1' || activeId === 'section2') {\n      handleSectionDragEnd(event);\n      return;\n    }\n    // Vendor-ShipTo + ShippingDetails container swap\n    if (activeId === 'sections3And4' || activeId === 'sections5And6') {\n      handleVendorShipToAndShippingDetailsDragEnd(event);\n      return;\n    }\n    // Vendor or Ship-To section reordering\n    if (activeId === 'section3' || activeId === 'section4') {\n      handleVendorShipToSectionDragEnd(event);\n      return;\n    }\n    // Vendor or Ship-To individual field drags\n    if (String(activeId).startsWith('vendor-')) {\n      handleVendorDragEnd(event);\n      return;\n    }\n    if (String(activeId).startsWith('ship-to-')) {\n      handleShipToDragEnd(event);\n      return;\n    }\n    // Line item column reorder\n    if (['itemNumber', 'description', 'qty', 'rate', 'amount'].includes(activeId)) {\n      handleLineItemColumnDragEnd(event);\n      return;\n    }\n    // Comments & totals sections reorder\n    if (activeId === 'section8' || activeId === 'section9') {\n      handleCommentsTotalsDragEnd(event);\n      return;\n    }\n  };\n\n  // State for tracking section handle drag operations (simplified)\n  const [isSectionHandleDragging, setIsSectionHandleDragging] = useState(false);\n  const handleVendorShipToDragEnd = event => {\n    var _active$data3, _over$data;\n    const {\n      active,\n      over\n    } = event;\n    console.log('🔄 Individual sections drag end:', {\n      active: active === null || active === void 0 ? void 0 : active.id,\n      over: over === null || over === void 0 ? void 0 : over.id,\n      activeData: active === null || active === void 0 ? void 0 : (_active$data3 = active.data) === null || _active$data3 === void 0 ? void 0 : _active$data3.current,\n      overData: over === null || over === void 0 ? void 0 : (_over$data = over.data) === null || _over$data === void 0 ? void 0 : _over$data.current,\n      vendorShipToSectionOrder: vendorShipToSectionOrder\n    });\n\n    // Only handle reordering between sections 3 and 4 within the group\n    if (active.id !== over.id && (active.id === 'section3' || active.id === 'section4') && (over.id === 'section3' || over.id === 'section4')) {\n      const oldIndex = vendorShipToSectionOrder.indexOf(active.id);\n      const newIndex = vendorShipToSectionOrder.indexOf(over.id);\n      if (oldIndex !== -1 && newIndex !== -1) {\n        const newOrder = arrayMove(vendorShipToSectionOrder, oldIndex, newIndex);\n        setVendorShipToSectionOrder(newOrder);\n        console.log('🔄 Vendor/Ship-To sections reordered:', {\n          from: active.id,\n          to: over.id,\n          newOrder: newOrder\n        });\n        addToChangeHistory('section-reorder', `${active.id} → ${over.id}`, newOrder.join(', '));\n        showNotification('✅ Sections 3 and 4 reordered successfully', 'success');\n      }\n    } else {\n      console.log('🚫 Not handling this drag in individual context - might be group drag');\n    }\n  };\n  const handleVendorShipToShippingGroupDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      console.log('🔄 Vendor-Ship-To-Shipping group drag ended:', {\n        active: active.id,\n        over: over.id\n      });\n\n      // For now, this group can only be in one position\n      // In the future, this could be expanded to allow reordering with other major sections\n    }\n  };\n\n  // Handle major sections drag end (vendor-shipto-group and shipping-section)\n  const handleMajorSectionsDragEnd = event => {\n    var _active$data4, _over$data2;\n    const {\n      active,\n      over\n    } = event;\n    console.log('🚀 Major sections drag end called:', {\n      active: active === null || active === void 0 ? void 0 : active.id,\n      over: over === null || over === void 0 ? void 0 : over.id,\n      activeData: active === null || active === void 0 ? void 0 : (_active$data4 = active.data) === null || _active$data4 === void 0 ? void 0 : _active$data4.current,\n      overData: over === null || over === void 0 ? void 0 : (_over$data2 = over.data) === null || _over$data2 === void 0 ? void 0 : _over$data2.current,\n      majorSectionsOrder: majorSectionsOrder\n    });\n    if (!active || !over || active.id === over.id) {\n      console.log('❌ Early return:', {\n        noActive: !active,\n        noOver: !over,\n        sameId: (active === null || active === void 0 ? void 0 : active.id) === (over === null || over === void 0 ? void 0 : over.id)\n      });\n      return;\n    }\n    console.log('🔄 Major sections drag end:', {\n      active: active.id,\n      over: over.id\n    });\n\n    // Check if we're dragging the vendor-shipto-group or shipping-section\n    if ((active.id === 'vendor-shipto-group' || active.id === 'shipping-section') && (over.id === 'vendor-shipto-group' || over.id === 'shipping-section')) {\n      setMajorSectionsOrder(prevOrder => {\n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        if (oldIndex !== -1 && newIndex !== -1) {\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\n          console.log('🔄 Major sections reordered:', {\n            from: active.id,\n            to: over.id,\n            newOrder: newOrder\n          });\n\n          // Add to change history\n          addToChangeHistory('major-sections-swap', active.id === 'vendor-shipto-group' ? 'Vendor & Ship To Group' : 'Shipping Section', `Swapped with ${over.id === 'vendor-shipto-group' ? 'Vendor & Ship To Group' : 'Shipping Section'}`);\n          showNotification('🔄 Sections 3+4 swapped with Section 5!', 'success');\n          return newOrder;\n        }\n        return prevOrder;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `purchase-order-container ${!sidebarVisible ? 'sidebar-hidden' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: rectIntersection,\n      onDragCancel: () => {\n        console.log('❌ Drag cancelled');\n      },\n      onDragMove: event => {\n        console.log('🔄 Drag move:', event);\n      },\n      onDragStart: event => {\n        console.log('🚀 DndContext Drag Start:', event);\n        handleDragStart(event);\n      },\n      onDragOver: event => {\n        console.log('🎯 DndContext Drag Over:', event);\n        handleDragOver(event);\n      },\n      onDragEnd: event => {\n        console.log('🏁 DndContext Drag End:', event);\n        handleRootDragEnd(event);\n      },\n      children: [/*#__PURE__*/_jsxDEV(AvailableFields, {\n        isVisible: sidebarVisible,\n        onToggleVisibility: toggleSidebar,\n        showNotification: showNotification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2211,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"page-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            width: '100%',\n            textAlign: 'center',\n            marginBottom: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Purchase Order Management System\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2228,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Create, edit, and manage purchase orders with ease\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2229,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2227,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(SectionTitleColorPicker, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2231,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2219,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2218,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-section vendor-shipping-columns\",\n              children: /*#__PURE__*/_jsxDEV(SortableContext, {\n                items: sections1And2Order,\n                strategy: horizontalListSortingStrategy,\n                children: sections1And2Order.map((sectionId, index) => {\n                  if (sectionId === 'section1') {\n                    return /*#__PURE__*/_jsxDEV(DraggableSectionWrapper, {\n                      id: \"section1\",\n                      sectionNumber: \"1\",\n                      isSectionHandleDragging: isSectionHandleDragging,\n                      showDragHandle: true,\n                      children: /*#__PURE__*/_jsxDEV(Section1CompanyInfo, {\n                        companyFields: companyFields,\n                        sensors: sensors,\n                        onCompanyDragEnd: handleCompanyDragEnd,\n                        onAddCompanyField: handleAddCompanyField,\n                        onRemoveCompanyField: handleRemoveCompanyField,\n                        onLabelChange: handleCompanyFieldLabelChange,\n                        onContentChange: handleContentChange,\n                        lastModified: lastModified\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2259,\n                        columnNumber: 25\n                      }, this)\n                    }, `section1-${index}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2258,\n                      columnNumber: 23\n                    }, this);\n                  } else if (sectionId === 'section2') {\n                    return /*#__PURE__*/_jsxDEV(DraggableSectionWrapper, {\n                      id: \"section2\",\n                      sectionNumber: \"2\",\n                      isSectionHandleDragging: isSectionHandleDragging,\n                      showDragHandle: true,\n                      children: /*#__PURE__*/_jsxDEV(Section2PurchaseOrder, {\n                        purchaseOrderFields: purchaseOrderFields,\n                        sensors: sensors,\n                        onPurchaseOrderDragEnd: handlePurchaseOrderDragEnd,\n                        onAddPurchaseOrderField: handleAddPurchaseOrderField,\n                        onRemovePurchaseOrderField: handleRemovePurchaseOrderField,\n                        onLabelChange: handlePurchaseOrderFieldLabelChange,\n                        onContentChange: handleContentChange,\n                        lastModified: poLastModified\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2274,\n                        columnNumber: 25\n                      }, this)\n                    }, `section2-${index}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2273,\n                      columnNumber: 23\n                    }, this);\n                  }\n                  return null;\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2247,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2245,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2244,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"major-sections-container\",\n            children: /*#__PURE__*/_jsxDEV(DndContext, {\n              sensors: sensors,\n              collisionDetection: closestCenter,\n              onDragEnd: handleMajorSectionsDragEnd,\n              children: /*#__PURE__*/_jsxDEV(SortableContext, {\n                items: majorSectionsOrder,\n                strategy: verticalListSortingStrategy,\n                children: majorSectionsOrder.map((sectionGroup, index) => {\n                  if (sectionGroup === 'vendor-shipto-group') {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"section-container\",\n                      style: {\n                        marginTop: '30px',\n                        position: 'relative'\n                      },\n                      children: /*#__PURE__*/_jsxDEV(DraggableGroupHandle, {\n                        id: \"vendor-shipto-group\",\n                        label: \"Vendor & Ship To\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"vendor-shipping-columns\",\n                          children: /*#__PURE__*/_jsxDEV(DndContext, {\n                            sensors: sensors,\n                            collisionDetection: closestCenter,\n                            onDragEnd: handleVendorShipToDragEnd,\n                            children: /*#__PURE__*/_jsxDEV(SortableContext, {\n                              items: vendorShipToSectionOrder,\n                              strategy: horizontalListSortingStrategy,\n                              children: vendorShipToSectionOrder.map((sectionId, sectionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                                className: \"individual-section\",\n                                children: sectionId === 'section3' ? /*#__PURE__*/_jsxDEV(DraggableSectionWrapper, {\n                                  id: \"section3\",\n                                  sectionNumber: \"3\",\n                                  isSectionHandleDragging: isSectionHandleDragging,\n                                  showDragHandle: true,\n                                  children: /*#__PURE__*/_jsxDEV(Section3Vendor, {\n                                    vendorFields: vendorFields,\n                                    sensors: sensors,\n                                    onVendorDragEnd: handleVendorDragEnd,\n                                    onAddVendorField: handleAddVendorField,\n                                    onRemoveVendorField: handleRemoveVendorField,\n                                    onLabelChange: handleVendorFieldLabelChange,\n                                    onContentChange: handleContentChange,\n                                    lastModified: Date.now()\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 2325,\n                                    columnNumber: 41\n                                  }, this)\n                                }, `section3-${sectionIndex}`, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 2324,\n                                  columnNumber: 39\n                                }, this) : sectionId === 'section4' ? /*#__PURE__*/_jsxDEV(DraggableSectionWrapper, {\n                                  id: \"section4\",\n                                  sectionNumber: \"4\",\n                                  isSectionHandleDragging: isSectionHandleDragging,\n                                  showDragHandle: true,\n                                  children: /*#__PURE__*/_jsxDEV(Section4ShipTo, {\n                                    shipToFields: shipToFields,\n                                    sensors: sensors,\n                                    onShipToDragEnd: handleShipToDragEnd,\n                                    onAddShipToField: handleAddShipToField,\n                                    onRemoveShipToField: handleRemoveShipToField,\n                                    onLabelChange: handleShipToFieldLabelChange,\n                                    onContentChange: handleContentChange,\n                                    lastModified: Date.now()\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 2338,\n                                    columnNumber: 41\n                                  }, this)\n                                }, \"section4\", false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 2337,\n                                  columnNumber: 39\n                                }, this) : null\n                              }, `${sectionId}-${sectionIndex}`, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 2322,\n                                columnNumber: 35\n                              }, this))\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2317,\n                              columnNumber: 31\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2312,\n                            columnNumber: 29\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2310,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2309,\n                        columnNumber: 25\n                      }, this)\n                    }, `vendor-shipto-group-${index}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2307,\n                      columnNumber: 23\n                    }, this);\n                  } else if (sectionGroup === 'shipping-section') {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        marginTop: '30px'\n                      },\n                      children: /*#__PURE__*/_jsxDEV(DraggableGroupHandle, {\n                        id: \"shipping-section\",\n                        label: \"Shipping\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"section-5\",\n                          children: /*#__PURE__*/_jsxDEV(Section5Shipping, {\n                            shippingColumnOrder: shippingColumnOrder,\n                            onShippingColumnDragEnd: handleShippingColumnDragEnd\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2363,\n                            columnNumber: 29\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2362,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2361,\n                        columnNumber: 25\n                      }, this)\n                    }, `shipping-section-${index}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2360,\n                      columnNumber: 23\n                    }, this);\n                  }\n                  return null;\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2300,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2295,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2294,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sortable-section items-section\",\n            style: {\n              marginBottom: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(DndContext, {\n              collisionDetection: closestCenter,\n              onDragEnd: handleLineItemColumnDragEnd,\n              children: /*#__PURE__*/_jsxDEV(SortableContext, {\n                items: lineItemColumnOrder.map(columnId => `line-item-header-${columnId}`),\n                strategy: horizontalListSortingStrategy,\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"itemtable\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2393,\n                        columnNumber: 19\n                      }, this), lineItemColumnOrder.map((columnId, index) => {\n                        const columnConfig = {\n                          itemNumber: {\n                            label: 'Item#',\n                            colSpan: 3\n                          },\n                          description: {\n                            label: 'Description',\n                            colSpan: 12\n                          },\n                          qty: {\n                            label: 'Qty',\n                            colSpan: 2\n                          },\n                          rate: {\n                            label: 'Rate',\n                            colSpan: 3\n                          },\n                          amount: {\n                            label: 'Amount',\n                            colSpan: 3\n                          }\n                        };\n\n                        // Handle custom columns\n                        if (columnId.startsWith('custom-')) {\n                          const customType = columnId.replace('custom-', '').split('-')[0]; // Get first part after 'custom-'\n                          const label = customType.charAt(0).toUpperCase() + customType.slice(1); // Capitalize first letter\n                          const config = {\n                            label: label,\n                            colSpan: 3\n                          };\n                          return /*#__PURE__*/_jsxDEV(SortableLineItemColumnHeader, {\n                            id: `line-item-header-${columnId}`,\n                            children: /*#__PURE__*/_jsxDEV(\"th\", {\n                              colSpan: config.colSpan,\n                              children: [label, \" ::\"]\n                            }, `${columnId}-${index}`, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2410,\n                              columnNumber: 27\n                            }, this)\n                          }, `header-${columnId}`, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2409,\n                            columnNumber: 25\n                          }, this);\n                        }\n                        const config = columnConfig[columnId];\n                        return /*#__PURE__*/_jsxDEV(SortableLineItemColumnHeader, {\n                          id: `line-item-header-${columnId}`,\n                          children: /*#__PURE__*/_jsxDEV(\"th\", {\n                            colSpan: config.colSpan,\n                            children: [config.label, \" ::\"]\n                          }, `${columnId}-${index}`, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2420,\n                            columnNumber: 25\n                          }, this)\n                        }, `header-${columnId}`, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2419,\n                          columnNumber: 23\n                        }, this);\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2392,\n                      columnNumber: 17\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2391,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: lineItemRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      className: \"draggable-row\",\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2431,\n                        columnNumber: 21\n                      }, this), lineItemColumnOrder.map((columnId, colIndex) => {\n                        const columnConfig = {\n                          itemNumber: {\n                            colSpan: 3,\n                            placeholder: 'Item number'\n                          },\n                          description: {\n                            colSpan: 12,\n                            placeholder: 'Item description'\n                          },\n                          qty: {\n                            colSpan: 2,\n                            placeholder: 'Qty'\n                          },\n                          rate: {\n                            colSpan: 3,\n                            placeholder: '$0.00'\n                          },\n                          amount: {\n                            colSpan: 3,\n                            placeholder: '$0.00'\n                          }\n                        };\n\n                        // Handle custom columns\n                        if (columnId.startsWith('custom-')) {\n                          const config = {\n                            colSpan: 3,\n                            placeholder: 'Custom value'\n                          };\n                          return /*#__PURE__*/_jsxDEV(\"td\", {\n                            colSpan: config.colSpan,\n                            \"data-column\": columnId,\n                            children: /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"editable-field\",\n                              contentEditable: \"true\",\n                              \"data-placeholder\": config.placeholder\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2446,\n                              columnNumber: 29\n                            }, this)\n                          }, `${row}-${columnId}-${rowIndex}-${colIndex}`, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2445,\n                            columnNumber: 27\n                          }, this);\n                        }\n                        const config = columnConfig[columnId];\n                        return /*#__PURE__*/_jsxDEV(\"td\", {\n                          colSpan: config.colSpan,\n                          \"data-column\": columnId,\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"editable-field\",\n                            contentEditable: \"true\",\n                            \"data-placeholder\": config.placeholder\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2454,\n                            columnNumber: 27\n                          }, this)\n                        }, `${row}-${columnId}-${rowIndex}-${colIndex}`, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2453,\n                          columnNumber: 25\n                        }, this);\n                      })]\n                    }, `row-${row}-${rowIndex}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2430,\n                      columnNumber: 19\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2428,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2390,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2389,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2385,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"add-buttons-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add-row-btn-grouped\",\n                onClick: handleAddLineItemRow,\n                children: \"+ Add Row\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2467,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add-column-btn-grouped\",\n                onClick: handleAddLineItemColumn,\n                children: \"+ Add Column\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2473,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2466,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2383,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n            items: commentsTotalsSectionOrder,\n            strategy: horizontalListSortingStrategy,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comments-totals-section\",\n              style: {\n                display: 'flex',\n                gap: '20px'\n              },\n              children: commentsTotalsSectionOrder.map((sectionId, index) => {\n                if (sectionId === 'section8') {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    id: \"section8\",\n                    className: \"sortable-section comments-section\",\n                    style: {\n                      flex: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(DraggableSectionHeader, {\n                      id: \"section8\",\n                      children: \"Comments or Special Instructions ::\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2491,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"section-content\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"comments-content\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"editable-field\",\n                          contentEditable: \"true\",\n                          \"data-placeholder\": \"Enter comments or special instructions...\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2496,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2495,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2494,\n                      columnNumber: 21\n                    }, this)]\n                  }, `section8-${index}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2490,\n                    columnNumber: 19\n                  }, this);\n                } else if (sectionId === 'section9') {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    id: \"section9\",\n                    className: \"sortable-section totals-section\",\n                    style: {\n                      flex: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(DraggableSectionHeader, {\n                      id: \"section9\",\n                      children: \"Totals ::\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2504,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"section-content\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"total-row\",\n                        \"data-field\": \"subtotal\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          children: \"SUBTOTAL:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2509,\n                          columnNumber: 25\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"calculated-field\",\n                          children: \"$0.00\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2510,\n                          columnNumber: 25\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2508,\n                        columnNumber: 23\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"total-row\",\n                        \"data-field\": \"tax\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          children: \"TAX:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2513,\n                          columnNumber: 25\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"editable-field\",\n                          contentEditable: \"true\",\n                          \"data-placeholder\": \"$0.00\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2514,\n                          columnNumber: 25\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2512,\n                        columnNumber: 23\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"total-row\",\n                        \"data-field\": \"shipping\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          children: \"SHIPPING:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2517,\n                          columnNumber: 25\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"editable-field\",\n                          contentEditable: \"true\",\n                          \"data-placeholder\": \"$0.00\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2518,\n                          columnNumber: 25\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2516,\n                        columnNumber: 23\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"total-row\",\n                        \"data-field\": \"other\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          children: \"OTHER:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2521,\n                          columnNumber: 25\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"editable-field\",\n                          contentEditable: \"true\",\n                          \"data-placeholder\": \"$0.00\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2522,\n                          columnNumber: 25\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2520,\n                        columnNumber: 23\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"total-row total-final\",\n                        \"data-field\": \"total\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          children: \"TOTAL:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2525,\n                          columnNumber: 25\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"calculated-field total-field\",\n                          children: \"$0.00\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2526,\n                          columnNumber: 25\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2524,\n                        columnNumber: 23\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2507,\n                      columnNumber: 21\n                    }, this)]\n                  }, `section9-${index}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2503,\n                    columnNumber: 19\n                  }, this);\n                }\n                return null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2486,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2485,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-section\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"contact-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Contact Information:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2542,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"editable-field\",\n                contentEditable: \"true\",\n                \"data-placeholder\": \"Enter contact information here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2543,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2541,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2540,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn preview-btn\",\n              onClick: togglePreviewMode,\n              children: isPreviewMode ? '👁️ Hide Preview' : '👁️ Show Preview'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2549,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: handleAIFill,\n              children: \"\\uD83E\\uDD16 AI Fill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2552,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn export-btn\",\n              onClick: exportToXML,\n              children: \"\\uD83D\\uDCC4 Generate XML\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2555,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2548,\n            columnNumber: 11\n          }, this), changeHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"change-history-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-header\",\n              children: [\"\\uD83D\\uDCDD Change History (\", changeHistory.length, \" changes)\", /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-history-btn\",\n                onClick: clearChangeHistory,\n                children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2565,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2563,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"change-list\",\n              children: [changeHistory.slice(0, 10).map((change, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"change-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"change-time\",\n                  children: new Date(change.timestamp).toLocaleTimeString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2572,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"change-type\",\n                  children: change.type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2575,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"change-field\",\n                  children: change.fieldId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2576,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"change-old\",\n                  children: change.oldValue || 'empty'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2577,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"change-arrow\",\n                  children: \"\\u2192\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2578,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"change-new\",\n                  children: change.newValue || 'empty'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2579,\n                  columnNumber: 21\n                }, this)]\n              }, `${change.id}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2571,\n                columnNumber: 19\n              }, this)), changeHistory.length > 10 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"change-more\",\n                children: [\"... and \", changeHistory.length - 10, \" more changes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2583,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2569,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2562,\n            columnNumber: 13\n          }, this), showXMLModal && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"xml-modal-overlay\",\n            onClick: closeXMLModal,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"xml-modal\",\n              onClick: e => e.stopPropagation(),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"xml-modal-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"\\uD83D\\uDCC4 Generated XML Output\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2596,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"xml-modal-close\",\n                  onClick: closeXMLModal,\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2597,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2595,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"xml-modal-content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"xml-output-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                    className: \"xml-code\",\n                    children: xmlOutput\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2601,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2600,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2599,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"xml-modal-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn copy-btn\",\n                  onClick: copyXMLToClipboard,\n                  children: \"\\uD83D\\uDCCB Copy XML\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2605,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn download-btn\",\n                  onClick: downloadXML,\n                  children: \"\\uD83D\\uDCE5 Download XML\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2608,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn close-btn\",\n                  onClick: closeXMLModal,\n                  children: \"Close\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2611,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2604,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2594,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2593,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2242,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2241,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notification-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2628,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2186,\n    columnNumber: 5\n  }, this);\n}\n_s8(PurchaseOrderForm, \"LkekfL4s6mAGaCI+uV9WVnyenbY=\", false, function () {\n  return [useDragAndDropSensors, useVendorFieldsDragEnd, useShipToFieldsDragEnd, useAIProvider];\n});\n_c6 = PurchaseOrderForm;\nexport default PurchaseOrderForm;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"DraggableSectionWrapper\");\n$RefreshReg$(_c2, \"SortableShippingColumnHeader\");\n$RefreshReg$(_c3, \"SortableLineItemColumnHeader\");\n$RefreshReg$(_c4, \"DraggableSectionHeader\");\n$RefreshReg$(_c5, \"DraggableGroupHandle\");\n$RefreshReg$(_c6, \"PurchaseOrderForm\");","map":{"version":3,"names":["React","useState","useEffect","SectionTitleColorPicker","generatePurchaseOrderXML","Section1CompanyInfo","Section2PurchaseOrder","Section3Vendor","Section4ShipTo","Section5Shipping","AvailableFields","useAIProvider","useDragAndDropSensors","useCompanyFieldsDragEnd","usePurchaseOrderFieldsDragEnd","useVendorFieldsDragEnd","useShipToFieldsDragEnd","DndContext","closestCenter","useDraggable","rectIntersection","SortableContext","verticalListSortingStrategy","horizontalListSortingStrategy","useSortable","CSS","arrayMove","jsxDEV","_jsxDEV","DraggableSectionWrapper","children","id","sectionNumber","isSectionHandleDragging","showDragHandle","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","data","type","getSectionClass","sectionNum","style","Transform","toString","opacity","zIndex","cursor","position","width","height","border","borderRadius","backgroundColor","ref","className","cloneElement","dragListeners","dragAttributes","fileName","_jsxFileName","lineNumber","columnNumber","_c","SortableShippingColumnHeader","_s2","userSelect","_c2","SortableLineItemColumnHeader","_s3","_c3","DraggableSectionHeader","_s4","title","_c4","DraggableGroupHandle","label","_s5","left","top","display","alignItems","justifyContent","flexDirection","gap","boxShadow","color","fontSize","fontWeight","_c5","PurchaseOrderForm","_s8","_s6","$RefreshSig$","_s7","companyFields","setCompanyFields","placeholder","value","console","log","map","f","lastModified","setLastModified","Date","toISOString","poLastModified","setPoLastModified","sidebarVisible","setSidebarVisible","toggleSidebar","generateUniqueFieldId","baseLabel","existingIds","slugBase","String","toLowerCase","replace","candidate","counter","includes","handlePaletteDragEnd","event","_active$data","active","over","current","source","newField","handleAddCompanyField","showNotification","purchaseOrderFields","handleAddPurchaseOrderField","vendorFields","handleAddVendorField","shipToFields","handleAddShipToField","setPurchaseOrderFields","isTitle","setVendorFields","setShipToFields","lineItemRows","setLineItemRows","totalsFields","setTotalsFields","isCalculated","sensors","handleVendorDragEnd","handleShipToDragEnd","updateCompanyFieldsTimestamp","prevFields","logChange","handleRemoveCompanyField","fieldId","fieldToRemove","find","field","newFields","filter","changeHistory","setChangeHistory","isPreviewMode","setIsPreviewMode","lastExportTime","setLastExportTime","changeType","oldValue","newValue","section","change","now","timestamp","prev","slice","addToChangeHistory","handleCompanyFieldLabelChange","newLabel","oldField","oldLabel","handlePurchaseOrderFieldLabelChange","updatePurchaseOrderFieldsTimestamp","handleContentChange","newContent","fieldType","togglePreviewMode","clearChangeHistory","showXMLModal","setShowXMLModal","xmlOutput","setXmlOutput","displayXMLOutput","xml","closeXMLModal","copyXMLToClipboard","navigator","clipboard","writeText","then","catch","downloadXML","_purchaseOrderFields$","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","getFieldSuggestions","applySuggestionsToFields","suggestionsMap","fields","Array","isArray","newVal","generateAdditionalLineItemSuggestions","rowNumber","baseSuggestions","baseItem","itemNumber1","baseDesc","description1","baseQty","parseFloat","qty1","baseRate","rate1","variations","itemNumber","padStart","description","qty","Math","max","floor","random","rate","toFixed","amount","variationIndex","length","variation","generateCustomColumnData","columnId","customType","today","futureDate","getTime","toLocaleDateString","month","day","year","statuses","priorities","categories","locations","suppliers","genericData","handleAIFill","payload","context","shippingFields","shippingColumnOrder","startsWith","suggestions","debug","Object","keys","company","name","phone","po","date","number","shipping","requisitioner","shipVia","totals","subtotal","tax","total","line1","item","desc","amount1","next","before","fromEntries","after","forEach","undefined","from","to","sourceKey","write","el","val","textContent","shipSelectors","key","shipOrder","idx","used","suggestionKey","sel","querySelector","nth","selA","selB","suggestionValue","count","querySelectorAll","selector","fieldsInDOM","isCustom","setCell","row","col","cell","li","i","k","totalRows","additionalSuggestions","lineItemColumnOrder","customValue","other","domTotals","calcTotal","calcSub","commentsEl","contactEl","comments","contactInfo","e","error","message","exportToXML","capturedData","captureFieldValues","headerSections","visualSections1And2","sections1And2ForExport","sections1And2Order","vendorShipToSections","visualSections3And4","sections3And4ForExport","vendorShipToSectionOrder","getText","_document$querySelect","_document$querySelect2","trim","normalizedLineItems","lineItems","normalizedRow","quantity","unitPrice","exportData","majorSectionsOrder","sectionOrder","sections1And2","sections3And4","sections5And6","sections5And6Order","sections8And9","commentsTotalsSectionOrder","lineItemColumns","shippingColumns","fieldOrder","companyFieldOrder","purchaseOrder","purchaseOrderFieldOrder","vendor","shipTo","shippingData","fob","shippingTerms","sections3And4And5And6","existingNotification","remove","notification","innerHTML","container","getElementById","setTimeout","parentElement","getFormStats","totalFields","totalChanges","handleCompanyDragEnd","setCompanyFieldOrder","prevOrder","oldIndex","indexOf","newIndex","newOrder","splice","logFieldSummary","toLocaleString","handleRemovePurchaseOrderField","handleRemoveVendorField","handleVendorFieldLabelChange","handleRemoveShipToField","handleAddLineItemRow","prevRows","newRowNumber","newRows","handleAddLineItemColumn","setLineItemColumnOrder","columnTypes","randomType","newColumnId","substr","handleShipToFieldLabelChange","handlePurchaseOrderDragEnd","setPurchaseOrderFieldOrder","setVendorShipToSectionOrder","vendorShipToShippingGroupOrder","setVendorShipToShippingGroupOrder","setSections1And2Order","setSections5And6Order","setMajorSectionsOrder","vendorShipToAndShippingDetailsOrder","setVendorShipToAndShippingDetailsOrder","setShippingColumnOrder","setCommentsTotalsSectionOrder","handleDragStart","element","setAttribute","handleDragOver","targetElement","handleSectionDragEnd","section1Element","section2Element","removeAttribute","handleSections5And6DragEnd","handleLineItemColumnDragEnd","activeColumnId","overColumnId","items","handleShippingColumnDragEnd","handleCommentsTotalsDragEnd","handleVendorShipToSectionDragEnd","handleVendorShipToAndShippingDetailsDragEnd","handleSwapSections","companyFieldValues","purchaseOrderFieldValues","newCompanyFields","newPurchaseOrderFields","handleSwapVendorShipTo","vendorFieldValues","shipToFieldValues","reverse","updatedCompanyFields","updatedPurchaseOrderFields","updatedVendorFields","updatedShipToFields","capturedLineItems","actualRows","rowIndex","rowData","cellSelector","warn","tdElement","push","updatedTotalsFields","handleRootDragEnd","_active$data2","_active$data2$current","activeId","setIsSectionHandleDragging","allSections","dropIndicator","handleVendorShipToDragEnd","_active$data3","_over$data","activeData","overData","join","handleVendorShipToShippingGroupDragEnd","handleMajorSectionsDragEnd","_active$data4","_over$data2","noActive","noOver","sameId","collisionDetection","onDragCancel","onDragMove","onDragStart","onDragOver","onDragEnd","isVisible","onToggleVisibility","textAlign","marginBottom","strategy","sectionId","index","onCompanyDragEnd","onAddCompanyField","onRemoveCompanyField","onLabelChange","onContentChange","onPurchaseOrderDragEnd","onAddPurchaseOrderField","onRemovePurchaseOrderField","sectionGroup","marginTop","sectionIndex","onVendorDragEnd","onAddVendorField","onRemoveVendorField","onShipToDragEnd","onAddShipToField","onRemoveShipToField","onShippingColumnDragEnd","columnConfig","colSpan","split","charAt","toUpperCase","config","colIndex","contentEditable","onClick","flex","toLocaleTimeString","stopPropagation","_c6","$RefreshReg$"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/PurchaseOrderForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './PurchaseOrderForm.css';\nimport './section-styles.css';\nimport './section-title-colors.css';\nimport SectionTitleColorPicker from './components/SectionTitleColorPicker';\nimport { generatePurchaseOrderXML } from './templates/PurchaseOrderTemplate';\n\n// Import modular components\nimport Section1CompanyInfo from './components/Section1CompanyInfo';\nimport Section2PurchaseOrder from './components/Section2PurchaseOrder';\nimport Section3Vendor from './components/Section3Vendor';\nimport Section4ShipTo from './components/Section4ShipTo';\nimport Section5Shipping from './components/Section5Shipping';\n\nimport AvailableFields from './components/AvailableFields';\n\nimport { useAIProvider } from './hooks/useAIProvider';\n\n// Import custom hooks\nimport { \n  useDragAndDropSensors, \n  useCompanyFieldsDragEnd, \n  usePurchaseOrderFieldsDragEnd,\n  useVendorFieldsDragEnd,\n  useShipToFieldsDragEnd\n} from './hooks/useDragAndDrop';\n\nimport { DndContext, closestCenter, useDraggable, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, verticalListSortingStrategy, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove } from '@dnd-kit/sortable';\n\n\n// Draggable Section Wrapper Component for Sections\nfunction DraggableSectionWrapper({ children, id, sectionNumber, isSectionHandleDragging = false, showDragHandle = true }) {\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({ \n    id, \n    data: {\n      type: 'section',\n      sectionNumber: sectionNumber\n    }\n  });\n\n  // Map section numbers to proper CSS classes\n  const getSectionClass = (sectionNum) => {\n    switch(sectionNum) {\n      case 1:\n        return 'section-1-company-info';\n      case 2:\n        return 'section-2-purchase-order';\n      default:\n        return `section-${sectionNum}`;\n    }\n  };\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.6 : 1,\n    zIndex: isDragging ? 1000 : 1,\n    cursor: isDragging ? 'grabbing' : 'grab',\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    border: isDragging ? '3px solid #ff6b6b' : '2px solid #ddd',\n    borderRadius: '8px',\n    backgroundColor: isDragging ? 'rgba(255, 107, 107, 0.1)' : 'transparent'\n  };\n\n\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style} \n      className={`sortable-section ${getSectionClass(sectionNumber)} ${isDragging ? 'dragging' : ''}`}\n      data-section={sectionNumber}\n      data-testid={`draggable-section-${id}`}\n      data-dragging={isDragging}\n      {...attributes}\n\n    >\n      <div \n        className=\"section-content\"\n        style={{ position: 'relative', width: '100%', height: '100%' }}\n      >\n        {React.cloneElement(children, { dragListeners: listeners, dragAttributes: attributes })}\n      </div>\n    </div>\n  );\n}\n\n\n\n// Sortable shipping column header component for shipping details\nfunction SortableShippingColumnHeader({ children, id }) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id });\n  \n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    userSelect: 'none'\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style} \n      {...attributes} \n      {...listeners}\n      className={`sortable-column-header ${isDragging ? 'dragging' : ''}`}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Sortable line item column header component for line items\nfunction SortableLineItemColumnHeader({ children, id }) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id });\n  \n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    userSelect: 'none'\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style} \n      {...attributes} \n      {...listeners}\n      className={`sortable-column-header ${isDragging ? 'dragging' : ''}`}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Draggable Section Header Component for Comments and Totals\nfunction DraggableSectionHeader({ children, id }) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n  } = useSortable({ id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style} \n      className=\"section-header\"\n      {...attributes} \n      {...listeners} \n      title=\"Drag to reorder sections\"\n    >\n      {children}\n    </div>\n  );\n}\n\n// Draggable Group Handle Component for Sections 3 & 4\nfunction DraggableGroupHandle({ children, id, label }) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({ \n    id,\n    data: {\n      type: 'section-group',\n      label: label\n    }\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n    position: 'relative'\n  };\n\n  return (\n    <div ref={setNodeRef} style={style}>\n      {/* Group Drag Handle */}\n      <div \n        {...attributes} \n        {...listeners}\n        style={{\n          position: 'absolute',\n          left: '-40px',\n          top: '50%',\n          transform: 'translateY(-50%)',\n          width: '30px',\n          height: '60px',\n          backgroundColor: 'white',\n          borderRadius: '6px',\n          cursor: 'grab',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          gap: '4px',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n          zIndex: 10,\n          border: '2px solid #8b5cf6'\n        }}\n        title={`Drag to move ${label} as a group`}\n      >\n        <span style={{ color: '#8b5cf6', fontSize: '18px', fontWeight: 'bold' }}>⋮⋮</span>\n\n      </div>\n      {children}\n    </div>\n  );\n}\n\n// Main Purchase Order Form Component\nfunction PurchaseOrderForm() {\n  // ============================================================================\n  // STATE MANAGEMENT\n  // ============================================================================\n  \n  // Company fields state for Section 1\n  const [companyFields, setCompanyFields] = useState([\n    { id: 'company-name', label: 'Company Name:', placeholder: 'Enter company name', value: '' },\n    { id: 'company-address', label: 'Street Address:', placeholder: 'Enter street address', value: '' },\n    { id: 'company-city-state', label: 'City, ST ZIP:', placeholder: 'City, State ZIP', value: '' },\n    { id: 'company-phone', label: 'Phone:', placeholder: '(555) 123-4567', value: '' },\n    { id: 'company-fax', label: 'Fax:', placeholder: '(555) 123-4567', value: '' },\n    { id: 'company-website', label: 'Website:', placeholder: 'www.example.com', value: '' }\n  ]);\n\n  // Debug: Log company fields state changes\n  useEffect(() => {\n    console.log('🔄 Company fields state updated:', companyFields.map(f => ({ id: f.id, label: f.label })));\n  }, [companyFields]);\n\n  // Track last modification time for company fields\n  const [lastModified, setLastModified] = useState(new Date().toISOString());\n\n  // Track last modification time for purchase order fields\n  const [poLastModified, setPoLastModified] = useState(new Date().toISOString());\n\n  // ============================================================================\n  // SIDEBAR MANAGEMENT\n  // ============================================================================\n  \n  // State for sidebar visibility on mobile\n  const [sidebarVisible, setSidebarVisible] = useState(true);\n\n  // Toggle sidebar visibility\n  const toggleSidebar = () => {\n    setSidebarVisible(!sidebarVisible);\n  };\n\n  // Helper: slugify and ensure unique id for new fields\n  const generateUniqueFieldId = (baseLabel, existingIds) => {\n    const slugBase = String(baseLabel)\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n    let candidate = slugBase || 'field';\n    let counter = 1;\n    while (existingIds.includes(candidate)) {\n      candidate = `${slugBase}-${counter++}`;\n    }\n    return candidate;\n  };\n\n  // ============================================================================\n  // DROPPABLE ZONES\n  // ============================================================================\n\n\n\n\n\n  // Handle palette drag end to add fields to target sections\n  const handlePaletteDragEnd = (event) => {\n    const { active, over } = event;\n    console.log('🎯 Palette drag end:', { active, over });\n    \n    if (!active?.data?.current || !over?.id) {\n      console.log('❌ Missing active data or over id');\n      return;\n    }\n    const data = active.data.current;\n    if (data.source !== 'palette') {\n      console.log('❌ Not a palette source:', data.source);\n      return;\n    }\n\n    const baseLabel = data.label;\n    console.log('🎯 Dropping on zone:', over.id);\n    \n    // Check if dropping on section elements\n    if (over.id === 'section1') {\n      console.log('✅ Adding to company section');\n      const existingIds = companyFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = { id, label: `${baseLabel}:`, placeholder: baseLabel, value: '' };\n      handleAddCompanyField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Company Info`, 'success');\n    } else if (over.id === 'section2') {\n      console.log('✅ Adding to purchase order section');\n      const existingIds = purchaseOrderFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = { id, label: `${baseLabel}:`, placeholder: baseLabel, value: '' };\n      handleAddPurchaseOrderField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Purchase Order`, 'success');\n    } else if (over.id === 'section3') {\n      console.log('✅ Adding to vendor section');\n      const existingIds = vendorFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = { id, label: `${baseLabel}:`, placeholder: baseLabel, value: '' };\n      handleAddVendorField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Vendor section`, 'success');\n    } else if (over.id === 'section4') {\n      console.log('✅ Adding to ship-to section');\n      const existingIds = shipToFields.map(f => f.id);\n      const id = generateUniqueFieldId(baseLabel, existingIds);\n      const newField = { id, label: `${baseLabel}:`, placeholder: baseLabel, value: '' };\n      handleAddShipToField(newField);\n      showNotification(`➕ Added \"${baseLabel}\" to Ship-To section`, 'success');\n    } else {\n      console.log('❌ Unknown drop zone:', over.id);\n    }\n  };\n\n\n\n  // Purchase Order fields state for Section 2\n  const [purchaseOrderFields, setPurchaseOrderFields] = useState([\n    { id: 'po-title', label: 'Purchase Order', placeholder: '', isTitle: true, value: 'Purchase Order' },\n    { id: 'po-date', label: 'DATE:', placeholder: 'MM/DD/YYYY', value: '' },\n    { id: 'po-number', label: 'PO #:', placeholder: 'PO#123456', value: '' }\n  ]);\n\n  // Vendor fields state for Section 3\n  const [vendorFields, setVendorFields] = useState([\n    { id: 'vendor-company', label: 'Company:', placeholder: 'Vendor name', value: '' },\n    { id: 'vendor-contact', label: 'Contact:', placeholder: 'Contact person', value: '' },\n    { id: 'vendor-address', label: 'Address:', placeholder: 'Street address', value: '' },\n    { id: 'vendor-city-state', label: 'City/State:', placeholder: 'City, ST ZIP', value: '' },\n    { id: 'vendor-phone', label: 'Phone:', placeholder: '(555) 123-4567', value: '' }\n  ]);\n\n  // Ship To fields state for Section 3\n  const [shipToFields, setShipToFields] = useState([\n    { id: 'ship-to-name', label: 'Name:', placeholder: 'Contact name', value: '' },\n    { id: 'ship-to-company', label: 'Company:', placeholder: 'Shipping company', value: '' },\n    { id: 'ship-to-address', label: 'Address:', placeholder: 'Street address', value: '' },\n    { id: 'ship-to-city-state', label: 'City/State:', placeholder: 'City, ST ZIP', value: '' },\n    { id: 'ship-to-phone', label: 'Phone:', placeholder: '(555) 123-4567', value: '' }\n  ]);\n\n  // Line Items state for the items table\n  const [lineItemRows, setLineItemRows] = useState([1, 2, 3, 4, 5]);\n\n  // Totals fields state for Section 9\n  const [totalsFields, setTotalsFields] = useState([\n    { id: 'subtotal', label: 'SUBTOTAL:', placeholder: '$0.00', value: '$0.00', isCalculated: true },\n    { id: 'tax', label: 'TAX:', placeholder: '$0.00', value: '' },\n    { id: 'shipping', label: 'SHIPPING:', placeholder: '$0.00', value: '' },\n    { id: 'other', label: 'OTHER:', placeholder: '$0.00', value: '' },\n    { id: 'total', label: 'TOTAL:', placeholder: '$0.00', value: '$0.00', isCalculated: true }\n  ]);\n\n\n\n  // ============================================================================\n  // CUSTOM HOOKS\n  // ============================================================================\n  \n  const sensors = useDragAndDropSensors();\n  const handleVendorDragEnd = useVendorFieldsDragEnd(setVendorFields);\n  const handleShipToDragEnd = useShipToFieldsDragEnd(setShipToFields);\n\n  // ============================================================================\n  // COMPANY FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n  \n  // Helper function to update timestamp when company fields change\n  const updateCompanyFieldsTimestamp = () => {\n    setLastModified(new Date().toISOString());\n  };\n\n  // Add new company field\n  const handleAddCompanyField = (newField) => {\n    setCompanyFields(prevFields => [...prevFields, newField]);\n    updateCompanyFieldsTimestamp();\n    \n    logChange('field-add', newField.id, '', newField.label, 'company');\n    \n    console.log('➕ Added new company field:', newField);\n  };\n\n  // Remove company field\n  const handleRemoveCompanyField = (fieldId) => {\n    console.log('🗑️ handleRemoveCompanyField called with fieldId:', fieldId);\n    console.log('🗑️ Current company fields before removal:', companyFields);\n    \n    setCompanyFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      console.log('🗑️ Field to remove found:', fieldToRemove);\n      \n      showNotification(`🗑️ Removed company field: \"${fieldToRemove?.label}\"`, 'warning');\n      \n      console.log('🗑️ Removed company field:', fieldToRemove);\n      const newFields = prevFields.filter(field => field.id !== fieldId);\n      console.log('🗑️ New company fields after removal:', newFields);\n      return newFields;\n    });\n    updateCompanyFieldsTimestamp();\n  };\n\n  // ============================================================================\n  // ENHANCED CHANGE TRACKING\n  // ============================================================================\n  \n  // State for tracking all changes\n  const [changeHistory, setChangeHistory] = useState([]);\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [lastExportTime, setLastExportTime] = useState(null);\n  \n\n\n  \n  // Function to log changes with timestamps\n  const logChange = (changeType, fieldId, oldValue, newValue, section) => {\n    const change = {\n      id: Date.now(),\n      timestamp: new Date().toISOString(),\n      type: changeType,\n      fieldId,\n      oldValue,\n      newValue,\n      section\n    };\n    \n    setChangeHistory(prev => [change, ...prev.slice(0, 49)]); // Keep last 50 changes\n    console.log('📝 Change logged:', change);\n  };\n\n  // Function to add changes to change history (for section operations)\n  const addToChangeHistory = (changeType, fieldId, newValue) => {\n    const change = {\n      id: Date.now(),\n      timestamp: new Date().toISOString(),\n      type: changeType,\n      fieldId,\n      oldValue: '',\n      newValue,\n      section: 'section'\n    };\n    \n    setChangeHistory(prev => [change, ...prev.slice(0, 49)]); // Keep last 50 changes\n    console.log('📝 Section change logged:', change);\n  };\n\n  // Enhanced field update functions with change logging\n  const handleCompanyFieldLabelChange = (fieldId, newLabel) => {\n    setCompanyFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      \n      logChange('label-change', fieldId, oldLabel, newLabel, 'company');\n      \n      return prevFields.map(field => \n        field.id === fieldId ? { ...field, label: newLabel } : field\n      );\n    });\n    updateCompanyFieldsTimestamp();\n  };\n\n  const handlePurchaseOrderFieldLabelChange = (fieldId, newLabel) => {\n    setPurchaseOrderFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      \n      logChange('label-change', fieldId, oldLabel, newLabel, 'purchase-order');\n      \n      return prevFields.map(field => \n        field.id === fieldId ? { ...field, label: newLabel } : field\n      );\n    });\n    updatePurchaseOrderFieldsTimestamp();\n  };\n\n  // Function to handle content changes in editable fields\n  const handleContentChange = (fieldId, newContent, section) => {\n    // Find the field and log the change\n    let oldValue = '';\n    let fieldType = '';\n    \n    if (section === 'company') {\n      const field = companyFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    } else if (section === 'purchase-order') {\n      const field = purchaseOrderFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    } else if (section === 'vendor') {\n      const field = vendorFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    } else if (section === 'ship-to') {\n      const field = shipToFields.find(f => f.id === fieldId);\n      if (field) {\n        oldValue = field.value || '';\n        fieldType = field.label;\n      }\n    }\n    \n    if (oldValue !== newContent) {\n      logChange('content-change', fieldId, oldValue, newContent, section);\n    }\n  };\n\n\n\n  // Function to toggle preview mode\n  const togglePreviewMode = () => {\n    setIsPreviewMode(!isPreviewMode);\n  };\n\n  // Function to clear change history\n  const clearChangeHistory = () => {\n    setChangeHistory([]);\n    console.log('🗑️ Change history cleared');\n  };\n\n  // ============================================================================\n  // XML DISPLAY MODAL\n  // ============================================================================\n  \n  // State for XML modal\n  const [showXMLModal, setShowXMLModal] = useState(false);\n  const [xmlOutput, setXmlOutput] = useState('');\n  \n  \n  // Function to display XML output in a modal\n  const displayXMLOutput = (xml) => {\n    setXmlOutput(xml);\n    setShowXMLModal(true);\n  };\n  \n  // Function to close XML modal\n  const closeXMLModal = () => {\n    setShowXMLModal(false);\n    setXmlOutput('');\n  };\n  \n  // Function to copy XML to clipboard\n  const copyXMLToClipboard = () => {\n    navigator.clipboard.writeText(xmlOutput).then(() => {\n      showNotification('📋 XML copied to clipboard!', 'success');\n    }).catch(() => {\n      showNotification('❌ Failed to copy XML to clipboard', 'error');\n    });\n  };\n  \n  // Function to download XML file\n  const downloadXML = () => {\n    const blob = new Blob([xmlOutput], { type: 'application/xml' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `purchase-order-${purchaseOrderFields.find(f => f.id === 'po-number')?.value || 'unknown'}.xml`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    showNotification('📥 XML downloaded successfully!', 'success');\n  };\n\n  // =========================================================================\n  // AI SUGGESTIONS\n  // =========================================================================\n  const { getFieldSuggestions } = useAIProvider();\n\n  const applySuggestionsToFields = (suggestionsMap, fields) => {\n    if (!Array.isArray(fields)) return fields;\n    return fields.map(f => {\n      const newVal = suggestionsMap?.[f.id];\n      if (typeof newVal === 'string') {\n        return { ...f, value: newVal };\n      }\n      return f;\n    });\n  };\n\n  // Helper function to generate additional line item suggestions for rows beyond the first 3\n  const generateAdditionalLineItemSuggestions = (rowNumber, baseSuggestions) => {\n    // Try to extract patterns from existing AI suggestions for more realistic data\n    const baseItem = baseSuggestions?.itemNumber1 || 'ITEM';\n    const baseDesc = baseSuggestions?.description1 || 'Product';\n    \n    // Safely parse base values with fallbacks\n    const baseQty = parseFloat(baseSuggestions?.qty1) || 1;\n    const baseRate = parseFloat(baseSuggestions?.rate1) || 50.00;\n    \n    // Create variations that follow similar patterns to the base suggestions\n    const variations = [\n      {\n        itemNumber: `${baseItem.replace(/\\d+$/, '')}${rowNumber.toString().padStart(3, '0')}`,\n        description: `${baseDesc} ${rowNumber} - Extended`,\n        qty: Math.max(1, Math.floor(Math.random() * 10) + 1),\n        rate: (baseRate * (0.8 + Math.random() * 0.6)).toFixed(2),\n        amount: ''\n      },\n      {\n        itemNumber: `${baseItem.replace(/\\d+$/, '')}${rowNumber.toString().padStart(3, '0')}`,\n        description: `${baseDesc} ${rowNumber} - Premium`,\n        qty: Math.max(1, Math.floor(Math.random() * 5) + 1),\n        rate: (baseRate * (1.2 + Math.random() * 0.8)).toFixed(2),\n        amount: ''\n      },\n      {\n        itemNumber: `${baseItem.replace(/\\d+$/, '')}${rowNumber.toString().padStart(3, '0')}`,\n        description: `${baseDesc} ${rowNumber} - Standard`,\n        qty: Math.max(1, Math.floor(Math.random() * 8) + 1),\n        rate: (baseRate * (0.6 + Math.random() * 0.4)).toFixed(2),\n        amount: ''\n      }\n    ];\n    \n    // Select a variation based on row number for consistency\n    const variationIndex = (rowNumber - 1) % variations.length;\n    const variation = variations[variationIndex];\n    \n    // Calculate amount based on qty and rate (ensure both are numbers)\n    const qty = parseFloat(variation.qty) || 1;\n    const rate = parseFloat(variation.rate) || 50.00;\n    variation.amount = (qty * rate).toFixed(2);\n    \n    return variation;\n  };\n\n  // Helper function to generate data for custom columns\n  const generateCustomColumnData = (columnId, rowNumber, baseSuggestions) => {\n    const customType = columnId.replace('custom-', '');\n    \n    // Generate different types of data based on column patterns\n    if (customType.includes('date') || customType.includes('Date')) {\n      const today = new Date();\n      const futureDate = new Date(today.getTime() + (Math.random() * 30 + 1) * 24 * 60 * 60 * 1000);\n      return futureDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });\n    } else if (customType.includes('status') || customType.includes('Status')) {\n      const statuses = ['Pending', 'Approved', 'In Progress', 'Completed', 'On Hold'];\n      return statuses[Math.floor(Math.random() * statuses.length)];\n    } else if (customType.includes('priority') || customType.includes('Priority')) {\n      const priorities = ['Low', 'Medium', 'High', 'Urgent'];\n      return priorities[Math.floor(Math.random() * priorities.length)];\n    } else if (customType.includes('category') || customType.includes('Category')) {\n      const categories = ['Electronics', 'Office Supplies', 'Services', 'Equipment', 'Software'];\n      return categories[Math.floor(Math.random() * categories.length)];\n    } else if (customType.includes('location') || customType.includes('Location')) {\n      const locations = ['Warehouse A', 'Warehouse B', 'Main Office', 'Branch Office', 'Remote'];\n      return locations[Math.floor(Math.random() * locations.length)];\n    } else if (customType.includes('supplier') || customType.includes('Supplier')) {\n      const suppliers = ['TechCorp', 'OfficeMax', 'ServicePro', 'EquipmentPlus', 'SupplyCo'];\n      return suppliers[Math.floor(Math.random() * suppliers.length)];\n    } else {\n      // Generic custom field - generate realistic data\n      const genericData = [\n        `Value ${rowNumber}`,\n        `Option ${rowNumber}`,\n        `Setting ${rowNumber}`,\n        `Config ${rowNumber}`,\n        `Param ${rowNumber}`\n      ];\n      return genericData[Math.floor(Math.random() * genericData.length)];\n    }\n  };\n\n  const handleAIFill = async () => {\n    try {\n      showNotification('🤖 Fetching AI suggestions...', 'info');\n\n      const payload = {\n        context: 'purchase_order',\n        companyFields,\n        purchaseOrderFields,\n                vendorFields,\n        shipToFields,\n        shippingFields: [\n          // Include default shipping fields\n          { id: 'requisitioner', label: 'Requisitioner name' },\n          { id: 'shipVia', label: 'Shipping method' },\n          { id: 'fob', label: 'FOB terms' },\n          { id: 'shippingTerms', label: 'Shipping terms' },\n          // Include custom columns dynamically\n          ...shippingColumnOrder\n            .filter(id => id.startsWith('custom-'))\n            .map(id => ({ \n              id, \n              label: `Custom ${id.replace('custom-', '')}` \n            }))\n        ]\n      };\n\n      const { suggestions } = await getFieldSuggestions(payload);\n      try {\n        console.debug('🧪 AI suggestions keys:', Object.keys(suggestions || {}));\n        // Preview a few critical values to verify mapping\n        console.debug('🧪 AI preview:', {\n          company: {\n            name: suggestions?.['company-name'],\n            phone: suggestions?.['company-phone']\n          },\n          po: {\n            date: suggestions?.['po-date'],\n            number: suggestions?.['po-number']\n          },\n          shipping: {\n            requisitioner: suggestions?.requisitioner,\n            shipVia: suggestions?.shipVia\n          },\n          totals: {\n            subtotal: suggestions?.subtotal,\n            tax: suggestions?.tax,\n            total: suggestions?.total\n          },\n          line1: {\n            item: suggestions?.itemNumber1,\n            desc: suggestions?.description1,\n            qty: suggestions?.qty1,\n            rate: suggestions?.rate1,\n            amount: suggestions?.amount1\n          }\n        });\n      } catch {}\n\n      // 1) Apply to Section 1–3 states (company/po/vendor/ship-to) with mapping logs\n      setCompanyFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after  = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(companyFields):', { id, from: before[id], to: after[id], sourceKey: id });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      setPurchaseOrderFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after  = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(purchaseOrderFields):', { id, from: before[id], to: after[id], sourceKey: id });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      setVendorFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after  = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(vendorFields):', { id, from: before[id], to: after[id], sourceKey: id });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      setShipToFields(prev => {\n        const next = applySuggestionsToFields(suggestions, prev);\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after  = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && suggestions[id] !== undefined) {\n              console.debug('🧭 map(shipToFields):', { id, from: before[id], to: after[id], sourceKey: id });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      // 2) Shipping details (DOM spans)\n      const write = (el, val) => { if (el && typeof val === 'string') el.textContent = val; };\n\n      const shipSelectors = (key) => [\n        `.shipping-details [data-field=\"${key}\"] .editable-field`,\n        `.shipping-field[data-field=\"${key}\"] .editable-field`,\n        `#shipping-${key}`,\n        `.shipping-field-${key} .editable-field`\n      ];\n\n      // Use dynamic shipping column order instead of hardcoded array\n      const shipOrder = shippingColumnOrder;\n      shipOrder.forEach((key, idx) => {\n        let el = null, used = '';\n        \n        // Handle custom columns (those that start with 'custom-')\n        let suggestionKey = key;\n        if (key.startsWith('custom-')) {\n          // For custom columns, try to find a relevant suggestion or generate one\n          suggestionKey = 'customField'; // Use a generic key for AI suggestions\n        }\n        \n        for (const sel of shipSelectors(key)) {\n          el = document.querySelector(sel);\n          if (el) { used = sel; break; }\n        }\n        // Fallback to positional selector used in your JSX\n        if (!el) {\n          const nth = idx + 1; // 1-based\n          // Prefer :nth-of-type within container to ignore headers\n          const selA = `.shipping-details .shipping-field:nth-of-type(${nth}) .editable-field`;\n          el = document.querySelector(selA);\n          if (el) {\n            used = selA;\n          } else {\n            // Last resort: original child-based selector\n            const selB = `.shipping-field:nth-child(${nth}) .editable-field`;\n            el = document.querySelector(selB);\n            if (el) used = selB;\n          }\n        }\n        \n        // Get the suggestion value, with fallback for custom columns\n        let suggestionValue = suggestions[suggestionKey];\n        if (key.startsWith('custom-') && !suggestionValue) {\n          // Generate a placeholder value for custom columns\n          suggestionValue = `[Custom ${key.replace('custom-', '')}]`;\n        }\n        \n        write(el, suggestionValue);\n        try {\n          const count = document.querySelectorAll('.shipping-details .shipping-field').length;\n          console.debug('🧭 map(shippingDetails):', { key, selector: used || '(not found)', value: suggestionValue, fieldsInDOM: count, isCustom: key.startsWith('custom-') });\n        } catch {}\n      });\n\n      // 3) Line items (fill all rows dynamically)\n      // Rows are rendered with data-column per your table; we fill itemNumber, description, qty, rate, amount.\n      const setCell = (row, col, val) => {\n        const selector = `.itemtable tbody tr:nth-child(${row}) td[data-column=\"${col}\"] .editable-field`;\n        const cell = document.querySelector(selector);\n        if (cell && typeof val === 'string') {\n          cell.textContent = val;\n        }\n        try { console.debug('🧭 map(lineItem):', { row, col, selector, value: val }); } catch {}\n      };\n\n      const li = (i, k) => suggestions?.[`${k}${i}`];\n\n      // Get the total number of rows in the table\n      const totalRows = document.querySelectorAll('.itemtable tbody tr').length;\n      console.log(`🤖 Filling ${totalRows} line item rows with AI suggestions`);\n\n      // Fill all rows with AI suggestions\n      for (let i = 1; i <= totalRows; i++) {\n        // For rows beyond the first 3, generate additional suggestions or use fallbacks\n        let itemNumber, description, qty, rate, amount;\n        \n        if (i <= 3) {\n          // Use existing AI suggestions for first 3 rows\n          itemNumber = li(i, 'itemNumber') || `ITEM${i.toString().padStart(3, '0')}`;\n          description = li(i, 'description') || `Product ${i}`;\n          qty = li(i, 'qty') || '1';\n          rate = li(i, 'rate') || '50.00';\n          amount = li(i, 'amount') || '50.00';\n          \n          console.log(`🤖 Row ${i} (AI):`, { itemNumber, description, qty, rate, amount });\n        } else {\n          // Generate additional suggestions for rows 4+\n          const additionalSuggestions = generateAdditionalLineItemSuggestions(i, suggestions);\n          itemNumber = additionalSuggestions.itemNumber;\n          description = additionalSuggestions.description;\n          qty = additionalSuggestions.qty;\n          rate = additionalSuggestions.rate;\n          amount = additionalSuggestions.amount;\n          \n          console.log(`🤖 Row ${i} (Generated):`, { itemNumber, description, qty, rate, amount });\n        }\n\n        // Ensure all values are strings and handle any undefined/null values\n        setCell(i, 'itemNumber', String(itemNumber || ''));\n        setCell(i, 'description', String(description || ''));\n        setCell(i, 'qty', String(qty || ''));\n        setCell(i, 'rate', String(rate || ''));\n        setCell(i, 'amount', String(amount || ''));\n        \n        // Fill custom columns with AI-generated data\n        lineItemColumnOrder.forEach(columnId => {\n          if (columnId.startsWith('custom-')) {\n            const customValue = generateCustomColumnData(columnId, i, suggestions);\n            setCell(i, columnId, String(customValue || ''));\n          }\n        });\n      }\n\n      // 4) Totals (state + DOM)\n      setTotalsFields(prev => {\n        const map = {\n          subtotal: suggestions.subtotal,\n          tax: suggestions.tax,\n          shipping: suggestions.shipping,\n          other: suggestions.other,\n          total: suggestions.total,\n        };\n        const next = prev.map(f => (map[f.id] ? { ...f, value: map[f.id] } : f));\n        try {\n          const before = Object.fromEntries(prev.map(f => [f.id, f.value]));\n          const after  = Object.fromEntries(next.map(f => [f.id, f.value]));\n          Object.keys(after).forEach(id => {\n            if (before[id] !== after[id] && map[id] !== undefined) {\n              console.debug('🧭 map(totalsFields):', { id, from: before[id], to: after[id], sourceKey: id });\n            }\n          });\n        } catch {}\n        return next;\n      });\n\n      // Write editable totals into DOM for non-calculated rows\n      const domTotals = (field) => document.querySelector(`.totals-section .total-row[data-field=\"${field}\"] .editable-field`);\n      ['tax','shipping','other'].forEach(key => {\n        const sel = `.totals-section .total-row[data-field=\"${key}\"] .editable-field`;\n        write(domTotals(key), suggestions[key]);\n        try { console.debug('🧭 map(totalsDOM):', { key, selector: sel, value: suggestions[key] }); } catch {}\n      });\n\n      // Calculated-looking spans (subtotal, total) in your layout use .calculated-field\n      const calcTotal = document.querySelector(`.totals-section .total-row[data-field=\"total\"] .total-field`);\n      const calcSub   = document.querySelector(`.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`);\n      write(calcSub, suggestions.subtotal);\n      write(calcTotal, suggestions.total);\n      try {\n        console.debug('🧭 map(totalsDOM):', { key: 'subtotal', selector: `.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`, value: suggestions.subtotal });\n        console.debug('🧭 map(totalsDOM):', { key: 'total', selector: `.totals-section .total-row[data-field=\"total\"] .total-field`, value: suggestions.total });\n      } catch {}\n\n      // 5) Comments, Contact Info (DOM)\n      const commentsEl = document.querySelector('.comments-content .editable-field');\n      const contactEl  = document.querySelector('.contact-section .editable-field');\n      write(commentsEl, suggestions.comments);\n      write(contactEl, suggestions.contactInfo);\n      try {\n        console.debug('🧭 map(comments):', { selector: '.comments-content .editable-field', value: suggestions.comments });\n        console.debug('🧭 map(contactInfo):', { selector: '.contact-section .editable-field', value: suggestions.contactInfo });\n      } catch {}\n\n      // 6) Bump timestamps\n      updateCompanyFieldsTimestamp();\n      updatePurchaseOrderFieldsTimestamp();\n\n      showNotification('✅ AI suggestions applied', 'success');\n    } catch (e) {\n      console.error('AI fill failed:', e);\n      showNotification(`❌ AI fill failed: ${e.message}`, 'error');\n    }\n  };\n\n  // ============================================================================\n  // XML EXPORT FUNCTIONALITY\n  // ============================================================================\n  \n  // Function to export form data as XML\n  const exportToXML = () => {\n    try {\n      console.log('📄 Starting XML generation...');\n      \n      // Capture current field values first\n      const capturedData = captureFieldValues();\n      \n      // Prepare data for XML generation\n      // Determine current visual order of sections 1 & 2 from DOM to avoid async state lag\n      const headerSections = Array.from(document.querySelectorAll('.header-section .sortable-section'));\n      const visualSections1And2 = headerSections\n        .map(el => el.id)\n        .filter(id => id === 'section1' || id === 'section2');\n      const sections1And2ForExport = (visualSections1And2.length === 2) ? visualSections1And2 : sections1And2Order;\n      \n      // Determine current visual order of sections 3 & 4 (Vendor / Ship-To) from DOM\n      const vendorShipToSections = Array.from(document.querySelectorAll('.vendor-shipping-section .sortable-section'));\n      const visualSections3And4 = vendorShipToSections\n        .map(el => el.id)\n        .filter(id => id === 'section3' || id === 'section4');\n      const sections3And4ForExport = (visualSections3And4.length === 2) ? visualSections3And4 : vendorShipToSectionOrder;\n      \n      // Helpers for DOM reads\n      const getText = (sel) => document.querySelector(sel)?.textContent?.trim() || '';\n      \n      // Normalize line items to include both UI keys (qty/rate/amount) and template keys (quantity/unitPrice/total)\n      // Also preserve all custom column data\n      const normalizedLineItems = (capturedData.lineItems || []).map(row => {\n        const normalizedRow = {\n          // original UI keys\n          itemNumber: row.itemNumber || '',\n          description: row.description || '',\n          qty: row.qty || row.quantity || '',\n          rate: row.rate || row.unitPrice || '',\n          amount: row.amount || row.total || '',\n          // template-expected keys\n          quantity: row.quantity || row.qty || '',\n          unitPrice: row.unitPrice || row.rate || '',\n          total: row.total || row.amount || ''\n        };\n        \n        // Preserve all custom column data\n        lineItemColumnOrder.forEach(columnId => {\n          if (columnId.startsWith('custom-') && row[columnId] !== undefined) {\n            normalizedRow[columnId] = row[columnId];\n          }\n        });\n        \n        return normalizedRow;\n      });\n\n      const exportData = {\n        ...capturedData,\n        // Add major sections order for group swapping\n        majorSectionsOrder: majorSectionsOrder, // New state for sections 3+4 group swapping with section 5\n        // Add section order information for dynamic XML generation\n        sectionOrder: {\n          sections1And2: sections1And2ForExport, // Use current visual order to ensure XML matches UI\n          sections3And4: sections3And4ForExport, // Use current visual order to ensure XML matches UI\n          sections5And6: sections5And6Order, // Use actual state for sections 5&6\n          sections8And9: commentsTotalsSectionOrder, // Use actual state for sections 8&9\n          lineItemColumns: lineItemColumnOrder, // Use actual state for line item columns\n          shippingColumns: shippingColumnOrder // Use actual state for shipping columns\n        },\n        // CRITICAL: Add field order information for dynamic XML generation (same pattern as section order)\n        fieldOrder: {\n          company: companyFieldOrder, // Preserve company field order independently of section position\n          purchaseOrder: purchaseOrderFieldOrder, // Preserve PO field order independently of section position\n          vendor: vendorFields.map(f => f.id), // Vendor field order\n          shipTo: shipToFields.map(f => f.id) // Ship-to field order\n        },\n                // Add normalized line items (support both key schemes)\n        lineItems: normalizedLineItems,\n        // Shipping details (prefer data-field; fall back handled in XML builder too)\n        // Capture all shipping columns dynamically, including custom ones\n        ...(() => {\n          const shippingData = {};\n          shippingColumnOrder.forEach(columnId => {\n            const value = getText(`.section-5 [data-field=\"${columnId}\"] .editable-field`);\n            shippingData[columnId] = value;\n          });\n          return shippingData;\n        })(),\n        // Totals: read what the user sees\n        subtotal: getText('.totals-section .total-row[data-field=\"subtotal\"] .calculated-field') || '$0.00',\n        tax: getText('.totals-section .total-row[data-field=\"tax\"] .editable-field') || '$0.00',\n        shipping: getText('.totals-section .total-row[data-field=\"shipping\"] .editable-field') || '$0.00',\n        other: getText('.totals-section .total-row[data-field=\"other\"] .editable-field') || '$0.00',\n        total: getText('.totals-section .total-row[data-field=\"total\"] .total-field') || '$0.00',\n        comments: getText('.comments-content .editable-field'),\n        contactInfo: getText('.contact-section .editable-field')\n      };\n      \n      console.debug('🔎 Export DOM reads:', {\n        requisitioner: exportData.requisitioner,\n        shipVia: exportData.shipVia,\n        fob: exportData.fob,\n        shippingTerms: exportData.shippingTerms,\n        subtotal: exportData.subtotal,\n        tax: exportData.tax,\n        shipping: exportData.shipping,\n        other: exportData.other,\n        total: exportData.total\n      });\n\n      console.log('📄 Export data prepared:', exportData);\n      console.log('🔀 Major sections order being sent to XML:', exportData.majorSectionsOrder);\n      console.log('🔀 Section order being sent to XML:', exportData.sectionOrder);\n      console.log('🔀 Sections 1&2 order:', exportData.sectionOrder.sections1And2);\n      console.log('🔀 Sections 3&4 order:', exportData.sectionOrder.sections3And4);\n      console.log('🔀 Sections 3&4 + 5&6 order:', exportData.sectionOrder.sections3And4And5And6);\n            console.log('🔀 Line item columns order:', exportData.sectionOrder.lineItemColumns);\n      console.log('🔀 Shipping columns order:', exportData.sectionOrder.shippingColumns);\n      console.log('🔀 Line items data:', exportData.lineItems);\n      \n      // CRITICAL: Log field order information\n      console.log('🔀 Field order being sent to XML:', exportData.fieldOrder);\n      console.log('🔀 Company field order:', exportData.fieldOrder.company);\n      console.log('🔀 Purchase order field order:', exportData.fieldOrder.purchaseOrder);\n      console.log('🔀 Vendor field order:', exportData.fieldOrder.vendor);\n      console.log('🔀 Ship-to field order:', exportData.fieldOrder.shipTo);\n      \n      // Generate XML\n      const xml = generatePurchaseOrderXML(exportData);\n      \n      // Display XML in a modal instead of downloading\n      displayXMLOutput(xml);\n      \n      // Update export timestamp\n      setLastExportTime(new Date().toISOString());\n      \n      showNotification('📄 XML generated successfully!', 'success');\n      console.log('✅ XML generation completed successfully');\n      \n    } catch (error) {\n      console.error('❌ XML generation failed:', error);\n      showNotification(`❌ XML generation failed: ${error.message}`, 'error');\n    }\n  };\n\n\n\n\n\n\n\n  // Show notification function\n  const showNotification = (message, type = 'info') => {\n    // Remove any existing notifications\n    const existingNotification = document.querySelector('.notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <span class=\"notification-message\">${message}</span>\n        <button class=\"notification-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Add to notification container\n    const container = document.getElementById('notification-container');\n    if (container) {\n      container.appendChild(notification);\n    } else {\n      // Fallback to body if container not found\n      document.body.appendChild(notification);\n    }\n\n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      if (notification.parentElement) {\n        notification.remove();\n      }\n    }, 3000);\n  };\n\n  // Get current form statistics\n  const getFormStats = () => {\n    return {\n      totalFields: companyFields.length + purchaseOrderFields.length + vendorFields.length + shipToFields.length,\n      companyFields: companyFields.length,\n      purchaseOrderFields: purchaseOrderFields.length,\n      vendorFields: vendorFields.length,\n      shipToFields: shipToFields.length,\n      totalChanges: changeHistory.length,\n      lastModified: Math.max(new Date(lastModified).getTime(), new Date(poLastModified).getTime())\n    };\n  };\n\n  // Handle company field drag and drop with timestamp update\n  const handleCompanyDragEnd = (event) => {\n    useCompanyFieldsDragEnd(setCompanyFields)(event);\n    updateCompanyFieldsTimestamp();\n    \n    // CRITICAL: Update field order state to preserve drag-and-drop order (same pattern as section swapping)\n    if (event.active.id !== event.over.id) {\n      setCompanyFieldOrder(prevOrder => {\n        const oldIndex = prevOrder.indexOf(event.active.id);\n        const newIndex = prevOrder.indexOf(event.over.id);\n        \n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, event.active.id);\n        \n        console.log('🔄 Company field order updated:', { oldIndex, newIndex, newOrder });\n        return newOrder;\n      });\n      \n      console.log('🔄 Company fields reordered');\n    }\n  };\n\n  // ============================================================================\n  // SUMMARY LOGGING FUNCTION\n  // ============================================================================\n  \n  // Function to log a summary of all field states\n  const logFieldSummary = () => {\n    console.log('📊 FIELD SUMMARY:', {\n      company: {\n        total: companyFields.length,\n        lastModified: new Date(lastModified).toLocaleString(),\n        fields: companyFields.map(f => ({ id: f.id, label: f.label }))\n      },\n      purchaseOrder: {\n        total: purchaseOrderFields.length,\n        lastModified: new Date(poLastModified).toLocaleString(),\n        fields: purchaseOrderFields.map(f => ({ id: f.id, label: f.label, isTitle: f.isTitle }))\n      }\n    });\n  };\n\n  // Log summary on component mount\n  React.useEffect(() => {\n    logFieldSummary();\n  }, []); // Only run once on mount\n\n  // ============================================================================\n  // PURCHASE ORDER FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n  \n  // Helper function to update timestamp when purchase order fields change\n  const updatePurchaseOrderFieldsTimestamp = () => {\n    setPoLastModified(new Date().toISOString());\n  };\n\n  // Add new purchase order field\n  const handleAddPurchaseOrderField = (newField) => {\n    setPurchaseOrderFields(prevFields => [...prevFields, newField]);\n    updatePurchaseOrderFieldsTimestamp();\n    console.log('➕ Added new purchase order field:', newField);\n  };\n\n  // Remove purchase order field\n  const handleRemovePurchaseOrderField = (fieldId) => {\n    setPurchaseOrderFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      showNotification(`🗑️ Removed purchase order field: \"${fieldToRemove?.label}\"`, 'warning');\n      console.log('🗑️ Removed purchase order field:', fieldToRemove);\n      return prevFields.filter(field => field.id !== fieldId);\n    });\n    updatePurchaseOrderFieldsTimestamp();\n  };\n\n  // ============================================================================\n  // VENDOR FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n  \n  // Add new vendor field\n  const handleAddVendorField = (newField) => {\n    setVendorFields(prevFields => [...prevFields, newField]);\n    console.log('➕ Added new vendor field:', newField);\n    showNotification(`➕ Added vendor field: \"${newField.label}\"`, 'success');\n  };\n\n  // Remove vendor field\n  const handleRemoveVendorField = (fieldId) => {\n    setVendorFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      showNotification(`🗑️ Removed vendor field: \"${fieldToRemove?.label}\"`, 'warning');\n      console.log('🗑️ Removed vendor field:', fieldToRemove);\n      return prevFields.filter(field => field.id !== fieldId);\n    });\n  };\n\n  // Handle vendor field label changes\n  const handleVendorFieldLabelChange = (fieldId, newLabel) => {\n    setVendorFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      \n      logChange('label-change', fieldId, oldLabel, newLabel, 'vendor');\n      \n      return prevFields.map(field => \n        field.id === fieldId ? { ...field, label: newLabel } : field\n      );\n    });\n  };\n\n  // ============================================================================\n  // SHIP-TO FIELD MANAGEMENT FUNCTIONS\n  // ============================================================================\n  \n  // Add new ship-to field\n  const handleAddShipToField = (newField) => {\n    setShipToFields(prevFields => [...prevFields, newField]);\n    console.log('➕ Added new ship-to field:', newField);\n    showNotification(`➕ Added ship-to field: \"${newField.label}\"`, 'success');\n  };\n\n  // Remove ship-to field\n  const handleRemoveShipToField = (fieldId) => {\n    setShipToFields(prevFields => {\n      const fieldToRemove = prevFields.find(field => field.id === fieldId);\n      showNotification(`🗑️ Removed ship-to field: \"${fieldToRemove?.label}\"`, 'warning');\n      console.log('🗑️ Removed ship-to field:', fieldToRemove);\n      return prevFields.filter(field => field.id !== fieldId);\n    });\n  };\n\n  // Add new line item row\n  const handleAddLineItemRow = () => {\n    setLineItemRows(prevRows => {\n      const newRowNumber = Math.max(...prevRows) + 1;\n      const newRows = [...prevRows, newRowNumber];\n      console.log('➕ Added new line item row:', newRowNumber);\n      showNotification(`➕ Added new line item row ${newRowNumber}`, 'success');\n      return newRows;\n    });\n  };\n\n  // Add new line item column\n  const handleAddLineItemColumn = () => {\n    setLineItemColumnOrder(prevOrder => {\n      // Generate a more descriptive column ID\n      const columnTypes = ['Status', 'Priority', 'Category', 'Location', 'Supplier', 'Date', 'Notes', 'Reference'];\n      const randomType = columnTypes[Math.floor(Math.random() * columnTypes.length)];\n      const newColumnId = `custom-${randomType.toLowerCase()}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const newOrder = [...prevOrder, newColumnId];\n      console.log('➕ Added new line item column:', newColumnId);\n      showNotification(`➕ Added new ${randomType} column`, 'success');\n      return newOrder;\n    });\n  };\n\n  // Handle ship-to field label changes\n  const handleShipToFieldLabelChange = (fieldId, newLabel) => {\n    setShipToFields(prevFields => {\n      const oldField = prevFields.find(field => field.id === fieldId);\n      const oldLabel = oldField ? oldField.label : '';\n      \n      logChange('label-change', fieldId, oldLabel, newLabel, 'ship-to');\n      \n      return prevFields.map(field => \n        field.id === fieldId ? { ...field, label: newLabel } : field\n      );\n    });\n  };\n\n  // Handle purchase order field drag and drop with timestamp update\n  const handlePurchaseOrderDragEnd = (event) => {\n    usePurchaseOrderFieldsDragEnd(setPurchaseOrderFields)(event);\n    updatePurchaseOrderFieldsTimestamp();\n    \n    // CRITICAL: Update field order state to preserve drag-and-drop order (same pattern as section swapping)\n    if (event.active.id !== event.over.id) {\n      setPurchaseOrderFieldOrder(prevOrder => {\n        const oldIndex = prevOrder.indexOf(event.active.id);\n        const newIndex = prevOrder.indexOf(event.over.id);\n        \n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, event.active.id);\n        \n        console.log('🔄 Purchase order field order updated:', { oldIndex, newIndex, newOrder });\n        return newOrder;\n      });\n      \n      console.log('🔄 Purchase order fields reordered');\n    }\n  };\n\n  // ============================================================================\n  // SECTION-LEVEL DRAG AND DROP\n  // ============================================================================\n  \n  // State for vendor/ship-to section order\n  const [vendorShipToSectionOrder, setVendorShipToSectionOrder] = useState(['section3', 'section4']);\n  const [vendorShipToShippingGroupOrder, setVendorShipToShippingGroupOrder] = useState(['vendor-ship-to-shipping-group']);\n  \n  // State for sections 1 and 2 order (Company Info and Purchase Order)\n  const [sections1And2Order, setSections1And2Order] = useState(['section1', 'section2']);\n  \n  // State for sections 5 and 6 order (Vendor/Ship-To and Shipping Details)\n  const [sections5And6Order, setSections5And6Order] = useState(['section5']);  \n\n  // State for major sections order (vendor-shipto-group and shipping-section)\n  const [majorSectionsOrder, setMajorSectionsOrder] = useState(['vendor-shipto-group', 'shipping-section']);\n  \n  // State for vendor-ship-to and shipping-details sections order (simplified after removing section 7)\n  const [vendorShipToAndShippingDetailsOrder, setVendorShipToAndShippingDetailsOrder] = useState(['section5']);\n  \n  // CRITICAL: Add field order state management (same pattern as section order)\n  // State for company field order (preserves drag-and-drop order independently of section position)\n  const [companyFieldOrder, setCompanyFieldOrder] = useState([]);\n  \n  // State for purchase order field order (preserves drag-and-drop order independently of section position)\n  const [purchaseOrderFieldOrder, setPurchaseOrderFieldOrder] = useState([]);\n  \n  // Initialize field order states with current field IDs\n  React.useEffect(() => {\n    setCompanyFieldOrder(companyFields.map(field => field.id));\n  }, [companyFields]);\n  \n  React.useEffect(() => {\n    setPurchaseOrderFieldOrder(purchaseOrderFields.map(field => field.id));\n  }, [purchaseOrderFields]);\n  \n  // Line item column order state\n  const [lineItemColumnOrder, setLineItemColumnOrder] = useState([\n    'itemNumber',\n    'description', \n    'qty',\n    'rate',\n    'amount'\n  ]);\n  \n  // Log line item column order changes\n  useEffect(() => {\n    console.log('🔀 Line item column order updated:', lineItemColumnOrder);\n  }, [lineItemColumnOrder]);\n  \n  // Shipping column order state\n  const [shippingColumnOrder, setShippingColumnOrder] = useState([\n    'requisitioner',\n    'shipVia',\n    'fob',\n    'shippingTerms'\n  ]);\n  \n  // Log shipping column order changes\n  useEffect(() => {\n    console.log('🚢 Shipping column order updated:', shippingColumnOrder);\n  }, [shippingColumnOrder]);\n\n  // Comments and Totals section order state (Section 8 & 9)\n  const [commentsTotalsSectionOrder, setCommentsTotalsSectionOrder] = useState(['section8', 'section9']);\n\n  // Function to handle drag start\n  const handleDragStart = (event) => {\n    const { active } = event;\n\n    \n    // Add dragging state to the dragged element\n    if (active.id === 'section1' || active.id === 'section2') {\n      const element = document.getElementById(active.id);\n      if (element) {\n        element.setAttribute('data-is-dragging', 'true');\n\n        \n        // Add visual feedback\n        element.style.border = '3px solid #ff6b6b';\n        element.style.backgroundColor = 'rgba(255, 107, 107, 0.1)';\n      }\n    }\n  };\n\n  // Function to handle drag over\n  const handleDragOver = (event) => {\n    const { active, over } = event;\n    \n\n    \n\n    \n    // Handle section reordering drag over\n    if (active.id === 'section1' || active.id === 'section2') {\n      if (over && (over.id === 'section1' || over.id === 'section2')) {\n\n        \n        // Add over state to the target element\n        const targetElement = document.getElementById(over.id);\n        if (targetElement) {\n          targetElement.setAttribute('data-is-over', 'true');\n          \n          // Enhanced visual feedback for section reordering\n          targetElement.style.border = '3px solid #4ecdc4';\n          targetElement.style.backgroundColor = 'rgba(78, 205, 196, 0.15)';\n          targetElement.style.transform = 'scale(1.01)';\n          targetElement.style.transition = 'all 0.2s ease-in-out';\n          targetElement.style.boxShadow = '0 6px 20px rgba(78, 205, 196, 0.3)';\n        }\n      }\n    }\n  };\n\n  // Function to handle section reordering\n  const handleSectionDragEnd = (event) => {\n    const { active, over } = event;\n    \n\n    \n    if (!active || !over) {\n\n      return;\n    }\n    \n    if (active.id !== over.id) {\n\n      \n      setSections1And2Order((prevOrder) => {\n\n        \n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        \n        console.log('🔄 Index calculations:', { oldIndex, newIndex });\n        \n        if (oldIndex === -1 || newIndex === -1) {\n          console.log('❌ Invalid indices found');\n          return prevOrder;\n        }\n        \n        const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\n        \n        console.log('🔄 New section order:', newOrder);\n        console.log('✅ Section swap successful!');\n        \n        showNotification('🔄 Sections swapped successfully!', 'success');\n        console.log('✅ Sections swapped via drag & drop!');\n        \n        return newOrder;\n      });\n      \n      // Clean up data attributes and visual feedback\n      const section1Element = document.getElementById('section1');\n      const section2Element = document.getElementById('section2');\n      if (section1Element) {\n        section1Element.removeAttribute('data-is-dragging');\n        section1Element.removeAttribute('data-is-over');\n        section1Element.style.border = '';\n        section1Element.style.backgroundColor = '';\n      }\n      if (section2Element) {\n        section2Element.removeAttribute('data-is-dragging');\n        section2Element.removeAttribute('data-is-over');\n        section2Element.style.border = '';\n        section2Element.style.backgroundColor = '';\n      }\n    } else {\n      console.log('🔍 No section swap - same position');\n      \n      // Clean up data attributes and visual feedback even if no swap\n      const section1Element = document.getElementById('section1');\n      const section2Element = document.getElementById('section2');\n      if (section1Element) {\n        section1Element.removeAttribute('data-is-dragging');\n        section1Element.removeAttribute('data-is-over');\n        section1Element.style.border = '';\n        section1Element.style.backgroundColor = '';\n      }\n      if (section2Element) {\n        section2Element.removeAttribute('data-is-dragging');\n        section2Element.removeAttribute('data-is-over');\n        section2Element.style.border = '';\n        section2Element.style.backgroundColor = '';\n      }\n    }\n  };\n\n  // Function to handle sections 5 and 6 reordering (Vendor/Ship-To and Shipping Details)\n  const handleSections5And6DragEnd = (event) => {\n    const { active, over } = event;\n    \n    console.log('🔍 SECTIONS 5&6 DRAG DEBUG - Event received:', { active, over });\n    \n    if (active.id !== over.id) {\n      console.log('🔄 Sections 5&6 swap detected!', { active: active.id, over: over.id });\n      \n      setSections5And6Order(prevOrder => {\n        console.log('🔄 Previous sections 5&6 order:', prevOrder);\n        \n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        \n        console.log('🔄 Index calculations:', { oldIndex, newIndex });\n        \n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, active.id);\n        \n        console.log('🔄 New sections 5&6 order:', newOrder);\n        \n        showNotification('🔄 Sections 5 and 6 reordered!', 'info');\n        console.log('🔄 Sections 5&6 reordered via drag & drop!');\n        console.log('📊 New section order:', newOrder);\n        \n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No sections 5&6 swap - same position');\n    }\n  };\n\n  // Handle line item column drag end\n  const handleLineItemColumnDragEnd = (event) => {\n    const { active, over } = event;\n    \n    console.log('🔍 LINE ITEM COLUMN DRAG DEBUG - Event received:', { active: active.id, over: over.id });\n    \n    if (active.id !== over.id) {\n      console.log('🔄 Line item column swap detected!', { active: active.id, over: over.id });\n      \n      // Extract column IDs from the header IDs (remove 'line-item-header-' prefix)\n      const activeColumnId = active.id.replace('line-item-header-', '');\n      const overColumnId = over.id.replace('line-item-header-', '');\n      \n      setLineItemColumnOrder((items) => {\n        const oldIndex = items.indexOf(activeColumnId);\n        const newIndex = items.indexOf(overColumnId);\n        \n        console.log('🔍 Column ID extraction:', { activeColumnId, overColumnId });\n        console.log('🔄 Previous line item column order:', items);\n        console.log('🔀 Index calculations:', { oldIndex, newIndex });\n        \n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        \n        console.log('🔄 New line item column order:', newOrder);\n        showNotification('🔄 Line item columns reordered!', 'info');\n        \n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No line item column swap - same position');\n    }\n  };\n\n  // Handle shipping column drag end\n  const handleShippingColumnDragEnd = (event) => {\n    // Check if this is an add-column event from Section5Shipping\n    if (event.type === 'add-column' && event.newOrder) {\n      console.log('🔍 SHIPPING COLUMN ADD DEBUG - New column added:', event.newOrder);\n      setShippingColumnOrder(event.newOrder);\n      showNotification('🚢 New shipping column added!', 'success');\n      return;\n    }\n    \n    // Check if this is the new event format from Section5Shipping (reordering)\n    if (event.newOrder) {\n      console.log('🔍 SHIPPING COLUMN DRAG DEBUG - New order received:', event.newOrder);\n      setShippingColumnOrder(event.newOrder);\n      showNotification('🚢 Shipping columns reordered!', 'info');\n      return;\n    }\n    \n    // Handle the old event format (fallback)\n    const { active, over } = event;\n    \n    console.log('🔍 SHIPPING COLUMN DRAG DEBUG - Event received:', { active: active.id, over: over.id });\n    \n    if (active.id !== over.id) {\n      console.log('🔄 Shipping column swap detected!', { active: active.id, over: over.id });\n      \n      setShippingColumnOrder((items) => {\n        const oldIndex = items.indexOf(active.id);\n        const newIndex = items.indexOf(over.id);\n        \n        console.log('🔄 Previous shipping column order:', items);\n        console.log('🔀 Index calculations:', { oldIndex, newIndex });\n        \n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        \n        console.log('🔄 New shipping column order:', newOrder);\n        showNotification('🚢 Shipping columns reordered!', 'info');\n        \n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No shipping column swap - same position');\n    }\n  };\n\n\n\n  // Handle Comments and Totals section drag end\n  const handleCommentsTotalsDragEnd = (event) => {\n    const { active, over } = event;\n    \n    if (active.id !== over.id) {\n      setCommentsTotalsSectionOrder((items) => {\n        const oldIndex = items.indexOf(active.id);\n        const newIndex = items.indexOf(over.id);\n        \n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Function to handle vendor/ship-to section reordering\n  const handleVendorShipToSectionDragEnd = (event) => {\n    const { active, over } = event;\n    \n    console.log('🔍 VENDOR/SHIP-TO DRAG DEBUG - Event received:', { active, over });\n    \n    if (active.id !== over.id) {\n      console.log('🔄 Vendor/Ship-To section swap detected!', { active: active.id, over: over.id });\n      \n      setVendorShipToSectionOrder(prevOrder => {\n        console.log('🔄 Previous vendor/ship-to order:', prevOrder);\n        \n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        \n        console.log('🔄 Index calculations:', { oldIndex, newIndex });\n        \n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, active.id);\n        \n        console.log('🔄 New vendor/ship-to order:', newOrder);\n        \n        // The sections are already reordered by the code above, no need to swap field data\n        // Just show notification that sections were reordered\n        showNotification('🔄 Vendor and Ship To sections reordered!', 'info');\n        console.log('🔄 Vendor/Ship-To sections reordered via drag & drop!');\n        console.log('📊 New section order:', newOrder);\n        \n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No vendor/ship-to swap - same position');\n    }\n  };\n\n  // Function to handle vendor-ship-to and shipping-details sections reordering\n  const handleVendorShipToAndShippingDetailsDragEnd = (event) => {\n    const { active, over } = event;\n    \n    console.log('🔍 VENDOR-SHIP-TO + SHIPPING DETAILS DRAG DEBUG - Event received:', { active, over });\n    \n    if (active.id !== over.id) {\n      console.log('🔄 Vendor-ShipTo + Shipping Details swap detected!', { active: active.id, over: over.id });\n      \n      setVendorShipToAndShippingDetailsOrder(prevOrder => {\n        console.log('🔄 Previous vendor-shipTo + shipping details order:', prevOrder);\n        \n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        \n        console.log('🔄 Index calculations:', { oldIndex, newIndex });\n        \n        const newOrder = [...prevOrder];\n        newOrder.splice(oldIndex, 1);\n        newOrder.splice(newIndex, 0, active.id);\n        \n        console.log('🔄 New vendor-shipTo + shipping details order:', newOrder);\n        \n        showNotification('🔄 Vendor-ShipTo and Shipping Details sections reordered!', 'info');\n        console.log('🔄 Vendor-ShipTo + Shipping Details sections reordered via drag & drop!');\n        console.log('📊 New section order:', newOrder);\n        \n        return newOrder;\n      });\n    } else {\n      console.log('🔍 No vendor-shipTo + shipping details swap - same position');\n    }\n  };\n\n  // ============================================================================\n  // SECTION SWAPPING FUNCTION\n  // ============================================================================\n  \n\n  \n  // Function to swap Section 1 and Section 2\n  const handleSwapSections = () => {\n    console.log('🔄 MANUAL SWAP FUNCTION CALLED');\n    console.log('🔄 Before swap - Company fields:', companyFields);\n    console.log('🔄 Before swap - Purchase Order fields:', purchaseOrderFields);\n    \n    // Store current values before swapping\n    const companyFieldValues = companyFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    \n    const purchaseOrderFieldValues = purchaseOrderFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        isTitle: field.isTitle, // Explicitly preserve isTitle property\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    \n    console.log('🔍 Before swap - Purchase Order fields:', purchaseOrderFieldValues);\n    console.log('🔍 Title field check:', purchaseOrderFieldValues.find(f => f.isTitle));\n    \n    // IMPORTANT: Create new field arrays to avoid reference issues\n    const newCompanyFields = purchaseOrderFields.map(field => ({\n      ...field,\n      isTitle: field.isTitle // Ensure isTitle is preserved\n    }));\n    \n    const newPurchaseOrderFields = companyFields.map(field => ({\n      ...field,\n      isTitle: false // Company fields should never be title\n    }));\n    \n    console.log('🔄 About to swap fields...');\n    console.log('🔄 New company fields (with title check):', newCompanyFields.map(f => ({ id: f.id, label: f.label, isTitle: f.isTitle })));\n    console.log('🔄 New PO fields (with title check):', newPurchaseOrderFields.map(f => ({ id: f.id, label: f.label, isTitle: f.isTitle })));\n    \n    // Swap the fields - keep Purchase Order section intact (title + date + po#)\n    setCompanyFields(newCompanyFields);\n    setPurchaseOrderFields(newPurchaseOrderFields);\n    \n    // Update timestamps\n    setLastModified(new Date().toISOString());\n    setPoLastModified(new Date().toISOString());\n    \n              showNotification('🔄 Sections swapped!', 'info');\n    \n    console.log('🔄 Sections swapped successfully!');\n    console.log('📊 New Section 1 (was Section 2):', newCompanyFields);\n    console.log('📊 New Section 2 (was Section 1):', newPurchaseOrderFields);\n    \n    // Log the swap operation\n    console.log('🔄 Section Swap Details:', {\n      'Section 1 → Section 2': newCompanyFields.map(f => ({ id: f.id, label: f.label, value: f.value, isTitle: f.isTitle })),\n      'Section 2 → Section 1': newPurchaseOrderFields.map(f => ({ id: f.id, label: f.label, value: f.value, isTitle: f.isTitle }))\n    });\n    };\n\n  // Function to manually swap Vendor and Ship To sections\n  const handleSwapVendorShipTo = () => {\n    console.log('🔄 MANUAL VENDOR/SHIP-TO SWAP FUNCTION CALLED');\n    console.log('🔄 Before swap - Vendor fields:', vendorFields);\n    console.log('🔄 Before swap - Ship To fields:', shipToFields);\n    \n    // Store current values before swapping\n    const vendorFieldValues = vendorFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    \n    const shipToFieldValues = shipToFields.map(field => {\n      const element = document.getElementById(field.id);\n      return {\n        ...field,\n        value: element ? element.textContent.trim() : ''\n      };\n    });\n    \n    console.log('🔍 Before swap - Vendor field values:', vendorFieldValues);\n    console.log('🔍 Before swap - Ship To field values:', shipToFieldValues);\n    \n    // Swap the fields\n    setVendorFields(shipToFieldValues);\n    setShipToFields(vendorFieldValues);\n    \n    // Update section order\n    setVendorShipToSectionOrder(prevOrder => {\n      const newOrder = [...prevOrder].reverse();\n      return newOrder;\n    });\n    \n    showNotification('🔄 Vendor and Ship To sections swapped!', 'info');\n    \n    console.log('🔄 Vendor and Ship To sections swapped successfully!');\n    console.log('📊 New Vendor fields (was Ship To):', shipToFieldValues);\n    console.log('📊 New Ship To fields (was Vendor):', vendorFieldValues);\n    \n    // Log the swap operation\n    console.log('🔄 Vendor/Ship-To Swap Details:', {\n      'Vendor → Ship To': shipToFieldValues.map(f => ({ id: f.id, label: f.label, value: f.value })),\n      'Ship To → Vendor': vendorFieldValues.map(f => ({ id: f.id, label: f.label, value: f.value }))\n    });\n  };\n\n  // ============================================================================\n  // FIELD VALUE CAPTURE\n  // ============================================================================\n  \n  // Function to capture current field values from the DOM\n  const captureFieldValues = () => {\n    console.log('📝 Capturing field values from DOM...');\n    \n    // Capture company field values - PRESERVE CURRENT ORDER\n    console.log('🔍 DEBUG: Current company fields order before capture:', companyFields.map(f => ({ id: f.id, label: f.label })));\n    \n    const updatedCompanyFields = companyFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 Company field \"${field.label}\": \"${value}\"`);\n      return { ...field, value };\n    });\n    \n    console.log('🔍 DEBUG: Updated company fields order after capture:', updatedCompanyFields.map(f => ({ id: f.id, label: f.label })));\n    \n    // Capture purchase order field values\n    const updatedPurchaseOrderFields = purchaseOrderFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 PO field \"${field.label}\": \"${value}\"`);\n      return { ...field, value };\n    });\n    \n    // Capture vendor field values\n    const updatedVendorFields = vendorFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 Vendor field \"${field.label}\": \"${value}\"`);\n      return { ...field, value };\n    });\n    \n    // Capture ship-to field values\n    const updatedShipToFields = shipToFields.map(field => {\n      const element = document.getElementById(field.id);\n      const value = element ? element.textContent.trim() : '';\n      console.log(`📝 Ship-to field \"${field.label}\": \"${value}\"`);\n      return { ...field, value };\n    });\n    \n    // Capture line item values from the table\n    const capturedLineItems = [];\n    // Get the actual number of rows from the table\n    const actualRows = document.querySelectorAll('.itemtable tbody tr').length;\n    console.log(`📝 Capturing ${actualRows} line item rows...`);\n    console.log(`📝 Line item column order:`, lineItemColumnOrder);\n    \n    for (let rowIndex = 0; rowIndex < actualRows; rowIndex++) {\n      const rowData = {};\n      lineItemColumnOrder.forEach(columnId => {\n        const cellSelector = `tr:nth-child(${rowIndex + 1}) td[data-column=\"${columnId}\"] .editable-field`;\n        const cell = document.querySelector(`.itemtable tbody ${cellSelector}`);\n        const value = cell ? cell.textContent.trim() : '';\n        rowData[columnId] = value;\n        console.log(`📝 Row ${rowIndex + 1}, Column ${columnId}: \"${value}\" (selector: \"${cellSelector}\")`);\n        \n        // Debug: Check if cell exists and what's in it\n        if (!cell) {\n          console.warn(`⚠️ Cell not found for selector: \"${cellSelector}\"`);\n          // Try to find the td element to see what's there\n          const tdElement = document.querySelector(`.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-column=\"${columnId}\"]`);\n          if (tdElement) {\n            console.log(`🔍 Found td element:`, tdElement);\n            console.log(`🔍 td content:`, tdElement.innerHTML);\n          } else {\n            console.warn(`⚠️ td element not found for column: ${columnId}`);\n          }\n        }\n      });\n      capturedLineItems.push(rowData);\n    }\n    console.log('📝 Line items captured:', capturedLineItems);\n    \n    // Capture totals field values using the new state structure\n    const updatedTotalsFields = totalsFields.map(field => {\n      let value = field.value; // Default to current state value\n      \n      // For editable fields, try to get from DOM\n      if (!field.isCalculated) {\n        const selector = `.totals-section .total-row[data-field=\"${field.id}\"] .editable-field`;\n        const element = document.querySelector(selector);\n        if (element) {\n          value = element.textContent.trim();\n        }\n      }\n      \n      console.log(`📝 Totals field \"${field.label}\": \"${value}\"`);\n      return { ...field, value };\n    });\n    \n    // Update state with captured values\n    setCompanyFields(updatedCompanyFields);\n    setPurchaseOrderFields(updatedPurchaseOrderFields);\n    setVendorFields(updatedVendorFields);\n    setShipToFields(updatedShipToFields);\n    setTotalsFields(updatedTotalsFields);\n    \n    console.log('📝 Field values captured and state updated!');\n    \n    return {\n      companyFields: updatedCompanyFields,\n      purchaseOrderFields: updatedPurchaseOrderFields,\n      vendorFields: updatedVendorFields,\n      shipToFields: updatedShipToFields,\n      lineItems: capturedLineItems,\n      totalsFields: updatedTotalsFields\n    };\n  };\n\n  // Unified drag end dispatcher for a single top-level DndContext\n  const handleRootDragEnd = (event) => {\n    const { active } = event;\n    const activeId = active?.id || '';\n    const source = active?.data?.current?.source;\n\n    // Reset section handle dragging state\n    setIsSectionHandleDragging(false);\n    \n    // Clean up all visual feedback states\n    const allSections = document.querySelectorAll('[id^=\"section\"]');\n    allSections.forEach(section => {\n\n      section.removeAttribute('data-is-over');\n      section.removeAttribute('data-is-dragging');\n      \n      // Reset styles\n      section.style.border = '';\n      section.style.backgroundColor = '';\n      section.style.transform = '';\n      section.style.transition = '';\n      section.style.boxShadow = '';\n      \n      // Remove drop indicators\n      const dropIndicator = section.querySelector('.drop-indicator');\n      if (dropIndicator) {\n        dropIndicator.remove();\n      }\n    });\n\n    if (source === 'palette') {\n      handlePaletteDragEnd(event);\n      return;\n    }\n\n    // Sections 1 & 2 swap\n    if (activeId === 'section1' || activeId === 'section2') {\n      handleSectionDragEnd(event);\n      return;\n    }\n    // Vendor-ShipTo + ShippingDetails container swap\n    if (activeId === 'sections3And4' || activeId === 'sections5And6') {\n      handleVendorShipToAndShippingDetailsDragEnd(event);\n      return;\n    }\n    // Vendor or Ship-To section reordering\n    if (activeId === 'section3' || activeId === 'section4') {\n      handleVendorShipToSectionDragEnd(event);\n      return;\n    }\n    // Vendor or Ship-To individual field drags\n    if (String(activeId).startsWith('vendor-')) {\n      handleVendorDragEnd(event);\n      return;\n    }\n    if (String(activeId).startsWith('ship-to-')) {\n      handleShipToDragEnd(event);\n      return;\n    }\n    // Line item column reorder\n    if (['itemNumber','description','qty','rate','amount'].includes(activeId)) {\n      handleLineItemColumnDragEnd(event);\n      return;\n    }\n    // Comments & totals sections reorder\n    if (activeId === 'section8' || activeId === 'section9') {\n      handleCommentsTotalsDragEnd(event);\n      return;\n    }\n  };\n\n\n\n  // State for tracking section handle drag operations (simplified)\n  const [isSectionHandleDragging, setIsSectionHandleDragging] = useState(false);\n\n  const handleVendorShipToDragEnd = (event) => {\n    const { active, over } = event;\n\n    console.log('🔄 Individual sections drag end:', { \n      active: active?.id, \n      over: over?.id,\n      activeData: active?.data?.current,\n      overData: over?.data?.current,\n      vendorShipToSectionOrder: vendorShipToSectionOrder\n    });\n\n    // Only handle reordering between sections 3 and 4 within the group\n    if (active.id !== over.id &&\n        (active.id === 'section3' || active.id === 'section4') &&\n        (over.id === 'section3' || over.id === 'section4')) {\n      \n      const oldIndex = vendorShipToSectionOrder.indexOf(active.id);\n      const newIndex = vendorShipToSectionOrder.indexOf(over.id);\n\n      if (oldIndex !== -1 && newIndex !== -1) {\n        const newOrder = arrayMove(vendorShipToSectionOrder, oldIndex, newIndex);\n        setVendorShipToSectionOrder(newOrder);\n        console.log('🔄 Vendor/Ship-To sections reordered:', { from: active.id, to: over.id, newOrder: newOrder });\n        addToChangeHistory('section-reorder', `${active.id} → ${over.id}`, newOrder.join(', '));\n        showNotification('✅ Sections 3 and 4 reordered successfully', 'success');\n      }\n    } else {\n      console.log('🚫 Not handling this drag in individual context - might be group drag');\n    }\n  };\n\n  const handleVendorShipToShippingGroupDragEnd = (event) => {\n    const { active, over } = event;\n    \n    if (active.id !== over.id) {\n      console.log('🔄 Vendor-Ship-To-Shipping group drag ended:', {\n        active: active.id,\n        over: over.id\n      });\n      \n      // For now, this group can only be in one position\n      // In the future, this could be expanded to allow reordering with other major sections\n    }\n  };\n\n  // Handle major sections drag end (vendor-shipto-group and shipping-section)\n  const handleMajorSectionsDragEnd = (event) => {\n    const { active, over } = event;\n    \n    console.log('🚀 Major sections drag end called:', { \n      active: active?.id, \n      over: over?.id,\n      activeData: active?.data?.current,\n      overData: over?.data?.current,\n      majorSectionsOrder: majorSectionsOrder\n    });\n    \n    if (!active || !over || active.id === over.id) {\n      console.log('❌ Early return:', { \n        noActive: !active, \n        noOver: !over, \n        sameId: active?.id === over?.id \n      });\n      return;\n    }\n\n    console.log('🔄 Major sections drag end:', { active: active.id, over: over.id });\n\n    // Check if we're dragging the vendor-shipto-group or shipping-section\n    if ((active.id === 'vendor-shipto-group' || active.id === 'shipping-section') &&\n        (over.id === 'vendor-shipto-group' || over.id === 'shipping-section')) {\n      \n      setMajorSectionsOrder(prevOrder => {\n        const oldIndex = prevOrder.indexOf(active.id);\n        const newIndex = prevOrder.indexOf(over.id);\n        \n        if (oldIndex !== -1 && newIndex !== -1) {\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\n          \n          console.log('🔄 Major sections reordered:', {\n            from: active.id,\n            to: over.id,\n            newOrder: newOrder\n          });\n          \n          // Add to change history\n          addToChangeHistory('major-sections-swap', \n            active.id === 'vendor-shipto-group' ? 'Vendor & Ship To Group' : 'Shipping Section',\n            `Swapped with ${over.id === 'vendor-shipto-group' ? 'Vendor & Ship To Group' : 'Shipping Section'}`\n          );\n          \n          showNotification('🔄 Sections 3+4 swapped with Section 5!', 'success');\n          \n          return newOrder;\n        }\n        \n        return prevOrder;\n      });\n    }\n  };\n\n\n\n  return (\n    <div className={`purchase-order-container ${!sidebarVisible ? 'sidebar-hidden' : ''}`}>\n      <DndContext \n        sensors={sensors} \n        collisionDetection={rectIntersection}\n        onDragCancel={() => {\n          console.log('❌ Drag cancelled');\n        }}\n        onDragMove={(event) => {\n          console.log('🔄 Drag move:', event);\n        }}\n        onDragStart={(event) => {\n          console.log('🚀 DndContext Drag Start:', event);\n          handleDragStart(event);\n        }}\n        onDragOver={(event) => {\n          console.log('🎯 DndContext Drag Over:', event);\n          handleDragOver(event);\n        }}\n        onDragEnd={(event) => {\n          console.log('🏁 DndContext Drag End:', event);\n          handleRootDragEnd(event);\n        }}\n      >\n\n      {/* Available Fields Sidebar Component */}\n      <AvailableFields \n        isVisible={sidebarVisible}\n        onToggleVisibility={toggleSidebar}\n        showNotification={showNotification}\n      />\n\n      {/* Page Header */}\n      <header className=\"page-header\">\n        <div style={{ \n          display: 'flex', \n          flexDirection: 'column', \n          alignItems: 'center', \n          width: '100%',\n          textAlign: 'center',\n          marginBottom: '20px'\n        }}>\n          <div style={{ marginBottom: '20px' }}>\n            <h1>Purchase Order Management System</h1>\n            <p>Create, edit, and manage purchase orders with ease</p>\n          </div>\n          <SectionTitleColorPicker />\n        </div>\n        {/* Sidebar toggle is now handled by AvailableFields component */}\n      </header>\n\n      \n\n      {/* Real-time Status Indicator removed per request */}\n\n      {/* Purchase Order Form */}\n      <div className=\"container\">\n        <div className=\"form-content\">\n          {/* Header Section */}\n          <div className=\"section-container\">\n            <div className=\"header-section vendor-shipping-columns\">\n              {/* Section-level Drag and Drop */}\n              <SortableContext \n                items={sections1And2Order}\n                strategy={horizontalListSortingStrategy}\n              >\n\n                {/* CRITICAL: Render sections dynamically based on sections1And2Order state */}\n                {sections1And2Order.map((sectionId, index) => {\n\n                  \n                  if (sectionId === 'section1') {\n                    return (\n                      <DraggableSectionWrapper key={`section1-${index}`} id=\"section1\" sectionNumber=\"1\" isSectionHandleDragging={isSectionHandleDragging} showDragHandle={true}>\n                        <Section1CompanyInfo \n                          companyFields={companyFields}\n                          sensors={sensors}\n                          onCompanyDragEnd={handleCompanyDragEnd}\n                          onAddCompanyField={handleAddCompanyField}\n                          onRemoveCompanyField={handleRemoveCompanyField}\n                          onLabelChange={handleCompanyFieldLabelChange}\n                          onContentChange={handleContentChange}\n                          lastModified={lastModified}\n                        />\n                      </DraggableSectionWrapper>\n                    );\n                  } else if (sectionId === 'section2') {\n                    return (\n                      <DraggableSectionWrapper key={`section2-${index}`} id=\"section2\" sectionNumber=\"2\" isSectionHandleDragging={isSectionHandleDragging} showDragHandle={true}>\n                        <Section2PurchaseOrder \n                          purchaseOrderFields={purchaseOrderFields}\n                          sensors={sensors}\n                          onPurchaseOrderDragEnd={handlePurchaseOrderDragEnd}\n                          onAddPurchaseOrderField={handleAddPurchaseOrderField}\n                          onRemovePurchaseOrderField={handleRemovePurchaseOrderField}\n                          onLabelChange={handlePurchaseOrderFieldLabelChange}\n                          onContentChange={handleContentChange}\n                          lastModified={poLastModified}\n                        />\n                      </DraggableSectionWrapper>\n                    );\n                  }\n                  return null;\n                })}\n              </SortableContext>\n            </div>\n          </div>\n\n          {/* Major Sections Container with Drag and Drop */}\n          <div className=\"major-sections-container\">\n            <DndContext\n              sensors={sensors}\n              collisionDetection={closestCenter}\n              onDragEnd={handleMajorSectionsDragEnd}\n            >\n              <SortableContext \n                items={majorSectionsOrder}\n                strategy={verticalListSortingStrategy}\n              >\n                {majorSectionsOrder.map((sectionGroup, index) => {\n                  if (sectionGroup === 'vendor-shipto-group') {\n                    return (\n                      <div key={`vendor-shipto-group-${index}`} className=\"section-container\" style={{ marginTop: '30px', position: 'relative' }}>\n                        {/* Group Drag Handle for Sections 3 & 4 */}\n                        <DraggableGroupHandle id=\"vendor-shipto-group\" label=\"Vendor & Ship To\">\n                          <div className=\"vendor-shipping-columns\">\n                            {/* Individual sections with their own DndContext for internal reordering */}\n                            <DndContext\n                              sensors={sensors}\n                              collisionDetection={closestCenter}\n                              onDragEnd={handleVendorShipToDragEnd}\n                            >\n                              <SortableContext \n                                items={vendorShipToSectionOrder}\n                                strategy={horizontalListSortingStrategy}\n                              >\n                                {vendorShipToSectionOrder.map((sectionId, sectionIndex) => (\n                                  <div key={`${sectionId}-${sectionIndex}`} className=\"individual-section\">\n                                    {sectionId === 'section3' ? (\n                                      <DraggableSectionWrapper key={`section3-${sectionIndex}`} id=\"section3\" sectionNumber=\"3\" isSectionHandleDragging={isSectionHandleDragging} showDragHandle={true}>\n                                        <Section3Vendor \n                                          vendorFields={vendorFields}\n                                          sensors={sensors}\n                                          onVendorDragEnd={handleVendorDragEnd}\n                                          onAddVendorField={handleAddVendorField}\n                                          onRemoveVendorField={handleRemoveVendorField}\n                                          onLabelChange={handleVendorFieldLabelChange}\n                                          onContentChange={handleContentChange}\n                                          lastModified={Date.now()}\n                                        />\n                                      </DraggableSectionWrapper>\n                                    ) : sectionId === 'section4' ? (\n                                      <DraggableSectionWrapper key=\"section4\" id=\"section4\" sectionNumber=\"4\" isSectionHandleDragging={isSectionHandleDragging} showDragHandle={true}>\n                                        <Section4ShipTo \n                                          shipToFields={shipToFields}\n                                          sensors={sensors}\n                                          onShipToDragEnd={handleShipToDragEnd}\n                                          onAddShipToField={handleAddShipToField}\n                                          onRemoveShipToField={handleRemoveShipToField}\n                                          onLabelChange={handleShipToFieldLabelChange}\n                                          onContentChange={handleContentChange}\n                                          lastModified={Date.now()}\n                                        />\n                                      </DraggableSectionWrapper>\n                                    ) : null}\n                                  </div>\n                                ))}\n                              </SortableContext>\n                            </DndContext>\n                          </div>\n                        </DraggableGroupHandle>\n                      </div>\n                    );\n                  } else if (sectionGroup === 'shipping-section') {\n                    return (\n                      <div key={`shipping-section-${index}`} style={{ marginTop: '30px' }}>\n                        <DraggableGroupHandle id=\"shipping-section\" label=\"Shipping\">\n                          <div className=\"section-5\">\n                            <Section5Shipping \n                              shippingColumnOrder={shippingColumnOrder}\n                              onShippingColumnDragEnd={handleShippingColumnDragEnd}\n                            />\n                          </div>\n                        </DraggableGroupHandle>\n                      </div>\n                    );\n                  }\n                  return null;\n                })}\n              </SortableContext>\n            </DndContext>\n\n\n          </div>\n\n\n\n          {/* Items Table */}\n          <div className=\"sortable-section items-section\" style={{ marginBottom: '20px' }}>\n\n            <DndContext\n              collisionDetection={closestCenter}\n              onDragEnd={handleLineItemColumnDragEnd}\n            >\n              <SortableContext items={lineItemColumnOrder.map(columnId => `line-item-header-${columnId}`)} strategy={horizontalListSortingStrategy}>\n                <table className=\"itemtable\">\n              <thead>\n                <tr>\n                  <th></th>\n                  {lineItemColumnOrder.map((columnId, index) => {\n                    const columnConfig = {\n                      itemNumber: { label: 'Item#', colSpan: 3 },\n                      description: { label: 'Description', colSpan: 12 },\n                      qty: { label: 'Qty', colSpan: 2 },\n                      rate: { label: 'Rate', colSpan: 3 },\n                      amount: { label: 'Amount', colSpan: 3 }\n                    };\n                    \n                    // Handle custom columns\n                    if (columnId.startsWith('custom-')) {\n                      const customType = columnId.replace('custom-', '').split('-')[0]; // Get first part after 'custom-'\n                      const label = customType.charAt(0).toUpperCase() + customType.slice(1); // Capitalize first letter\n                      const config = { label: label, colSpan: 3 };\n                      return (\n                        <SortableLineItemColumnHeader key={`header-${columnId}`} id={`line-item-header-${columnId}`}>\n                          <th key={`${columnId}-${index}`} colSpan={config.colSpan}>\n                            {label} ::\n                          </th>\n                        </SortableLineItemColumnHeader>\n                      );\n                    }\n                    \n                    const config = columnConfig[columnId];\n                    return (\n                      <SortableLineItemColumnHeader key={`header-${columnId}`} id={`line-item-header-${columnId}`}>\n                        <th key={`${columnId}-${index}`} colSpan={config.colSpan}>\n                          {config.label} ::\n                        </th>\n                      </SortableLineItemColumnHeader>\n                    );\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {lineItemRows.map((row, rowIndex) => (\n                  <tr key={`row-${row}-${rowIndex}`} className=\"draggable-row\">\n                    <td></td>\n                    {lineItemColumnOrder.map((columnId, colIndex) => {\n                      const columnConfig = {\n                        itemNumber: { colSpan: 3, placeholder: 'Item number' },\n                        description: { colSpan: 12, placeholder: 'Item description' },\n                        qty: { colSpan: 2, placeholder: 'Qty' },\n                        rate: { colSpan: 3, placeholder: '$0.00' },\n                        amount: { colSpan: 3, placeholder: '$0.00' }\n                      };\n                      \n                      // Handle custom columns\n                      if (columnId.startsWith('custom-')) {\n                        const config = { colSpan: 3, placeholder: 'Custom value' };\n                        return (\n                          <td key={`${row}-${columnId}-${rowIndex}-${colIndex}`} colSpan={config.colSpan} data-column={columnId}>\n                            <span className=\"editable-field\" contentEditable=\"true\" data-placeholder={config.placeholder} />\n                          </td>\n                        );\n                      }\n                      \n                      const config = columnConfig[columnId];\n                      return (\n                        <td key={`${row}-${columnId}-${rowIndex}-${colIndex}`} colSpan={config.colSpan} data-column={columnId}>\n                          <span className=\"editable-field\" contentEditable=\"true\" data-placeholder={config.placeholder} />\n                        </td>\n                      );\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n              </SortableContext>\n            </DndContext>\n            \n            {/* Add Row and Column Buttons - Grouped and Right Aligned */}\n            <div className=\"add-buttons-group\">\n              <button \n                className=\"add-row-btn-grouped\" \n                onClick={handleAddLineItemRow}\n              >\n                + Add Row\n              </button>\n              <button \n                className=\"add-column-btn-grouped\" \n                onClick={handleAddLineItemColumn}\n              >\n                + Add Column\n              </button>\n            </div>\n          </div>\n\n\n\n          {/* Comments and Totals - Sections 8 & 9 */}\n          <SortableContext items={commentsTotalsSectionOrder} strategy={horizontalListSortingStrategy}>\n            <div className=\"comments-totals-section\" style={{ display: 'flex', gap: '20px' }}>\n                          {commentsTotalsSectionOrder.map((sectionId, index) => {\n              if (sectionId === 'section8') {\n                return (\n                  <div key={`section8-${index}`} id=\"section8\" className=\"sortable-section comments-section\" style={{ flex: 1 }}>\n                    <DraggableSectionHeader id=\"section8\">\n                      Comments or Special Instructions ::\n                    </DraggableSectionHeader>\n                    <div className=\"section-content\">\n                      <div className=\"comments-content\">\n                        <span className=\"editable-field\" contentEditable=\"true\" data-placeholder=\"Enter comments or special instructions...\" />\n                      </div>\n                    </div>\n                  </div>\n                );\n              } else if (sectionId === 'section9') {\n                return (\n                  <div key={`section9-${index}`} id=\"section9\" className=\"sortable-section totals-section\" style={{ flex: 1 }}>\n                    <DraggableSectionHeader id=\"section9\">\n                      Totals ::\n                    </DraggableSectionHeader>\n                    <div className=\"section-content\">\n                      <div className=\"total-row\" data-field=\"subtotal\">\n                        <span>SUBTOTAL:</span>\n                        <span className=\"calculated-field\">$0.00</span>\n                      </div>\n                      <div className=\"total-row\" data-field=\"tax\">\n                        <span>TAX:</span>\n                        <span className=\"editable-field\" contentEditable=\"true\" data-placeholder=\"$0.00\" />\n                      </div>\n                      <div className=\"total-row\" data-field=\"shipping\">\n                        <span>SHIPPING:</span>\n                        <span className=\"editable-field\" contentEditable=\"true\" data-placeholder=\"$0.00\" />\n                      </div>\n                      <div className=\"total-row\" data-field=\"other\">\n                        <span>OTHER:</span>\n                        <span className=\"editable-field\" contentEditable=\"true\" data-placeholder=\"$0.00\" />\n                      </div>\n                      <div className=\"total-row total-final\" data-field=\"total\">\n                        <span>TOTAL:</span>\n                        <span className=\"calculated-field total-field\">$0.00</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              }\n              return null;\n            })}\n            </div>\n          </SortableContext>\n\n\n\n          {/* Contact Information */}\n          <div className=\"contact-section\">\n            <div className=\"contact-content\">\n              <strong>Contact Information:</strong>\n              <span className=\"editable-field\" contentEditable=\"true\" data-placeholder=\"Enter contact information here\" />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"button-section\">\n            <button className=\"btn preview-btn\" onClick={togglePreviewMode}>\n              {isPreviewMode ? '👁️ Hide Preview' : '👁️ Show Preview'}\n            </button>\n            <button className=\"btn\" onClick={handleAIFill}>\n              🤖 AI Fill\n            </button>\n            <button className=\"btn export-btn\" onClick={exportToXML}>\n              📄 Generate XML\n            </button>\n          </div>\n\n          {/* Change History Display */}\n          {changeHistory.length > 0 && (\n            <div className=\"change-history-section\">\n              <div className=\"section-header\">\n                📝 Change History ({changeHistory.length} changes)\n                <button className=\"clear-history-btn\" onClick={clearChangeHistory}>\n                  🗑️ Clear\n                </button>\n              </div>\n              <div className=\"change-list\">\n                {changeHistory.slice(0, 10).map((change, index) => (\n                  <div key={`${change.id}-${index}`} className=\"change-item\">\n                    <span className=\"change-time\">\n                      {new Date(change.timestamp).toLocaleTimeString()}\n                    </span>\n                    <span className=\"change-type\">{change.type}</span>\n                    <span className=\"change-field\">{change.fieldId}</span>\n                    <span className=\"change-old\">{change.oldValue || 'empty'}</span>\n                    <span className=\"change-arrow\">→</span>\n                    <span className=\"change-new\">{change.newValue || 'empty'}</span>\n                  </div>\n                ))}\n                {changeHistory.length > 10 && (\n                  <div className=\"change-more\">\n                    ... and {changeHistory.length - 10} more changes\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* XML Output Modal */}\n          {showXMLModal && (\n            <div className=\"xml-modal-overlay\" onClick={closeXMLModal}>\n              <div className=\"xml-modal\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"xml-modal-header\">\n                  <h3>📄 Generated XML Output</h3>\n                  <button className=\"xml-modal-close\" onClick={closeXMLModal}>×</button>\n                </div>\n                <div className=\"xml-modal-content\">\n                  <div className=\"xml-output-container\">\n                    <pre className=\"xml-code\">{xmlOutput}</pre>\n                  </div>\n                </div>\n                <div className=\"xml-modal-actions\">\n                  <button className=\"btn copy-btn\" onClick={copyXMLToClipboard}>\n                    📋 Copy XML\n                  </button>\n                  <button className=\"btn download-btn\" onClick={downloadXML}>\n                    📥 Download XML\n                  </button>\n                  <button className=\"btn close-btn\" onClick={closeXMLModal}>\n                    Close\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n\n\n\n\n        </div>\n      </div>\n      </DndContext>\n      \n      {/* Notification Container */}\n      <div id=\"notification-container\"></div>\n    </div>\n  );\n}\n\nexport default PurchaseOrderForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}