{"ast":null,"code":"// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\nimport { processFormData } from './FormDataMapper';\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData, options = {}) {\n  var _fieldOrderData$compa, _fieldOrderData$purch, _formData$companyFiel, _data$companyFields, _fieldOrderData$compa2, _fieldOrderData$compa3;\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('📅 Template updated at:', new Date().toISOString());\n  console.log('📊 Raw form data received:', formData);\n\n  // Process and validate form data using the FormDataMapper\n  let processedData;\n  try {\n    processedData = processFormData(formData, {\n      calculateTotals: options.calculateTotals !== false,\n      validate: options.validate !== false,\n      formatForXML: true,\n      throwOnValidationError: options.throwOnValidationError || false\n    });\n    console.log('📊 Processed form data:', processedData);\n  } catch (error) {\n    console.error('❌ Form data processing failed:', error);\n    if (options.throwOnValidationError) {\n      throw error;\n    }\n    // Fallback to using raw data\n    processedData = formData || {};\n  }\n\n  // Merge processed data with original so ad-hoc fields (totals, shipping, UI line item keys) survive\n  // Prefer original ad-hoc keys when present (they reflect the live DOM at export time)\n  const data = {\n    ...(processedData || {}),\n    ...(formData || {})\n  };\n\n  // Normalize line items to expose both key styles expected by template rendering\n  if (Array.isArray(data.lineItems)) {\n    data.lineItems = data.lineItems.map(row => {\n      var _ref, _row$quantity, _ref2, _row$unitPrice, _ref3, _row$total, _row$qty, _row$rate, _row$amount, _row$quantity2, _row$unitPrice2, _row$total2;\n      const quantity = (_ref = (_row$quantity = row.quantity) !== null && _row$quantity !== void 0 ? _row$quantity : row.qty) !== null && _ref !== void 0 ? _ref : '';\n      const unitPrice = (_ref2 = (_row$unitPrice = row.unitPrice) !== null && _row$unitPrice !== void 0 ? _row$unitPrice : row.rate) !== null && _ref2 !== void 0 ? _ref2 : '';\n      const total = (_ref3 = (_row$total = row.total) !== null && _row$total !== void 0 ? _row$total : row.amount) !== null && _ref3 !== void 0 ? _ref3 : '';\n      return {\n        ...row,\n        qty: (_row$qty = row.qty) !== null && _row$qty !== void 0 ? _row$qty : quantity !== '' ? String(quantity) : '',\n        rate: (_row$rate = row.rate) !== null && _row$rate !== void 0 ? _row$rate : unitPrice !== '' ? String(unitPrice) : '',\n        amount: (_row$amount = row.amount) !== null && _row$amount !== void 0 ? _row$amount : total !== '' ? String(total) : '',\n        quantity: (_row$quantity2 = row.quantity) !== null && _row$quantity2 !== void 0 ? _row$quantity2 : quantity !== '' ? Number(String(quantity).replace(/[$,]/g, '')) : 0,\n        unitPrice: (_row$unitPrice2 = row.unitPrice) !== null && _row$unitPrice2 !== void 0 ? _row$unitPrice2 : unitPrice !== '' ? Number(String(unitPrice).replace(/[$,]/g, '')) : 0,\n        total: (_row$total2 = row.total) !== null && _row$total2 !== void 0 ? _row$total2 : total !== '' ? Number(String(total).replace(/[$,]/g, '')) : 0\n      };\n    });\n  }\n\n  // IMPORTANT: For field ordering, use the original formData to preserve drag-and-drop order\n  const fieldOrderData = {\n    ...data,\n    companyFields: formData.companyFields || data.companyFields || [],\n    purchaseOrderFields: formData.purchaseOrderFields || data.purchaseOrderFields || [],\n    vendorFields: formData.vendorFields || data.vendorFields || [],\n    shipToFields: formData.shipToFields || data.shipToFields || []\n  };\n\n  // DEBUG: Log field order data creation\n  console.log('🔍 DEBUG: fieldOrderData created with:');\n  console.log('🔍 DEBUG: - companyFields:', (_fieldOrderData$compa = fieldOrderData.companyFields) === null || _fieldOrderData$compa === void 0 ? void 0 : _fieldOrderData$compa.map(f => ({\n    id: f.id,\n    label: f.label\n  })));\n  console.log('🔍 DEBUG: - purchaseOrderFields:', (_fieldOrderData$purch = fieldOrderData.purchaseOrderFields) === null || _fieldOrderData$purch === void 0 ? void 0 : _fieldOrderData$purch.map(f => ({\n    id: f.id,\n    label: f.label\n  })));\n  console.log('🔍 DEBUG: - formData.companyFields:', (_formData$companyFiel = formData.companyFields) === null || _formData$companyFiel === void 0 ? void 0 : _formData$companyFiel.map(f => ({\n    id: f.id,\n    label: f.label\n  })));\n  console.log('🔍 DEBUG: - data.companyFields:', (_data$companyFields = data.companyFields) === null || _data$companyFields === void 0 ? void 0 : _data$companyFields.map(f => ({\n    id: f.id,\n    label: f.label\n  })));\n\n  // VALIDATION: Ensure field order data is robust and independent of section order\n  console.log('🔍 DEBUG: Field order data validation:');\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields length:', (_fieldOrderData$compa2 = fieldOrderData.companyFields) === null || _fieldOrderData$compa2 === void 0 ? void 0 : _fieldOrderData$compa2.length);\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields is array:', Array.isArray(fieldOrderData.companyFields));\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields IDs:', (_fieldOrderData$compa3 = fieldOrderData.companyFields) === null || _fieldOrderData$compa3 === void 0 ? void 0 : _fieldOrderData$compa3.map(f => f.id));\n\n  // Ensure field order data is always available and valid\n  if (!Array.isArray(fieldOrderData.companyFields) || fieldOrderData.companyFields.length === 0) {\n    console.warn('⚠️ WARNING: companyFields is not available or empty, this may cause field order issues');\n  }\n\n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n\n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [staticId, `company-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [staticId, `po-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [staticId, `vendor-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [staticId, `ship-to-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalsFieldValue = (staticId, defaultValue = '') => {\n    if (data.totalsFields && Array.isArray(data.totalsFields)) {\n      const possibleIds = [staticId, `totals-field-${staticId}`, `${staticId}-${Date.now()}`, ...data.totalsFields.filter(f => f.id.includes(staticId)).map(f => f.id)];\n      return getDynamicFieldValue(data.totalsFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // ============================================================================\n  // MODULAR XML BUILDER FUNCTIONS\n  // ============================================================================\n\n  // Build Company Information XML with dynamic field ordering (same pattern as section swapping)y\n\n  const buildCompanyXML = (position = 'left') => {\n    var _data$fieldOrder, _data$sectionOrder;\n    // Get company fields from fieldOrderData to preserve drag-and-drop order\n    const companyFields = fieldOrderData.companyFields || [];\n\n    // CRITICAL: Get field order from data (same pattern as section order)\n    const fieldOrder = ((_data$fieldOrder = data.fieldOrder) === null || _data$fieldOrder === void 0 ? void 0 : _data$fieldOrder.company) || companyFields.map(f => f.id);\n    console.log('🔀 Building company XML with dynamic field ordering');\n    console.log('🔀 Company fields received from data:', companyFields.length);\n    console.log('🔀 Company fields IDs in current order:', companyFields.map(f => f.id));\n    console.log('🔀 Company fields labels in current order:', companyFields.map(f => f.label));\n    console.log('🔀 Company fields values in current order:', companyFields.map(f => f.value));\n    console.log('🔀 Field order from data:', fieldOrder);\n\n    // CRITICAL: Ensure field order is completely independent of section order\n    // The field order should be preserved exactly as it appears in fieldOrderData.companyFields\n    // regardless of whether this section is on the left or right\n    console.log('🔍 DEBUG: Field order independence verification:');\n    console.log('🔍 DEBUG: - Current section order:', (_data$sectionOrder = data.sectionOrder) === null || _data$sectionOrder === void 0 ? void 0 : _data$sectionOrder.sections1And2);\n    console.log('🔍 DEBUG: - Company fields order (should be independent):', companyFields.map(f => ({\n      id: f.id,\n      label: f.label,\n      position: companyFields.indexOf(f)\n    })));\n\n    // CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\n    const orderedCompanyFields = fieldOrder.map(fieldId => {\n      const field = companyFields.find(f => f.id === fieldId);\n      if (!field) {\n        console.warn(`⚠️ WARNING: Field with ID ${fieldId} not found in companyFields`);\n        return null;\n      }\n      return field;\n    }).filter(Boolean); // Remove any null fields\n\n    console.log('🔀 Ordered company fields for XML generation:', orderedCompanyFields.map(f => ({\n      id: f.id,\n      label: f.label,\n      position: orderedCompanyFields.indexOf(f)\n    })));\n\n    // Build rows dynamically based on ordered field order (same as section swapping)\n    const fieldRows = orderedCompanyFields.map((field, index) => {\n      const fieldValue = field.value || field.placeholder || '';\n      const isHeader = field.id === 'company-name';\n      console.log(`🔀 Processing field ${index}:`, {\n        id: field.id,\n        label: field.label,\n        value: fieldValue,\n        isHeader,\n        position: index\n      });\n      if (isHeader) {\n        const row = `<tr><td class=\"header-company\" style=\"text-align: left;\" data-field=\"${field.id}\">${fieldValue}</td></tr>`;\n        console.log(`🔀 Generated header row for ${field.id}:`, row);\n        return row;\n      } else {\n        // Handle special formatting for phone, fax, website\n        let displayText = fieldValue;\n        if (field.id === 'company-phone') displayText = `Phone: ${fieldValue}`;\n        if (field.id === 'company-fax') displayText = `Fax: ${fieldValue}`;\n        if (field.id === 'company-website') displayText = `Website: ${fieldValue}`;\n        const row = `<tr><td style=\"text-align: left;\" data-field=\"${field.id}\">${displayText}</td></tr>`;\n        console.log(`🔀 Generated regular row for ${field.id}:`, row);\n        return row;\n      }\n    }).join('');\n    console.log('🔀 Final generated fieldRows:', fieldRows);\n\n    // Side-aware padding to keep spacing consistent when swapped\n    const companyTdPadding = position === 'left' ? 'padding-right: 24px;' : 'padding-left: 36px;';\n    const result = `\n      <td style=\"width: 65%; ${companyTdPadding}\" data-section=\"company-info\">\n        <table>\n          ${fieldRows}\n        </table>\n      </td>\n    `;\n    console.log('🔀 Final company XML result:', result);\n    return result;\n  };\n\n  // Build Purchase Order Information XML\n  const buildPurchaseOrderXML = (position = 'right') => {\n    var _data$fieldOrder2;\n    // Get purchase order fields from fieldOrderData to preserve drag-and-drop order\n    const purchaseOrderFields = fieldOrderData.purchaseOrderFields || [];\n\n    // CRITICAL: Get field order from data (same pattern as section order)\n    const fieldOrder = ((_data$fieldOrder2 = data.fieldOrder) === null || _data$fieldOrder2 === void 0 ? void 0 : _data$fieldOrder2.purchaseOrder) || purchaseOrderFields.map(f => f.id);\n    console.log('🔀 Building purchase order XML with dynamic field ordering');\n    console.log('🔀 Purchase order fields received from data:', purchaseOrderFields.length);\n    console.log('🔀 Purchase order fields IDs in current order:', purchaseOrderFields.map(f => f.id));\n    console.log('🔀 Field order from data:', fieldOrder);\n\n    // CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\n    const orderedPOFields = fieldOrder.map(fieldId => {\n      const field = purchaseOrderFields.find(f => f.id === fieldId);\n      if (!field) {\n        console.warn(`⚠️ WARNING: Field with ID ${fieldId} not found in purchaseOrderFields`);\n        return null;\n      }\n      return field;\n    }).filter(Boolean); // Remove any null fields\n\n    console.log('🔀 Ordered purchase order fields for XML generation:', orderedPOFields.map(f => ({\n      id: f.id,\n      label: f.label,\n      position: orderedPOFields.indexOf(f)\n    })));\n\n    // Build XML based on ordered fields\n    const fieldRows = orderedPOFields.map((field, index) => {\n      // Prefer captured value; fallback to template getters to ensure content always present\n      const isTitle = field.id === 'po-title';\n      if (isTitle) {\n        const value = field.value || getPOFieldValue('po-title', 'PURCHASE ORDER');\n        return `<tr><td class=\"header-title\" style=\"text-align: right;\" data-field=\"${field.id}\">${value}</td></tr>`;\n      }\n      if (field.id === 'po-date') {\n        const value = field.value || getPOFieldValue('po-date', 'MM/DD/YYYY');\n        return `<tr><td style=\"text-align: right;\"><table style=\"width: 100%;\"><tr><td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td><td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${value}</td></tr></table></td></tr>`;\n      }\n      if (field.id === 'po-number') {\n        const value = field.value || getPOFieldValue('po-number', '[PO Number]');\n        return `<tr><td style=\"text-align: right;\"><table style=\"width: 100%;\"><tr><td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td><td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${value}</td></tr></table></td></tr>`;\n      }\n      const genericValue = field.value || getPOFieldValue(field.id, '');\n      return `<tr><td style=\"text-align: right;\" data-field=\"${field.id}\">${genericValue}</td></tr>`;\n    }).join('');\n\n    // Side-aware padding: when PO is on the left, push it away from the right column\n    const poTdPadding = position === 'left' ? 'padding-right: 56px;' : 'padding-left: 28px;';\n    return `\n      <td style=\"width: 35%; ${poTdPadding}\" align=\"right\" data-section=\"purchase-order-info\">\n        <table>\n          ${fieldRows}\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor-ShipTo Section XML with dynamic ordering\n  const buildVendorShipToSectionXML = () => {\n    var _data$sectionOrder2, _data$sectionOrder3;\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = ((_data$sectionOrder2 = data.sectionOrder) === null || _data$sectionOrder2 === void 0 ? void 0 : _data$sectionOrder2.sections3And4) || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building vendor-shipTo section with order:', {\n      leftSection,\n      rightSection\n    });\n    console.log('🔀 sections3And4 array:', (_data$sectionOrder3 = data.sectionOrder) === null || _data$sectionOrder3 === void 0 ? void 0 : _data$sectionOrder3.sections3And4);\n    let leftColumn, rightColumn;\n    if (leftSection === 'section3') {\n      // Default order: Vendor left, Ship To right\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n      console.log('🔀 Using default order: Vendor left, Ship To right');\n    } else {\n      // Swapped order: Ship To left, Vendor right\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n      console.log('🔀 Using swapped order: Ship To left, Vendor right');\n    }\n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\n  const buildShippingDetailsXML = () => {\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n          <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n          <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n          <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n          <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n          <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n          <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\n  const buildVendorShipToAndShippingDetailsXML = () => {\n    var _data$sectionOrder4, _data$sectionOrder5;\n    // Get section order from data, default to [sections3And4, sections5And6] if not provided\n    const sectionOrder = ((_data$sectionOrder4 = data.sectionOrder) === null || _data$sectionOrder4 === void 0 ? void 0 : _data$sectionOrder4.sections3And4And5And6) || ['sections3And4', 'sections5And6'];\n    const topSection = sectionOrder[0];\n    const bottomSection = sectionOrder[1];\n    console.log('🔀 Building vendor-shipTo + shipping details with order:', {\n      topSection,\n      bottomSection\n    });\n    console.log('🔀 sections3And4And5And6 array:', (_data$sectionOrder5 = data.sectionOrder) === null || _data$sectionOrder5 === void 0 ? void 0 : _data$sectionOrder5.sections3And4And5And6);\n    let topContent, bottomContent;\n    if (topSection === 'sections3And4') {\n      // Default order: Vendor-ShipTo on top, Shipping Details below\n      topContent = buildVendorShipToSectionXML();\n      bottomContent = buildShippingDetailsXML();\n      console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');\n    } else {\n      // Swapped order: Shipping Details on top, Vendor-ShipTo below\n      topContent = buildShippingDetailsXML();\n      bottomContent = buildVendorShipToSectionXML();\n      console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');\n    }\n    return `\n      ${topContent}\n      ${bottomContent}\n    `;\n  };\n\n  // Build Header Section XML (Company + Purchase Order) with dynamic ordering\n  const buildHeaderSectionXML = () => {\n    var _data$sectionOrder6, _data$sectionOrder7, _data$sectionOrder8, _data$sectionOrder9, _data$sectionOrder9$s, _data$sectionOrder0, _fieldOrderData$compa4, _fieldOrderData$purch2;\n    // Get section order from data, default to [section1, section2] if not provided\n    const sectionOrder = ((_data$sectionOrder6 = data.sectionOrder) === null || _data$sectionOrder6 === void 0 ? void 0 : _data$sectionOrder6.sections1And2) || ['section1', 'section2'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building header section with order:', {\n      leftSection,\n      rightSection\n    });\n    console.log('🔀 Full sectionOrder data:', data.sectionOrder);\n    console.log('🔀 Full data object keys:', Object.keys(data));\n    console.log('🔀 sections1And2 array:', (_data$sectionOrder7 = data.sectionOrder) === null || _data$sectionOrder7 === void 0 ? void 0 : _data$sectionOrder7.sections1And2);\n    console.log('🔀 sections1And2 type:', typeof ((_data$sectionOrder8 = data.sectionOrder) === null || _data$sectionOrder8 === void 0 ? void 0 : _data$sectionOrder8.sections1And2));\n    console.log('🔀 sections1And2 length:', (_data$sectionOrder9 = data.sectionOrder) === null || _data$sectionOrder9 === void 0 ? void 0 : (_data$sectionOrder9$s = _data$sectionOrder9.sections1And2) === null || _data$sectionOrder9$s === void 0 ? void 0 : _data$sectionOrder9$s.length);\n    console.log('🔀 sections1And2 values:', JSON.stringify((_data$sectionOrder0 = data.sectionOrder) === null || _data$sectionOrder0 === void 0 ? void 0 : _data$sectionOrder0.sections1And2));\n\n    // DEBUG: Check field order data when building header\n    console.log('🔍 DEBUG: fieldOrderData.companyFields when building header:', (_fieldOrderData$compa4 = fieldOrderData.companyFields) === null || _fieldOrderData$compa4 === void 0 ? void 0 : _fieldOrderData$compa4.map(f => ({\n      id: f.id,\n      label: f.label\n    })));\n    console.log('🔍 DEBUG: fieldOrderData.purchaseOrderFields when building header:', (_fieldOrderData$purch2 = fieldOrderData.purchaseOrderFields) === null || _fieldOrderData$purch2 === void 0 ? void 0 : _fieldOrderData$purch2.map(f => ({\n      id: f.id,\n      label: f.label\n    })));\n\n    // IMPORTANT: Field order should be completely independent of section order\n    // Always use the current field order from fieldOrderData, regardless of section position\n    console.log('🔍 DEBUG: Ensuring field order independence from section order');\n    let leftColumn, rightColumn;\n    if (leftSection === 'section1') {\n      // Company on left, Purchase Order on right\n      leftColumn = buildCompanyXML('left');\n      rightColumn = buildPurchaseOrderXML('right');\n      console.log('🔀 Using default order: Company left, Purchase Order right');\n    } else {\n      // Purchase Order on left, Company on right (sections swapped)\n      leftColumn = buildPurchaseOrderXML('left');\n      rightColumn = buildCompanyXML('right');\n      console.log('🔀 Using swapped order: Purchase Order left, Company right');\n    }\n\n    // DEBUG: Verify that field order is preserved regardless of section position\n    console.log('🔍 DEBUG: Field order verification - Company fields should maintain custom order');\n    console.log('🔍 DEBUG: Final company XML will use fieldOrderData.companyFields order');\n    return `\n      <table>\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor Information XML\n  const buildVendorXML = () => {\n    var _data$fieldOrder3;\n    // Get field order for vendor; fallback to current array order if not provided\n    const vendorFields = fieldOrderData.vendorFields || [];\n    const vendorFieldOrder = ((_data$fieldOrder3 = data.fieldOrder) === null || _data$fieldOrder3 === void 0 ? void 0 : _data$fieldOrder3.vendor) || vendorFields.map(f => f.id);\n    const orderedVendorFields = vendorFieldOrder.map(fieldId => vendorFields.find(f => f.id === fieldId)).filter(Boolean);\n    const rows = orderedVendorFields.map(f => {\n      let value = f.value || getVendorFieldValue(f.id, '');\n      let prefix = '';\n      if (f.id === 'vendor-phone') prefix = 'Phone: ';\n      if (f.id === 'vendor-fax') prefix = 'Fax: ';\n      return `${prefix}<span data-field=\"${f.id}\">${value}</span>`;\n    }).join('<br/>');\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"vendor\">\n        <table>\n          <tr>\n            <td class=\"section-header\">VENDOR</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">${rows}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Ship To Information XML\n  const buildShipToXML = () => {\n    var _data$fieldOrder4;\n    // Get field order for ship-to; fallback to current array order if not provided\n    const shipToFields = fieldOrderData.shipToFields || [];\n    const shipToFieldOrder = ((_data$fieldOrder4 = data.fieldOrder) === null || _data$fieldOrder4 === void 0 ? void 0 : _data$fieldOrder4.shipTo) || shipToFields.map(f => f.id);\n    const orderedShipToFields = shipToFieldOrder.map(fieldId => shipToFields.find(f => f.id === fieldId)).filter(Boolean);\n    const rows = orderedShipToFields.map(f => {\n      let value = f.value || getShipToFieldValue(f.id, '');\n      let prefix = '';\n      if (f.id === 'ship-to-phone') prefix = 'Phone: ';\n      if (f.id === 'ship-to-fax') prefix = 'Fax: ';\n      return `${prefix}<span data-field=\"${f.id}\">${value}</span>`;\n    }).join('<br/>');\n    return `\n      <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n        <table>\n          <tr>\n            <td class=\"section-header\">SHIP TO</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">${rows}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor/Ship-To Section XML with dynamic ordering\n  const buildVendorShipToXML = () => {\n    var _data$sectionOrder1;\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = ((_data$sectionOrder1 = data.sectionOrder) === null || _data$sectionOrder1 === void 0 ? void 0 : _data$sectionOrder1.sections3And4) || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building vendor/ship-to section with order:', {\n      leftSection,\n      rightSection\n    });\n    let leftColumn, rightColumn;\n    if (leftSection === 'section3') {\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n    } else {\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n    }\n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Line Items XML with dynamic column ordering\n  const buildLineItemsXML = () => {\n    var _data$sectionOrder10, _data$sectionOrder11;\n    // Get column order from data, default to standard order if not provided\n    const columnOrder = ((_data$sectionOrder10 = data.sectionOrder) === null || _data$sectionOrder10 === void 0 ? void 0 : _data$sectionOrder10.lineItemColumns) || ['itemNumber', 'description', 'qty', 'rate', 'amount'];\n    console.log('🔀 Building line items with column order:', columnOrder);\n    console.log('🔀 Line items data:', data.lineItems);\n    console.log('🔀 Column order from state:', (_data$sectionOrder11 = data.sectionOrder) === null || _data$sectionOrder11 === void 0 ? void 0 : _data$sectionOrder11.lineItemColumns);\n\n    // Column configuration mapping\n    const columnConfig = {\n      itemNumber: {\n        label: 'Item#',\n        colSpan: 3,\n        field: 'itemNumber'\n      },\n      description: {\n        label: 'Description',\n        colSpan: 12,\n        field: 'description'\n      },\n      qty: {\n        label: 'Qty',\n        colSpan: 2,\n        field: 'qty'\n      },\n      rate: {\n        label: 'Rate',\n        colSpan: 3,\n        field: 'rate'\n      },\n      amount: {\n        label: 'Amount',\n        colSpan: 3,\n        field: 'amount'\n      }\n    };\n\n    // Build header row\n    const headerRow = columnOrder.map(columnId => {\n      const config = columnConfig[columnId];\n      return `<td class=\"item-header\" colSpan=\"${config.colSpan}\">${config.label}</td>`;\n    }).join('');\n\n    // Build data rows using actual line item data\n    const lineItems = data.lineItems || [];\n    const dataRows = Array(5).fill(0).map((_, rowIndex) => {\n      const rowData = lineItems[rowIndex] || {};\n      const rowCells = columnOrder.map(columnId => {\n        const config = columnConfig[columnId];\n        const fieldValue = rowData[columnId] || '-';\n        return `<td colSpan=\"${config.colSpan}\">${fieldValue}</td>`;\n      }).join('');\n      return `<tr data-row-id=\"line-item-${rowIndex}\" data-row-index=\"${rowIndex}\">${rowCells}</tr>`;\n    }).join('');\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n          ${headerRow}\n        </tr>\n        ${dataRows}\n      </table>\n    `;\n  };\n\n  // Build Comments Section XML\n  const buildCommentsXML = () => {\n    const comments = getFieldValue('comments', '[Enter comments or special instructions...]');\n    return `\n      <td style=\"width: 50%;\" data-section=\"comments\">\n        <table>\n          <tr>\n            <td class=\"comments-header\">Comments or Special Instructions</td>\n          </tr>\n          <tr>\n            <td class=\"comments-content\">${comments}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Totals Section XML\n  const buildTotalsXML = () => {\n    const subtotal = getTotalsFieldValue('subtotal', '$0.00');\n    const tax = getTotalsFieldValue('tax', '$0.00');\n    const shipping = getTotalsFieldValue('shipping', '$0.00');\n    const other = getTotalsFieldValue('other', '$0.00');\n    const total = getTotalsFieldValue('total', '$0.00');\n    return `\n      <td style=\"width: 50%;\" data-section=\"totals\">\n        <table>\n          <tr>\n            <td class=\"section-header\">Totals</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <div>SUBTOTAL: ${subtotal}</div>\n              <div>TAX: ${tax}</div>\n              <div>SHIPPING: ${shipping}</div>\n              <div>OTHER: ${other}</div>\n              <div class=\"total-final\">TOTAL: ${total}</div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Comments and Totals Section XML with dynamic ordering\n  const buildCommentsTotalsXML = () => {\n    var _data$sectionOrder12;\n    // Get section order from data, default to [section8, section9] if not provided\n    const sectionOrder = ((_data$sectionOrder12 = data.sectionOrder) === null || _data$sectionOrder12 === void 0 ? void 0 : _data$sectionOrder12.sections8And9) || ['section8', 'section9'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    console.log('🔀 Building comments/totals section with order:', {\n      leftSection,\n      rightSection\n    });\n    let leftColumn, rightColumn;\n    if (leftSection === 'section8') {\n      leftColumn = buildCommentsXML();\n      rightColumn = buildTotalsXML();\n    } else {\n      leftColumn = buildTotalsXML();\n      rightColumn = buildCommentsXML();\n    }\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [`.shipping-field-${fieldType} .editable-field`, `.shipping-field[data-field=\"${fieldType}\"] .editable-field`, `.shipping-${fieldType} .editable-field`, `#shipping-${fieldType}`, `[data-shipping-field=\"${fieldType}\"]`];\n\n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    // Map template field names to live table data-column ids\n    const colIdMap = {\n      quantity: 'qty',\n      unitPrice: 'rate',\n      total: 'amount'\n    };\n    const colId = colIdMap[fieldType] || fieldType; // itemNumber, description pass through\n\n    const possibleSelectors = [`#line-item-${rowIndex}-${fieldType}`, `.line-item-row[data-row=\"${rowIndex}\"] .${colId}-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${colId}-field .editable-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-column=\"${colId}\"] .editable-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`];\n\n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n\n    // Try DOM selectors with debugging\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      const text = element ? element.textContent.trim() : '';\n      try {\n        console.debug('🔎 XML getLineItemValue', {\n          rowIndex,\n          fieldType,\n          colId,\n          selector,\n          found: !!element,\n          text\n        });\n      } catch {}\n      if (text) return text;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = fieldType => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [`#total-${fieldType}`, `.total-${fieldType} .editable-field`, `.total-row[data-field=\"${fieldType}\"] .editable-field`, `.totals-section .${fieldType}-field .editable-field`,\n    // Subtotal and total are displayed as calculated spans\n    `.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`, `.totals-section .total-row[data-field=\"total\"] .total-field`];\n\n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n\n    // Try DOM selectors with debugging\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      const text = element ? element.textContent.trim() : '';\n      try {\n        console.debug('🔎 XML getTotalFieldValue', {\n          fieldType,\n          selector,\n          found: !!element,\n          text\n        });\n      } catch {}\n      if (text) return text;\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = ['#comments-field', '.comments-content .editable-field', '.comments-section .editable-field', '[data-field=\"comments\"]'];\n\n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = ['#contact-info-field', '.contact-section .editable-field', '.contact-info .editable-field', '[data-field=\"contactInfo\"]'];\n\n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n\n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n\n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    ${buildHeaderSectionXML()}\n    ${buildVendorShipToAndShippingDetailsXML()}\n\n\n    ${buildLineItemsXML()}\n\n\n    ${buildCommentsTotalsXML()}\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n  console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');\n  console.log('📄 XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    staticFields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website'],\n    dynamicPrefixes: ['company-field-', 'company-'],\n    dataAttribute: 'data-section=\"company-info\"'\n  },\n  purchaseOrder: {\n    staticFields: ['po-title', 'po-date', 'po-number'],\n    dynamicPrefixes: ['po-field-', 'po-'],\n    dataAttribute: 'data-section=\"purchase-order-info\"'\n  },\n  vendor: {\n    staticFields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax'],\n    dynamicPrefixes: ['vendor-field-', 'vendor-'],\n    dataAttribute: 'data-subsection=\"vendor\"'\n  },\n  shipTo: {\n    staticFields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone', 'ship-to-fax'],\n    dynamicPrefixes: ['ship-to-field-', 'ship-to-'],\n    dataAttribute: 'data-subsection=\"ship-to\"'\n  },\n  shipping: {\n    staticFields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms'],\n    dynamicPrefixes: ['shipping-field-', 'shipping-'],\n    dataAttribute: 'data-section=\"shipping-details\"'\n  },\n  lineItems: {\n    staticFields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total'],\n    dynamicPrefixes: ['line-item-', 'item-'],\n    dataAttribute: 'data-section=\"line-items\"',\n    maxRows: 5\n  },\n  totals: {\n    staticFields: ['subtotal', 'tax', 'shipping', 'other', 'total'],\n    dynamicPrefixes: ['total-', 'totals-'],\n    dataAttribute: 'data-subsection=\"totals\"'\n  },\n  comments: {\n    staticFields: ['comments'],\n    dynamicPrefixes: ['comments-field-', 'comment-'],\n    dataAttribute: 'data-subsection=\"comments\"'\n  },\n  contact: {\n    staticFields: ['contactInfo'],\n    dynamicPrefixes: ['contact-info-field-', 'contact-'],\n    dataAttribute: 'data-section=\"contact-signature\"'\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n\n// Dynamic ID Generation Utilities\nexport const dynamicIdUtils = {\n  // Generate a new dynamic ID with timestamp and random component\n  generateId: (prefix = 'field', section = 'general') => {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${section}-${prefix}-${timestamp}-${random}`;\n  },\n  // Generate multiple possible IDs for a field to try when looking up values\n  getPossibleIds: (staticId, section = 'unknown') => {\n    const baseName = staticId.replace(/^(company-|po-|vendor-|ship-to-)/, '');\n    return [staticId,\n    // Try static ID first\n    `${section}-field-${staticId}`, `${section}-${baseName}`, `${staticId}-${Date.now()}`, `field-${baseName}`, baseName];\n  },\n  // Validate if an ID follows our dynamic ID pattern\n  isValidDynamicId: id => {\n    const dynamicPattern = /^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;\n    return dynamicPattern.test(id);\n  },\n  // Extract the base field type from any ID (static or dynamic)\n  getFieldType: id => {\n    // Remove common prefixes and suffixes to get the core field type\n    return id.replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/, '').replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/, '').replace(/^(field-)?/, '');\n  },\n  // Get section from ID\n  getSection: id => {\n    if (id.startsWith('company-')) return 'company';\n    if (id.startsWith('po-')) return 'purchase-order';\n    if (id.startsWith('vendor-')) return 'vendor';\n    if (id.startsWith('ship-to-')) return 'ship-to';\n    if (id.startsWith('shipping-')) return 'shipping';\n    if (id.startsWith('line-item-')) return 'line-items';\n    if (id.startsWith('total-')) return 'totals';\n    if (id.startsWith('comments-')) return 'comments';\n    if (id.startsWith('contact-')) return 'contact';\n    return 'unknown';\n  }\n};\n\n// Field Mapping Utilities\nexport const fieldMappingUtils = {\n  // Map all known static field IDs to their readable names\n  staticFieldNames: {\n    // Company fields\n    'company-name': 'Company Name',\n    'company-address': 'Street Address',\n    'company-city-state': 'City, State, ZIP',\n    'company-phone': 'Phone Number',\n    'company-fax': 'Fax Number',\n    'company-website': 'Website',\n    // Purchase Order fields\n    'po-title': 'Purchase Order Title',\n    'po-date': 'Date',\n    'po-number': 'PO Number',\n    // Vendor fields\n    'vendor-company': 'Vendor Company',\n    'vendor-contact': 'Vendor Contact',\n    'vendor-address': 'Vendor Address',\n    'vendor-city-state': 'Vendor City/State',\n    'vendor-phone': 'Vendor Phone',\n    'vendor-fax': 'Vendor Fax',\n    // Ship To fields\n    'ship-to-name': 'Ship To Name',\n    'ship-to-company': 'Ship To Company',\n    'ship-to-address': 'Ship To Address',\n    'ship-to-city-state': 'Ship To City/State',\n    'ship-to-phone': 'Ship To Phone',\n    'ship-to-fax': 'Ship To Fax',\n    // Shipping fields\n    'requisitioner': 'Requisitioner',\n    'shipVia': 'Ship Via',\n    'fob': 'F.O.B.',\n    'shippingTerms': 'Shipping Terms',\n    // Line item fields\n    'itemNumber': 'Item Number',\n    'description': 'Description',\n    'quantity': 'Quantity',\n    'unitPrice': 'Unit Price',\n    'total': 'Total',\n    // Totals fields\n    'subtotal': 'Subtotal',\n    'tax': 'Tax',\n    'shipping': 'Shipping',\n    'other': 'Other',\n    // Other fields\n    'comments': 'Comments',\n    'contactInfo': 'Contact Information'\n  },\n  // Get human-readable name for any field ID\n  getFieldName: id => {\n    const staticName = fieldMappingUtils.staticFieldNames[id];\n    if (staticName) return staticName;\n\n    // For dynamic IDs, try to extract the base field type\n    const fieldType = dynamicIdUtils.getFieldType(id);\n    const staticFieldName = fieldMappingUtils.staticFieldNames[fieldType];\n    if (staticFieldName) return staticFieldName;\n\n    // Fallback: humanize the ID\n    return id.replace(/[-_]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  },\n  // Get all field IDs for a section\n  getFieldsForSection: section => {\n    const template = purchaseOrderTemplate[section];\n    return template ? template.staticFields : [];\n  }\n};","map":{"version":3,"names":["processFormData","generatePurchaseOrderXML","formData","options","_fieldOrderData$compa","_fieldOrderData$purch","_formData$companyFiel","_data$companyFields","_fieldOrderData$compa2","_fieldOrderData$compa3","console","log","Date","toISOString","processedData","calculateTotals","validate","formatForXML","throwOnValidationError","error","data","Array","isArray","lineItems","map","row","_ref","_row$quantity","_ref2","_row$unitPrice","_ref3","_row$total","_row$qty","_row$rate","_row$amount","_row$quantity2","_row$unitPrice2","_row$total2","quantity","qty","unitPrice","rate","total","amount","String","Number","replace","fieldOrderData","companyFields","purchaseOrderFields","vendorFields","shipToFields","f","id","label","length","warn","getFieldValue","fieldName","defaultValue","getDynamicFieldValue","fieldArray","possibleIds","fieldId","field","find","value","getCompanyFieldValue","staticId","now","filter","includes","getPOFieldValue","getVendorFieldValue","getShipToFieldValue","getTotalsFieldValue","totalsFields","buildCompanyXML","position","_data$fieldOrder","_data$sectionOrder","fieldOrder","company","sectionOrder","sections1And2","indexOf","orderedCompanyFields","Boolean","fieldRows","index","fieldValue","placeholder","isHeader","displayText","join","companyTdPadding","result","buildPurchaseOrderXML","_data$fieldOrder2","purchaseOrder","orderedPOFields","isTitle","genericValue","poTdPadding","buildVendorShipToSectionXML","_data$sectionOrder2","_data$sectionOrder3","sections3And4","leftSection","rightSection","leftColumn","rightColumn","buildVendorXML","buildShipToXML","buildShippingDetailsXML","getShippingFieldValue","buildVendorShipToAndShippingDetailsXML","_data$sectionOrder4","_data$sectionOrder5","sections3And4And5And6","topSection","bottomSection","topContent","bottomContent","buildHeaderSectionXML","_data$sectionOrder6","_data$sectionOrder7","_data$sectionOrder8","_data$sectionOrder9","_data$sectionOrder9$s","_data$sectionOrder0","_fieldOrderData$compa4","_fieldOrderData$purch2","Object","keys","JSON","stringify","_data$fieldOrder3","vendorFieldOrder","vendor","orderedVendorFields","rows","prefix","_data$fieldOrder4","shipToFieldOrder","shipTo","orderedShipToFields","buildVendorShipToXML","_data$sectionOrder1","buildLineItemsXML","_data$sectionOrder10","_data$sectionOrder11","columnOrder","lineItemColumns","columnConfig","itemNumber","colSpan","description","headerRow","columnId","config","dataRows","fill","_","rowIndex","rowData","rowCells","buildCommentsXML","comments","buildTotalsXML","subtotal","tax","shipping","other","buildCommentsTotalsXML","_data$sectionOrder12","sections8And9","fieldType","possibleSelectors","selector","element","document","querySelector","textContent","trim","getLineItemValue","colIdMap","colId","getColumnIndex","text","debug","found","columnMap","getTotalFieldValue","getCommentsValue","getContactInfoValue","contactInfo","generateLineItemsXML","maxRows","xml","substring","purchaseOrderTemplate","companyInfo","staticFields","dynamicPrefixes","dataAttribute","totals","contact","getTemplateStructure","dynamicIdUtils","generateId","section","timestamp","random","Math","toString","substr","getPossibleIds","baseName","isValidDynamicId","dynamicPattern","test","getFieldType","getSection","startsWith","fieldMappingUtils","staticFieldNames","getFieldName","staticName","staticFieldName","l","toUpperCase","getFieldsForSection","template"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/PurchaseOrderTemplate.js"],"sourcesContent":["// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\nimport { processFormData } from './FormDataMapper';\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData, options = {}) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('📅 Template updated at:', new Date().toISOString());\n  console.log('📊 Raw form data received:', formData);\n  \n  // Process and validate form data using the FormDataMapper\n  let processedData;\n  try {\n    processedData = processFormData(formData, {\n      calculateTotals: options.calculateTotals !== false,\n      validate: options.validate !== false,\n      formatForXML: true,\n      throwOnValidationError: options.throwOnValidationError || false\n    });\n    console.log('📊 Processed form data:', processedData);\n  } catch (error) {\n    console.error('❌ Form data processing failed:', error);\n    if (options.throwOnValidationError) {\n      throw error;\n    }\n    // Fallback to using raw data\n    processedData = formData || {};\n  }\n  \n  // Merge processed data with original so ad-hoc fields (totals, shipping, UI line item keys) survive\n  // Prefer original ad-hoc keys when present (they reflect the live DOM at export time)\n  const data = {\n    ...(processedData || {}),\n    ...(formData || {})\n  };\n\n  // Normalize line items to expose both key styles expected by template rendering\n  if (Array.isArray(data.lineItems)) {\n    data.lineItems = data.lineItems.map((row) => {\n      const quantity = row.quantity ?? row.qty ?? '';\n      const unitPrice = row.unitPrice ?? row.rate ?? '';\n      const total = row.total ?? row.amount ?? '';\n      return {\n        ...row,\n        qty: row.qty ?? (quantity !== '' ? String(quantity) : ''),\n        rate: row.rate ?? (unitPrice !== '' ? String(unitPrice) : ''),\n        amount: row.amount ?? (total !== '' ? String(total) : ''),\n        quantity: row.quantity ?? (quantity !== '' ? Number(String(quantity).replace(/[$,]/g, '')) : 0),\n        unitPrice: row.unitPrice ?? (unitPrice !== '' ? Number(String(unitPrice).replace(/[$,]/g, '')) : 0),\n        total: row.total ?? (total !== '' ? Number(String(total).replace(/[$,]/g, '')) : 0)\n      };\n    });\n  }\n  \n  // IMPORTANT: For field ordering, use the original formData to preserve drag-and-drop order\n  const fieldOrderData = {\n    ...data,\n    companyFields: formData.companyFields || data.companyFields || [],\n    purchaseOrderFields: formData.purchaseOrderFields || data.purchaseOrderFields || [],\n    vendorFields: formData.vendorFields || data.vendorFields || [],\n    shipToFields: formData.shipToFields || data.shipToFields || []\n  };\n  \n  // DEBUG: Log field order data creation\n  console.log('🔍 DEBUG: fieldOrderData created with:');\n  console.log('🔍 DEBUG: - companyFields:', fieldOrderData.companyFields?.map(f => ({ id: f.id, label: f.label })));\n  console.log('🔍 DEBUG: - purchaseOrderFields:', fieldOrderData.purchaseOrderFields?.map(f => ({ id: f.id, label: f.label })));\n  console.log('🔍 DEBUG: - formData.companyFields:', formData.companyFields?.map(f => ({ id: f.id, label: f.label })));\n  console.log('🔍 DEBUG: - data.companyFields:', data.companyFields?.map(f => ({ id: f.id, label: f.label })));\n  \n  // VALIDATION: Ensure field order data is robust and independent of section order\n  console.log('🔍 DEBUG: Field order data validation:');\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields length:', fieldOrderData.companyFields?.length);\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields is array:', Array.isArray(fieldOrderData.companyFields));\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields IDs:', fieldOrderData.companyFields?.map(f => f.id));\n  \n  // Ensure field order data is always available and valid\n  if (!Array.isArray(fieldOrderData.companyFields) || fieldOrderData.companyFields.length === 0) {\n    console.warn('⚠️ WARNING: companyFields is not available or empty, this may cause field order issues');\n  }\n  \n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n    \n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [\n        staticId,\n        `company-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [\n        staticId,\n        `po-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [\n        staticId,\n        `vendor-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [\n        staticId,\n        `ship-to-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalsFieldValue = (staticId, defaultValue = '') => {\n    if (data.totalsFields && Array.isArray(data.totalsFields)) {\n      const possibleIds = [\n        staticId,\n        `totals-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.totalsFields.filter(f => f.id.includes(staticId)).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.totalsFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // ============================================================================\n  // MODULAR XML BUILDER FUNCTIONS\n  // ============================================================================\n  \n  // Build Company Information XML with dynamic field ordering (same pattern as section swapping)y\n  \n  const buildCompanyXML = (position = 'left') => {\n    // Get company fields from fieldOrderData to preserve drag-and-drop order\n    const companyFields = fieldOrderData.companyFields || [];\n    \n    // CRITICAL: Get field order from data (same pattern as section order)\n    const fieldOrder = data.fieldOrder?.company || companyFields.map(f => f.id);\n    \n    console.log('🔀 Building company XML with dynamic field ordering');\n    console.log('🔀 Company fields received from data:', companyFields.length);\n    console.log('🔀 Company fields IDs in current order:', companyFields.map(f => f.id));\n    console.log('🔀 Company fields labels in current order:', companyFields.map(f => f.label));\n    console.log('🔀 Company fields values in current order:', companyFields.map(f => f.value));\n    console.log('🔀 Field order from data:', fieldOrder);\n    \n    // CRITICAL: Ensure field order is completely independent of section order\n    // The field order should be preserved exactly as it appears in fieldOrderData.companyFields\n    // regardless of whether this section is on the left or right\n    console.log('🔍 DEBUG: Field order independence verification:');\n    console.log('🔍 DEBUG: - Current section order:', data.sectionOrder?.sections1And2);\n    console.log('🔍 DEBUG: - Company fields order (should be independent):', companyFields.map(f => ({ id: f.id, label: f.label, position: companyFields.indexOf(f) })));\n    \n    // CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\n    const orderedCompanyFields = fieldOrder.map(fieldId => {\n      const field = companyFields.find(f => f.id === fieldId);\n      if (!field) {\n        console.warn(`⚠️ WARNING: Field with ID ${fieldId} not found in companyFields`);\n        return null;\n      }\n      return field;\n    }).filter(Boolean); // Remove any null fields\n    \n    console.log('🔀 Ordered company fields for XML generation:', orderedCompanyFields.map(f => ({ id: f.id, label: f.label, position: orderedCompanyFields.indexOf(f) })));\n    \n    // Build rows dynamically based on ordered field order (same as section swapping)\n    const fieldRows = orderedCompanyFields.map((field, index) => {\n      const fieldValue = field.value || field.placeholder || '';\n      const isHeader = field.id === 'company-name';\n      \n      console.log(`🔀 Processing field ${index}:`, { id: field.id, label: field.label, value: fieldValue, isHeader, position: index });\n      \n      if (isHeader) {\n        const row = `<tr><td class=\"header-company\" style=\"text-align: left;\" data-field=\"${field.id}\">${fieldValue}</td></tr>`;\n        console.log(`🔀 Generated header row for ${field.id}:`, row);\n        return row;\n      } else {\n        // Handle special formatting for phone, fax, website\n        let displayText = fieldValue;\n        if (field.id === 'company-phone') displayText = `Phone: ${fieldValue}`;\n        if (field.id === 'company-fax') displayText = `Fax: ${fieldValue}`;\n        if (field.id === 'company-website') displayText = `Website: ${fieldValue}`;\n        \n        const row = `<tr><td style=\"text-align: left;\" data-field=\"${field.id}\">${displayText}</td></tr>`;\n        console.log(`🔀 Generated regular row for ${field.id}:`, row);\n        return row;\n      }\n    }).join('');\n    \n    console.log('🔀 Final generated fieldRows:', fieldRows);\n    \n    // Side-aware padding to keep spacing consistent when swapped\n    const companyTdPadding = position === 'left' ? 'padding-right: 24px;' : 'padding-left: 36px;';\n    const result = `\n      <td style=\"width: 65%; ${companyTdPadding}\" data-section=\"company-info\">\n        <table>\n          ${fieldRows}\n        </table>\n      </td>\n    `;\n    \n    console.log('🔀 Final company XML result:', result);\n    return result;\n  };\n\n  // Build Purchase Order Information XML\n  const buildPurchaseOrderXML = (position = 'right') => {\n    // Get purchase order fields from fieldOrderData to preserve drag-and-drop order\n    const purchaseOrderFields = fieldOrderData.purchaseOrderFields || [];\n    \n    // CRITICAL: Get field order from data (same pattern as section order)\n    const fieldOrder = data.fieldOrder?.purchaseOrder || purchaseOrderFields.map(f => f.id);\n    \n    console.log('🔀 Building purchase order XML with dynamic field ordering');\n    console.log('🔀 Purchase order fields received from data:', purchaseOrderFields.length);\n    console.log('🔀 Purchase order fields IDs in current order:', purchaseOrderFields.map(f => f.id));\n    console.log('🔀 Field order from data:', fieldOrder);\n    \n    // CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\n    const orderedPOFields = fieldOrder.map(fieldId => {\n      const field = purchaseOrderFields.find(f => f.id === fieldId);\n      if (!field) {\n        console.warn(`⚠️ WARNING: Field with ID ${fieldId} not found in purchaseOrderFields`);\n        return null;\n      }\n      return field;\n    }).filter(Boolean); // Remove any null fields\n    \n    console.log('🔀 Ordered purchase order fields for XML generation:', orderedPOFields.map(f => ({ id: f.id, label: f.label, position: orderedPOFields.indexOf(f) })));\n    \n    // Build XML based on ordered fields\n    const fieldRows = orderedPOFields.map((field, index) => {\n      // Prefer captured value; fallback to template getters to ensure content always present\n      const isTitle = field.id === 'po-title';\n      if (isTitle) {\n        const value = field.value || getPOFieldValue('po-title', 'PURCHASE ORDER');\n        return `<tr><td class=\"header-title\" style=\"text-align: right;\" data-field=\"${field.id}\">${value}</td></tr>`;\n      }\n      if (field.id === 'po-date') {\n        const value = field.value || getPOFieldValue('po-date', 'MM/DD/YYYY');\n        return `<tr><td style=\"text-align: right;\"><table style=\"width: 100%;\"><tr><td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td><td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${value}</td></tr></table></td></tr>`;\n      }\n      if (field.id === 'po-number') {\n        const value = field.value || getPOFieldValue('po-number', '[PO Number]');\n        return `<tr><td style=\"text-align: right;\"><table style=\"width: 100%;\"><tr><td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td><td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${value}</td></tr></table></td></tr>`;\n      }\n      \n      const genericValue = field.value || getPOFieldValue(field.id, '');\n      return `<tr><td style=\"text-align: right;\" data-field=\"${field.id}\">${genericValue}</td></tr>`;\n    }).join('');\n    \n    // Side-aware padding: when PO is on the left, push it away from the right column\n    const poTdPadding = position === 'left' ? 'padding-right: 56px;' : 'padding-left: 28px;';\n    return `\n      <td style=\"width: 35%; ${poTdPadding}\" align=\"right\" data-section=\"purchase-order-info\">\n        <table>\n          ${fieldRows}\n        </table>\n      </td>\n    `;\n  };\n\n\n\n  // Build Vendor-ShipTo Section XML with dynamic ordering\n  const buildVendorShipToSectionXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo section with order:', { leftSection, rightSection });\n    console.log('🔀 sections3And4 array:', data.sectionOrder?.sections3And4);\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      // Default order: Vendor left, Ship To right\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n      console.log('🔀 Using default order: Vendor left, Ship To right');\n    } else {\n      // Swapped order: Ship To left, Vendor right\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n      console.log('🔀 Using swapped order: Ship To left, Vendor right');\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\n  const buildShippingDetailsXML = () => {\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n          <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n          <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n          <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n          <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n          <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n          <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\n  const buildVendorShipToAndShippingDetailsXML = () => {\n    // Get section order from data, default to [sections3And4, sections5And6] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4And5And6 || ['sections3And4', 'sections5And6'];\n    const topSection = sectionOrder[0];\n    const bottomSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo + shipping details with order:', { topSection, bottomSection });\n    console.log('🔀 sections3And4And5And6 array:', data.sectionOrder?.sections3And4And5And6);\n    \n    let topContent, bottomContent;\n    \n    if (topSection === 'sections3And4') {\n      // Default order: Vendor-ShipTo on top, Shipping Details below\n      topContent = buildVendorShipToSectionXML();\n      bottomContent = buildShippingDetailsXML();\n      console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');\n    } else {\n      // Swapped order: Shipping Details on top, Vendor-ShipTo below\n      topContent = buildShippingDetailsXML();\n      bottomContent = buildVendorShipToSectionXML();\n      console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');\n    }\n    \n    return `\n      ${topContent}\n      ${bottomContent}\n    `;\n  };\n\n  // Build Header Section XML (Company + Purchase Order) with dynamic ordering\n  const buildHeaderSectionXML = () => {\n    // Get section order from data, default to [section1, section2] if not provided\n    const sectionOrder = data.sectionOrder?.sections1And2 || ['section1', 'section2'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building header section with order:', { leftSection, rightSection });\n    console.log('🔀 Full sectionOrder data:', data.sectionOrder);\n    console.log('🔀 Full data object keys:', Object.keys(data));\n    console.log('🔀 sections1And2 array:', data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 type:', typeof data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 length:', data.sectionOrder?.sections1And2?.length);\n    console.log('🔀 sections1And2 values:', JSON.stringify(data.sectionOrder?.sections1And2));\n    \n    // DEBUG: Check field order data when building header\n    console.log('🔍 DEBUG: fieldOrderData.companyFields when building header:', fieldOrderData.companyFields?.map(f => ({ id: f.id, label: f.label })));\n    console.log('🔍 DEBUG: fieldOrderData.purchaseOrderFields when building header:', fieldOrderData.purchaseOrderFields?.map(f => ({ id: f.id, label: f.label })));\n    \n    // IMPORTANT: Field order should be completely independent of section order\n    // Always use the current field order from fieldOrderData, regardless of section position\n    console.log('🔍 DEBUG: Ensuring field order independence from section order');\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section1') {\n      // Company on left, Purchase Order on right\n      leftColumn = buildCompanyXML('left');\n      rightColumn = buildPurchaseOrderXML('right');\n      console.log('🔀 Using default order: Company left, Purchase Order right');\n    } else {\n      // Purchase Order on left, Company on right (sections swapped)\n      leftColumn = buildPurchaseOrderXML('left');\n      rightColumn = buildCompanyXML('right');\n      console.log('🔀 Using swapped order: Purchase Order left, Company right');\n    }\n    \n    // DEBUG: Verify that field order is preserved regardless of section position\n    console.log('🔍 DEBUG: Field order verification - Company fields should maintain custom order');\n    console.log('🔍 DEBUG: Final company XML will use fieldOrderData.companyFields order');\n    \n    return `\n      <table>\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor Information XML\n  const buildVendorXML = () => {\n    // Get field order for vendor; fallback to current array order if not provided\n    const vendorFields = fieldOrderData.vendorFields || [];\n    const vendorFieldOrder = data.fieldOrder?.vendor || vendorFields.map(f => f.id);\n    \n    const orderedVendorFields = vendorFieldOrder.map(fieldId => vendorFields.find(f => f.id === fieldId)).filter(Boolean);\n    \n    const rows = orderedVendorFields.map(f => {\n      let value = f.value || getVendorFieldValue(f.id, '');\n      let prefix = '';\n      if (f.id === 'vendor-phone') prefix = 'Phone: ';\n      if (f.id === 'vendor-fax') prefix = 'Fax: ';\n      return `${prefix}<span data-field=\"${f.id}\">${value}</span>`;\n    }).join('<br/>');\n    \n    return `\n      <td style=\"width: 50%;\" data-subsection=\"vendor\">\n        <table>\n          <tr>\n            <td class=\"section-header\">VENDOR</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">${rows}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n \n  // Build Ship To Information XML\n  const buildShipToXML = () => {\n    // Get field order for ship-to; fallback to current array order if not provided\n    const shipToFields = fieldOrderData.shipToFields || [];\n    const shipToFieldOrder = data.fieldOrder?.shipTo || shipToFields.map(f => f.id);\n    \n    const orderedShipToFields = shipToFieldOrder.map(fieldId => shipToFields.find(f => f.id === fieldId)).filter(Boolean);\n    \n    const rows = orderedShipToFields.map(f => {\n      let value = f.value || getShipToFieldValue(f.id, '');\n      let prefix = '';\n      if (f.id === 'ship-to-phone') prefix = 'Phone: ';\n      if (f.id === 'ship-to-fax') prefix = 'Fax: ';\n      return `${prefix}<span data-field=\"${f.id}\">${value}</span>`;\n    }).join('<br/>');\n    \n    return `\n      <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n        <table>\n          <tr>\n            <td class=\"section-header\">SHIP TO</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">${rows}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor/Ship-To Section XML with dynamic ordering\n  const buildVendorShipToXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor/ship-to section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n    } else {\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Line Items XML with dynamic column ordering\n  const buildLineItemsXML = () => {\n    // Get column order from data, default to standard order if not provided\n    const columnOrder = data.sectionOrder?.lineItemColumns || ['itemNumber', 'description', 'qty', 'rate', 'amount'];\n    \n    console.log('🔀 Building line items with column order:', columnOrder);\n    console.log('🔀 Line items data:', data.lineItems);\n    console.log('🔀 Column order from state:', data.sectionOrder?.lineItemColumns);\n    \n    // Column configuration mapping\n    const columnConfig = {\n      itemNumber: { label: 'Item#', colSpan: 3, field: 'itemNumber' },\n      description: { label: 'Description', colSpan: 12, field: 'description' },\n      qty: { label: 'Qty', colSpan: 2, field: 'qty' },\n      rate: { label: 'Rate', colSpan: 3, field: 'rate' },\n      amount: { label: 'Amount', colSpan: 3, field: 'amount' }\n    };\n    \n    // Build header row\n    const headerRow = columnOrder.map(columnId => {\n      const config = columnConfig[columnId];\n      return `<td class=\"item-header\" colSpan=\"${config.colSpan}\">${config.label}</td>`;\n    }).join('');\n    \n    // Build data rows using actual line item data\n    const lineItems = data.lineItems || [];\n    const dataRows = Array(5).fill(0).map((_, rowIndex) => {\n      const rowData = lineItems[rowIndex] || {};\n      const rowCells = columnOrder.map(columnId => {\n        const config = columnConfig[columnId];\n        const fieldValue = rowData[columnId] || '-';\n        return `<td colSpan=\"${config.colSpan}\">${fieldValue}</td>`;\n      }).join('');\n      \n      return `<tr data-row-id=\"line-item-${rowIndex}\" data-row-index=\"${rowIndex}\">${rowCells}</tr>`;\n    }).join('');\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n          ${headerRow}\n        </tr>\n        ${dataRows}\n      </table>\n    `;\n  };\n\n  // Build Comments Section XML\n  const buildCommentsXML = () => {\n    const comments = getFieldValue('comments', '[Enter comments or special instructions...]');\n    return `\n      <td style=\"width: 50%;\" data-section=\"comments\">\n        <table>\n          <tr>\n            <td class=\"comments-header\">Comments or Special Instructions</td>\n          </tr>\n          <tr>\n            <td class=\"comments-content\">${comments}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Totals Section XML\n  const buildTotalsXML = () => {\n    const subtotal = getTotalsFieldValue('subtotal', '$0.00');\n    const tax = getTotalsFieldValue('tax', '$0.00');\n    const shipping = getTotalsFieldValue('shipping', '$0.00');\n    const other = getTotalsFieldValue('other', '$0.00');\n    const total = getTotalsFieldValue('total', '$0.00');\n    \n    return `\n      <td style=\"width: 50%;\" data-section=\"totals\">\n        <table>\n          <tr>\n            <td class=\"section-header\">Totals</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">\n              <div>SUBTOTAL: ${subtotal}</div>\n              <div>TAX: ${tax}</div>\n              <div>SHIPPING: ${shipping}</div>\n              <div>OTHER: ${other}</div>\n              <div class=\"total-final\">TOTAL: ${total}</div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Comments and Totals Section XML with dynamic ordering\n  const buildCommentsTotalsXML = () => {\n    // Get section order from data, default to [section8, section9] if not provided\n    const sectionOrder = data.sectionOrder?.sections8And9 || ['section8', 'section9'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building comments/totals section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section8') {\n      leftColumn = buildCommentsXML();\n      rightColumn = buildTotalsXML();\n    } else {\n      leftColumn = buildTotalsXML();\n      rightColumn = buildCommentsXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `.shipping-${fieldType} .editable-field`,\n      `#shipping-${fieldType}`,\n      `[data-shipping-field=\"${fieldType}\"]`\n    ];\n    \n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    // Map template field names to live table data-column ids\n    const colIdMap = { quantity: 'qty', unitPrice: 'rate', total: 'amount' };\n    const colId = colIdMap[fieldType] || fieldType; // itemNumber, description pass through\n\n    const possibleSelectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${colId}-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${colId}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-column=\"${colId}\"] .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`\n    ];\n    \n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n    \n    // Try DOM selectors with debugging\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      const text = element ? element.textContent.trim() : '';\n      try { console.debug('🔎 XML getLineItemValue', { rowIndex, fieldType, colId, selector, found: !!element, text }); } catch {}\n      if (text) return text;\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = (fieldType) => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`,\n      // Subtotal and total are displayed as calculated spans\n      `.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`,\n      `.totals-section .total-row[data-field=\"total\"] .total-field`\n    ];\n    \n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors with debugging\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      const text = element ? element.textContent.trim() : '';\n      try { console.debug('🔎 XML getTotalFieldValue', { fieldType, selector, found: !!element, text }); } catch {}\n      if (text) return text;\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n    \n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      \n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    ${buildHeaderSectionXML()}\n    ${buildVendorShipToAndShippingDetailsXML()}\n\n\n    ${buildLineItemsXML()}\n\n\n    ${buildCommentsTotalsXML()}\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n\n  console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');\n  console.log('📄 XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    staticFields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website'],\n    dynamicPrefixes: ['company-field-', 'company-'],\n    dataAttribute: 'data-section=\"company-info\"'\n  },\n  purchaseOrder: {\n    staticFields: ['po-title', 'po-date', 'po-number'],\n    dynamicPrefixes: ['po-field-', 'po-'],\n    dataAttribute: 'data-section=\"purchase-order-info\"'\n  },\n  vendor: {\n    staticFields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax'],\n    dynamicPrefixes: ['vendor-field-', 'vendor-'],\n    dataAttribute: 'data-subsection=\"vendor\"'\n  },\n  shipTo: {\n    staticFields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone', 'ship-to-fax'],\n    dynamicPrefixes: ['ship-to-field-', 'ship-to-'],\n    dataAttribute: 'data-subsection=\"ship-to\"'\n  },\n  shipping: {\n    staticFields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms'],\n    dynamicPrefixes: ['shipping-field-', 'shipping-'],\n    dataAttribute: 'data-section=\"shipping-details\"'\n  },\n  lineItems: {\n    staticFields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total'],\n    dynamicPrefixes: ['line-item-', 'item-'],\n    dataAttribute: 'data-section=\"line-items\"',\n    maxRows: 5\n  },\n  totals: {\n    staticFields: ['subtotal', 'tax', 'shipping', 'other', 'total'],\n    dynamicPrefixes: ['total-', 'totals-'],\n    dataAttribute: 'data-subsection=\"totals\"'\n  },\n  comments: {\n    staticFields: ['comments'],\n    dynamicPrefixes: ['comments-field-', 'comment-'],\n    dataAttribute: 'data-subsection=\"comments\"'\n  },\n  contact: {\n    staticFields: ['contactInfo'],\n    dynamicPrefixes: ['contact-info-field-', 'contact-'],\n    dataAttribute: 'data-section=\"contact-signature\"'\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n\n// Dynamic ID Generation Utilities\nexport const dynamicIdUtils = {\n  // Generate a new dynamic ID with timestamp and random component\n  generateId: (prefix = 'field', section = 'general') => {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${section}-${prefix}-${timestamp}-${random}`;\n  },\n\n  // Generate multiple possible IDs for a field to try when looking up values\n  getPossibleIds: (staticId, section = 'unknown') => {\n    const baseName = staticId.replace(/^(company-|po-|vendor-|ship-to-)/, '');\n    return [\n      staticId, // Try static ID first\n      `${section}-field-${staticId}`,\n      `${section}-${baseName}`,\n      `${staticId}-${Date.now()}`,\n      `field-${baseName}`,\n      baseName\n    ];\n  },\n\n  // Validate if an ID follows our dynamic ID pattern\n  isValidDynamicId: (id) => {\n    const dynamicPattern = /^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;\n    return dynamicPattern.test(id);\n  },\n\n  // Extract the base field type from any ID (static or dynamic)\n  getFieldType: (id) => {\n    // Remove common prefixes and suffixes to get the core field type\n    return id\n      .replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/, '')\n      .replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/, '')\n      .replace(/^(field-)?/, '');\n  },\n\n  // Get section from ID\n  getSection: (id) => {\n    if (id.startsWith('company-')) return 'company';\n    if (id.startsWith('po-')) return 'purchase-order';\n    if (id.startsWith('vendor-')) return 'vendor';\n    if (id.startsWith('ship-to-')) return 'ship-to';\n    if (id.startsWith('shipping-')) return 'shipping';\n    if (id.startsWith('line-item-')) return 'line-items';\n    if (id.startsWith('total-')) return 'totals';\n    if (id.startsWith('comments-')) return 'comments';\n    if (id.startsWith('contact-')) return 'contact';\n    return 'unknown';\n  }\n};\n\n// Field Mapping Utilities\nexport const fieldMappingUtils = {\n  // Map all known static field IDs to their readable names\n  staticFieldNames: {\n    // Company fields\n    'company-name': 'Company Name',\n    'company-address': 'Street Address',\n    'company-city-state': 'City, State, ZIP',\n    'company-phone': 'Phone Number',\n    'company-fax': 'Fax Number',\n    'company-website': 'Website',\n    \n    // Purchase Order fields\n    'po-title': 'Purchase Order Title',\n    'po-date': 'Date',\n    'po-number': 'PO Number',\n    \n    // Vendor fields\n    'vendor-company': 'Vendor Company',\n    'vendor-contact': 'Vendor Contact',\n    'vendor-address': 'Vendor Address',\n    'vendor-city-state': 'Vendor City/State',\n    'vendor-phone': 'Vendor Phone',\n    'vendor-fax': 'Vendor Fax',\n    \n    // Ship To fields\n    'ship-to-name': 'Ship To Name',\n    'ship-to-company': 'Ship To Company',\n    'ship-to-address': 'Ship To Address',\n    'ship-to-city-state': 'Ship To City/State',\n    'ship-to-phone': 'Ship To Phone',\n    'ship-to-fax': 'Ship To Fax',\n    \n    // Shipping fields\n    'requisitioner': 'Requisitioner',\n    'shipVia': 'Ship Via',\n    'fob': 'F.O.B.',\n    'shippingTerms': 'Shipping Terms',\n    \n    // Line item fields\n    'itemNumber': 'Item Number',\n    'description': 'Description',\n    'quantity': 'Quantity',\n    'unitPrice': 'Unit Price',\n    'total': 'Total',\n    \n    // Totals fields\n    'subtotal': 'Subtotal',\n    'tax': 'Tax',\n    'shipping': 'Shipping',\n    'other': 'Other',\n    \n    // Other fields\n    'comments': 'Comments',\n    'contactInfo': 'Contact Information'\n  },\n\n  // Get human-readable name for any field ID\n  getFieldName: (id) => {\n    const staticName = fieldMappingUtils.staticFieldNames[id];\n    if (staticName) return staticName;\n    \n    // For dynamic IDs, try to extract the base field type\n    const fieldType = dynamicIdUtils.getFieldType(id);\n    const staticFieldName = fieldMappingUtils.staticFieldNames[fieldType];\n    if (staticFieldName) return staticFieldName;\n    \n    // Fallback: humanize the ID\n    return id.replace(/[-_]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  },\n\n  // Get all field IDs for a section\n  getFieldsForSection: (section) => {\n    const template = purchaseOrderTemplate[section];\n    return template ? template.staticFields : [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}