{"ast":null,"code":"// Form Data Mapping Utilities for Purchase Order Template\n// This module provides comprehensive mapping between React form data and XML generation\n\nimport { dynamicIdUtils, fieldMappingUtils } from './PurchaseOrderTemplate';\n\n/**\n * Form Data Collection Utility\n * Collects form data from various sources (React state, DOM, etc.) into a structured format\n */\nexport class FormDataMapper {\n  constructor() {\n    this.formData = this.getEmptyFormData();\n    this.mappingConfig = this.getDefaultMappingConfig();\n  }\n\n  /**\n   * Get empty form data structure\n   */\n  getEmptyFormData() {\n    return {\n      companyInfo: {\n        name: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: '',\n        website: ''\n      },\n      headerInfo: {\n        title: 'PURCHASE ORDER',\n        date: '',\n        poNumber: ''\n      },\n      vendor: {\n        company: '',\n        contact: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: ''\n      },\n      shipTo: {\n        name: '',\n        company: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: ''\n      },\n      shippingDetails: {\n        requisitioner: '',\n        shipVia: '',\n        fob: '',\n        shippingTerms: ''\n      },\n      lineItems: [],\n      totals: {\n        subtotal: 0,\n        tax: 0,\n        shipping: 0,\n        other: 0,\n        total: 0\n      },\n      comments: '',\n      contactInfo: ''\n    };\n  }\n\n  /**\n   * Default mapping configuration between form fields and data structure\n   */\n  getDefaultMappingConfig() {\n    return {\n      // Company Information mappings\n      companyInfo: {\n        'company-name': 'companyInfo.name',\n        'company-address': 'companyInfo.address',\n        'company-city-state': 'companyInfo.cityStateZip',\n        'company-phone': 'companyInfo.phone',\n        'company-fax': 'companyInfo.fax',\n        'company-website': 'companyInfo.website'\n      },\n      // Purchase Order Header mappings\n      headerInfo: {\n        'po-title': 'headerInfo.title',\n        'po-date': 'headerInfo.date',\n        'po-number': 'headerInfo.poNumber'\n      },\n      // Vendor Information mappings\n      vendor: {\n        'vendor-company': 'vendor.company',\n        'vendor-contact': 'vendor.contact',\n        'vendor-address': 'vendor.address',\n        'vendor-city-state': 'vendor.cityStateZip',\n        'vendor-phone': 'vendor.phone',\n        'vendor-fax': 'vendor.fax'\n      },\n      // Ship To Information mappings\n      shipTo: {\n        'ship-to-name': 'shipTo.name',\n        'ship-to-company': 'shipTo.company',\n        'ship-to-address': 'shipTo.address',\n        'ship-to-city-state': 'shipTo.cityStateZip',\n        'ship-to-phone': 'shipTo.phone',\n        'ship-to-fax': 'shipTo.fax'\n      },\n      // Shipping Details mappings\n      shippingDetails: {\n        'requisitioner': 'shippingDetails.requisitioner',\n        'shipVia': 'shippingDetails.shipVia',\n        'fob': 'shippingDetails.fob',\n        'shippingTerms': 'shippingDetails.shippingTerms'\n      },\n      // Line Items mappings (handled separately due to array structure)\n      lineItems: {\n        'itemNumber': 'itemNumber',\n        'description': 'description',\n        'quantity': 'quantity',\n        'unitPrice': 'unitPrice',\n        'total': 'total'\n      },\n      // Totals mappings\n      totals: {\n        'subtotal': 'totals.subtotal',\n        'tax': 'totals.tax',\n        'shipping': 'totals.shipping',\n        'other': 'totals.other',\n        'total': 'totals.total'\n      },\n      // Other fields\n      other: {\n        'comments': 'comments',\n        'contactInfo': 'contactInfo'\n      }\n    };\n  }\n\n  /**\n   * Collect form data from React component fields arrays\n   * This works with the existing PurchaseOrderForm.jsx structure\n   */\n  collectFromReactFieldArrays(fieldArrays) {\n    const formData = this.getEmptyFormData();\n\n    // Process company fields\n    if (fieldArrays.companyFields) {\n      fieldArrays.companyFields.forEach(field => {\n        const mappingKey = this.mappingConfig.companyInfo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n\n    // Process purchase order fields\n    if (fieldArrays.purchaseOrderFields) {\n      fieldArrays.purchaseOrderFields.forEach(field => {\n        const mappingKey = this.mappingConfig.headerInfo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n\n    // Process vendor fields\n    if (fieldArrays.vendorFields) {\n      fieldArrays.vendorFields.forEach(field => {\n        const mappingKey = this.mappingConfig.vendor[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n\n    // Process ship-to fields\n    if (fieldArrays.shipToFields) {\n      fieldArrays.shipToFields.forEach(field => {\n        const mappingKey = this.mappingConfig.shipTo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n\n    // Process line items if provided\n    if (fieldArrays.lineItems) {\n      formData.lineItems = fieldArrays.lineItems.map(item => ({\n        itemNumber: item.itemNumber || '',\n        description: item.description || '',\n        quantity: this.parseNumber(item.quantity, 0),\n        unitPrice: this.parseNumber(item.unitPrice, 0),\n        total: this.parseNumber(item.total, 0)\n      }));\n    }\n\n    // Process other fields\n    if (fieldArrays.comments) {\n      formData.comments = fieldArrays.comments;\n    }\n    if (fieldArrays.contactInfo) {\n      formData.contactInfo = fieldArrays.contactInfo;\n    }\n    return formData;\n  }\n\n  /**\n   * Collect form data from DOM elements using dynamic ID strategies\n   */\n  collectFromDOM() {\n    const formData = this.getEmptyFormData();\n\n    // Collect company information\n    Object.entries(this.mappingConfig.companyInfo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'company');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n\n    // Collect header information\n    Object.entries(this.mappingConfig.headerInfo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'purchase-order');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n\n    // Collect vendor information\n    Object.entries(this.mappingConfig.vendor).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'vendor');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n\n    // Collect ship-to information\n    Object.entries(this.mappingConfig.shipTo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'ship-to');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n\n    // Collect shipping details\n    Object.entries(this.mappingConfig.shippingDetails).forEach(([fieldId, dataPath]) => {\n      const value = this.getShippingDetailFromDOM(fieldId);\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n\n    // Collect line items\n    formData.lineItems = this.collectLineItemsFromDOM();\n\n    // Collect totals\n    Object.entries(this.mappingConfig.totals).forEach(([fieldId, dataPath]) => {\n      const value = this.getTotalFromDOM(fieldId);\n      if (value !== null) {\n        this.setNestedValue(formData, dataPath, this.parseNumber(value, 0));\n      }\n    });\n\n    // Collect comments and contact info\n    formData.comments = this.getCommentsFromDOM();\n    formData.contactInfo = this.getContactInfoFromDOM();\n    return formData;\n  }\n\n  /**\n   * Get value from DOM using dynamic ID strategies\n   */\n  getValueFromDOMWithDynamicId(staticId, section) {\n    const possibleIds = dynamicIdUtils.getPossibleIds(staticId, section);\n\n    // Try each possible ID\n    for (const id of possibleIds) {\n      const element = document.getElementById(id);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n\n    // Try CSS selectors as fallback\n    const selectors = [`[data-field=\"${staticId}\"]`, `.${staticId}-field`, `.field-${staticId}`, `[data-field-type=\"${staticId}\"]`];\n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Get shipping detail value from DOM\n   */\n  getShippingDetailFromDOM(fieldType) {\n    const selectors = [`.shipping-field-${fieldType} .editable-field`, `.shipping-field[data-field=\"${fieldType}\"] .editable-field`, `[data-shipping-field=\"${fieldType}\"]`, `#shipping-${fieldType}`];\n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Collect line items from DOM\n   */\n  collectLineItemsFromDOM() {\n    const lineItems = [];\n    const maxRows = 5; // Standard number of rows\n\n    for (let i = 0; i < maxRows; i++) {\n      const item = {\n        itemNumber: this.getLineItemFieldFromDOM(i, 'itemNumber'),\n        description: this.getLineItemFieldFromDOM(i, 'description'),\n        quantity: this.parseNumber(this.getLineItemFieldFromDOM(i, 'quantity'), 0),\n        unitPrice: this.parseNumber(this.getLineItemFieldFromDOM(i, 'unitPrice'), 0),\n        total: this.parseNumber(this.getLineItemFieldFromDOM(i, 'total'), 0)\n      };\n\n      // Only add non-empty items\n      if (item.itemNumber || item.description || item.quantity || item.unitPrice) {\n        lineItems.push(item);\n      }\n    }\n    return lineItems;\n  }\n\n  /**\n   * Get line item field value from DOM\n   */\n  getLineItemFieldFromDOM(rowIndex, fieldType) {\n    const selectors = [`#line-item-${rowIndex}-${fieldType}`, `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field .editable-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`, `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-field=\"${fieldType}\"] .editable-field`];\n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Get total field value from DOM\n   */\n  getTotalFromDOM(fieldType) {\n    const selectors = [`#total-${fieldType}`, `.total-${fieldType} .editable-field`, `.total-row[data-field=\"${fieldType}\"] .editable-field`, `.totals-section .${fieldType}-field .editable-field`];\n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get comments from DOM\n   */\n  getCommentsFromDOM() {\n    const selectors = ['#comments-field', '.comments-content .editable-field', '.comments-section .editable-field', '[data-field=\"comments\"]'];\n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Get contact info from DOM\n   */\n  getContactInfoFromDOM() {\n    const selectors = ['#contact-info-field', '.contact-section .editable-field', '.contact-info .editable-field', '[data-field=\"contactInfo\"]'];\n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Get value from DOM element (handles different element types)\n   */\n  getElementValue(element) {\n    var _element$textContent2;\n    if (!element) return '';\n\n    // Handle different input types\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      return element.value || '';\n    }\n\n    // Handle contentEditable elements\n    if (element.contentEditable === 'true' || element.hasAttribute('contenteditable')) {\n      var _element$textContent;\n      return ((_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim()) || '';\n    }\n\n    // Handle regular text content\n    return ((_element$textContent2 = element.textContent) === null || _element$textContent2 === void 0 ? void 0 : _element$textContent2.trim()) || '';\n  }\n\n  /**\n   * Set nested object value using dot notation (e.g., \"companyInfo.name\")\n   */\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    const lastKey = keys.pop();\n    const target = keys.reduce((o, k) => o[k] = o[k] || {}, obj);\n    target[lastKey] = value;\n  }\n\n  /**\n   * Get nested object value using dot notation\n   */\n  getNestedValue(obj, path) {\n    return path.split('.').reduce((o, k) => o ? o[k] : undefined, obj);\n  }\n\n  /**\n   * Parse number with fallback\n   */\n  parseNumber(value, fallback = 0) {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      // Remove currency symbols and commas\n      const cleaned = value.replace(/[$,]/g, '');\n      const parsed = parseFloat(cleaned);\n      return isNaN(parsed) ? fallback : parsed;\n    }\n    return fallback;\n  }\n\n  /**\n   * Validate form data structure\n   */\n  validateFormData(formData) {\n    const errors = [];\n\n    // Required field validation\n    const requiredFields = {\n      'companyInfo.name': 'Company Name',\n      'headerInfo.date': 'Purchase Order Date',\n      'headerInfo.poNumber': 'PO Number'\n    };\n    Object.entries(requiredFields).forEach(([path, label]) => {\n      const value = this.getNestedValue(formData, path);\n      if (!value || value.trim() === '') {\n        errors.push(`${label} is required`);\n      }\n    });\n\n    // Number validation for totals\n    const numberFields = ['totals.subtotal', 'totals.tax', 'totals.shipping', 'totals.other', 'totals.total'];\n    numberFields.forEach(path => {\n      const value = this.getNestedValue(formData, path);\n      if (value !== null && value !== undefined && isNaN(Number(value))) {\n        errors.push(`${path.split('.').pop()} must be a valid number`);\n      }\n    });\n\n    // Line items validation\n    if (formData.lineItems && formData.lineItems.length > 0) {\n      formData.lineItems.forEach((item, index) => {\n        if (item.quantity < 0) {\n          errors.push(`Line item ${index + 1} quantity cannot be negative`);\n        }\n        if (item.unitPrice < 0) {\n          errors.push(`Line item ${index + 1} unit price cannot be negative`);\n        }\n      });\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Calculate totals from line items\n   */\n  calculateTotals(formData) {\n    if (!formData.lineItems || formData.lineItems.length === 0) {\n      return formData;\n    }\n\n    // Calculate subtotal\n    const subtotal = formData.lineItems.reduce((sum, item) => {\n      return sum + item.quantity * item.unitPrice;\n    }, 0);\n    formData.totals.subtotal = subtotal;\n\n    // Calculate total\n    formData.totals.total = subtotal + (formData.totals.tax || 0) + (formData.totals.shipping || 0) + (formData.totals.other || 0);\n\n    // Update line item totals\n    formData.lineItems.forEach(item => {\n      item.total = item.quantity * item.unitPrice;\n    });\n    return formData;\n  }\n\n  /**\n   * Format form data for XML generation\n   */\n  formatForXMLGeneration(formData) {\n    // Ensure all required fields have values\n    const formattedData = {\n      ...formData,\n      companyFields: this.convertToFieldArray(formData.companyInfo, 'company'),\n      purchaseOrderFields: this.convertToFieldArray(formData.headerInfo, 'po'),\n      vendorFields: this.convertToFieldArray(formData.vendor, 'vendor'),\n      shipToFields: this.convertToFieldArray(formData.shipTo, 'ship-to')\n    };\n    return formattedData;\n  }\n\n  /**\n   * Convert object to field array format (for compatibility with existing template)\n   */\n  convertToFieldArray(dataObj, prefix) {\n    const fieldArray = [];\n    const reverseMapping = this.getReverseMapping(prefix);\n    Object.entries(dataObj).forEach(([key, value]) => {\n      const fieldId = reverseMapping[key];\n      if (fieldId) {\n        fieldArray.push({\n          id: fieldId,\n          value: value,\n          label: fieldMappingUtils.getFieldName(fieldId)\n        });\n      }\n    });\n    return fieldArray;\n  }\n\n  /**\n   * Get reverse mapping for converting data back to field IDs\n   */\n  getReverseMapping(section) {\n    const mappings = {\n      company: {\n        name: 'company-name',\n        address: 'company-address',\n        cityStateZip: 'company-city-state',\n        phone: 'company-phone',\n        fax: 'company-fax',\n        website: 'company-website'\n      },\n      po: {\n        title: 'po-title',\n        date: 'po-date',\n        poNumber: 'po-number'\n      },\n      vendor: {\n        company: 'vendor-company',\n        contact: 'vendor-contact',\n        address: 'vendor-address',\n        cityStateZip: 'vendor-city-state',\n        phone: 'vendor-phone',\n        fax: 'vendor-fax'\n      },\n      'ship-to': {\n        name: 'ship-to-name',\n        company: 'ship-to-company',\n        address: 'ship-to-address',\n        cityStateZip: 'ship-to-city-state',\n        phone: 'ship-to-phone',\n        fax: 'ship-to-fax'\n      }\n    };\n    return mappings[section] || {};\n  }\n}\n\n// Export convenience functions\nexport const formDataMapper = new FormDataMapper();\n\n/**\n * Quick function to collect form data from React field arrays\n */\nexport const collectFormDataFromReact = fieldArrays => {\n  return formDataMapper.collectFromReactFieldArrays(fieldArrays);\n};\n\n/**\n * Quick function to collect form data from DOM\n */\nexport const collectFormDataFromDOM = () => {\n  return formDataMapper.collectFromDOM();\n};\n\n/**\n * Quick function to validate form data\n */\nexport const validateFormData = formData => {\n  return formDataMapper.validateFormData(formData);\n};\n\n/**\n * Quick function to calculate totals\n */\nexport const calculateTotals = formData => {\n  return formDataMapper.calculateTotals(formData);\n};\n\n/**\n * Complete form data processing pipeline\n */\nexport const processFormData = (source, options = {}) => {\n  let formData;\n\n  // Collect data based on source type\n  if (typeof source === 'object' && source.companyFields) {\n    // React field arrays format\n    formData = collectFormDataFromReact(source);\n  } else if (typeof source === 'object') {\n    // Already structured form data\n    formData = source;\n  } else {\n    // Collect from DOM\n    formData = collectFormDataFromDOM();\n  }\n\n  // Calculate totals if requested\n  if (options.calculateTotals !== false) {\n    formData = calculateTotals(formData);\n  }\n\n  // Validate if requested\n  if (options.validate !== false) {\n    const validation = validateFormData(formData);\n    if (!validation.isValid && options.throwOnValidationError) {\n      throw new Error(`Form validation failed: ${validation.errors.join(', ')}`);\n    }\n    formData._validation = validation;\n  }\n\n  // Format for XML generation if requested\n  if (options.formatForXML) {\n    formData = formDataMapper.formatForXMLGeneration(formData);\n  }\n  return formData;\n};","map":{"version":3,"names":["dynamicIdUtils","fieldMappingUtils","FormDataMapper","constructor","formData","getEmptyFormData","mappingConfig","getDefaultMappingConfig","companyInfo","name","address","cityStateZip","phone","fax","website","headerInfo","title","date","poNumber","vendor","company","contact","shipTo","shippingDetails","requisitioner","shipVia","fob","shippingTerms","lineItems","totals","subtotal","tax","shipping","other","total","comments","contactInfo","collectFromReactFieldArrays","fieldArrays","companyFields","forEach","field","mappingKey","id","setNestedValue","value","purchaseOrderFields","vendorFields","shipToFields","map","item","itemNumber","description","quantity","parseNumber","unitPrice","collectFromDOM","Object","entries","fieldId","dataPath","getValueFromDOMWithDynamicId","getShippingDetailFromDOM","collectLineItemsFromDOM","getTotalFromDOM","getCommentsFromDOM","getContactInfoFromDOM","staticId","section","possibleIds","getPossibleIds","element","document","getElementById","getElementValue","selectors","selector","querySelector","fieldType","maxRows","i","getLineItemFieldFromDOM","push","rowIndex","_element$textContent2","tagName","contentEditable","hasAttribute","_element$textContent","textContent","trim","obj","path","keys","split","lastKey","pop","target","reduce","o","k","getNestedValue","undefined","fallback","cleaned","replace","parsed","parseFloat","isNaN","validateFormData","errors","requiredFields","label","numberFields","Number","length","index","isValid","calculateTotals","sum","formatForXMLGeneration","formattedData","convertToFieldArray","dataObj","prefix","fieldArray","reverseMapping","getReverseMapping","key","getFieldName","mappings","po","formDataMapper","collectFormDataFromReact","collectFormDataFromDOM","processFormData","source","options","validate","validation","throwOnValidationError","Error","join","_validation","formatForXML"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/FormDataMapper.js"],"sourcesContent":["// Form Data Mapping Utilities for Purchase Order Template\n// This module provides comprehensive mapping between React form data and XML generation\n\nimport { dynamicIdUtils, fieldMappingUtils } from './PurchaseOrderTemplate';\n\n/**\n * Form Data Collection Utility\n * Collects form data from various sources (React state, DOM, etc.) into a structured format\n */\nexport class FormDataMapper {\n  constructor() {\n    this.formData = this.getEmptyFormData();\n    this.mappingConfig = this.getDefaultMappingConfig();\n  }\n\n  /**\n   * Get empty form data structure\n   */\n  getEmptyFormData() {\n    return {\n      companyInfo: {\n        name: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: '',\n        website: ''\n      },\n      headerInfo: {\n        title: 'PURCHASE ORDER',\n        date: '',\n        poNumber: ''\n      },\n      vendor: {\n        company: '',\n        contact: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: ''\n      },\n      shipTo: {\n        name: '',\n        company: '',\n        address: '',\n        cityStateZip: '',\n        phone: '',\n        fax: ''\n      },\n      shippingDetails: {\n        requisitioner: '',\n        shipVia: '',\n        fob: '',\n        shippingTerms: ''\n      },\n      lineItems: [],\n      totals: {\n        subtotal: 0,\n        tax: 0,\n        shipping: 0,\n        other: 0,\n        total: 0\n      },\n      comments: '',\n      contactInfo: ''\n    };\n  }\n\n  /**\n   * Default mapping configuration between form fields and data structure\n   */\n  getDefaultMappingConfig() {\n    return {\n      // Company Information mappings\n      companyInfo: {\n        'company-name': 'companyInfo.name',\n        'company-address': 'companyInfo.address',\n        'company-city-state': 'companyInfo.cityStateZip',\n        'company-phone': 'companyInfo.phone',\n        'company-fax': 'companyInfo.fax',\n        'company-website': 'companyInfo.website'\n      },\n      \n      // Purchase Order Header mappings\n      headerInfo: {\n        'po-title': 'headerInfo.title',\n        'po-date': 'headerInfo.date',\n        'po-number': 'headerInfo.poNumber'\n      },\n      \n      // Vendor Information mappings\n      vendor: {\n        'vendor-company': 'vendor.company',\n        'vendor-contact': 'vendor.contact',\n        'vendor-address': 'vendor.address',\n        'vendor-city-state': 'vendor.cityStateZip',\n        'vendor-phone': 'vendor.phone',\n        'vendor-fax': 'vendor.fax'\n      },\n      \n      // Ship To Information mappings\n      shipTo: {\n        'ship-to-name': 'shipTo.name',\n        'ship-to-company': 'shipTo.company',\n        'ship-to-address': 'shipTo.address',\n        'ship-to-city-state': 'shipTo.cityStateZip',\n        'ship-to-phone': 'shipTo.phone',\n        'ship-to-fax': 'shipTo.fax'\n      },\n      \n      // Shipping Details mappings\n      shippingDetails: {\n        'requisitioner': 'shippingDetails.requisitioner',\n        'shipVia': 'shippingDetails.shipVia',\n        'fob': 'shippingDetails.fob',\n        'shippingTerms': 'shippingDetails.shippingTerms'\n      },\n      \n      // Line Items mappings (handled separately due to array structure)\n      lineItems: {\n        'itemNumber': 'itemNumber',\n        'description': 'description',\n        'quantity': 'quantity',\n        'unitPrice': 'unitPrice',\n        'total': 'total'\n      },\n      \n      // Totals mappings\n      totals: {\n        'subtotal': 'totals.subtotal',\n        'tax': 'totals.tax',\n        'shipping': 'totals.shipping',\n        'other': 'totals.other',\n        'total': 'totals.total'\n      },\n      \n      // Other fields\n      other: {\n        'comments': 'comments',\n        'contactInfo': 'contactInfo'\n      }\n    };\n  }\n\n  /**\n   * Collect form data from React component fields arrays\n   * This works with the existing PurchaseOrderForm.jsx structure\n   */\n  collectFromReactFieldArrays(fieldArrays) {\n    const formData = this.getEmptyFormData();\n    \n    // Process company fields\n    if (fieldArrays.companyFields) {\n      fieldArrays.companyFields.forEach(field => {\n        const mappingKey = this.mappingConfig.companyInfo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process purchase order fields\n    if (fieldArrays.purchaseOrderFields) {\n      fieldArrays.purchaseOrderFields.forEach(field => {\n        const mappingKey = this.mappingConfig.headerInfo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process vendor fields\n    if (fieldArrays.vendorFields) {\n      fieldArrays.vendorFields.forEach(field => {\n        const mappingKey = this.mappingConfig.vendor[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process ship-to fields\n    if (fieldArrays.shipToFields) {\n      fieldArrays.shipToFields.forEach(field => {\n        const mappingKey = this.mappingConfig.shipTo[field.id];\n        if (mappingKey) {\n          this.setNestedValue(formData, mappingKey, field.value || '');\n        }\n      });\n    }\n    \n    // Process line items if provided\n    if (fieldArrays.lineItems) {\n      formData.lineItems = fieldArrays.lineItems.map(item => ({\n        itemNumber: item.itemNumber || '',\n        description: item.description || '',\n        quantity: this.parseNumber(item.quantity, 0),\n        unitPrice: this.parseNumber(item.unitPrice, 0),\n        total: this.parseNumber(item.total, 0)\n      }));\n    }\n    \n    // Process other fields\n    if (fieldArrays.comments) {\n      formData.comments = fieldArrays.comments;\n    }\n    if (fieldArrays.contactInfo) {\n      formData.contactInfo = fieldArrays.contactInfo;\n    }\n    \n    return formData;\n  }\n\n  /**\n   * Collect form data from DOM elements using dynamic ID strategies\n   */\n  collectFromDOM() {\n    const formData = this.getEmptyFormData();\n    \n    // Collect company information\n    Object.entries(this.mappingConfig.companyInfo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'company');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect header information\n    Object.entries(this.mappingConfig.headerInfo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'purchase-order');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect vendor information\n    Object.entries(this.mappingConfig.vendor).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'vendor');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect ship-to information\n    Object.entries(this.mappingConfig.shipTo).forEach(([fieldId, dataPath]) => {\n      const value = this.getValueFromDOMWithDynamicId(fieldId, 'ship-to');\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect shipping details\n    Object.entries(this.mappingConfig.shippingDetails).forEach(([fieldId, dataPath]) => {\n      const value = this.getShippingDetailFromDOM(fieldId);\n      if (value) {\n        this.setNestedValue(formData, dataPath, value);\n      }\n    });\n    \n    // Collect line items\n    formData.lineItems = this.collectLineItemsFromDOM();\n    \n    // Collect totals\n    Object.entries(this.mappingConfig.totals).forEach(([fieldId, dataPath]) => {\n      const value = this.getTotalFromDOM(fieldId);\n      if (value !== null) {\n        this.setNestedValue(formData, dataPath, this.parseNumber(value, 0));\n      }\n    });\n    \n    // Collect comments and contact info\n    formData.comments = this.getCommentsFromDOM();\n    formData.contactInfo = this.getContactInfoFromDOM();\n    \n    return formData;\n  }\n\n  /**\n   * Get value from DOM using dynamic ID strategies\n   */\n  getValueFromDOMWithDynamicId(staticId, section) {\n    const possibleIds = dynamicIdUtils.getPossibleIds(staticId, section);\n    \n    // Try each possible ID\n    for (const id of possibleIds) {\n      const element = document.getElementById(id);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    // Try CSS selectors as fallback\n    const selectors = [\n      `[data-field=\"${staticId}\"]`,\n      `.${staticId}-field`,\n      `.field-${staticId}`,\n      `[data-field-type=\"${staticId}\"]`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get shipping detail value from DOM\n   */\n  getShippingDetailFromDOM(fieldType) {\n    const selectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `[data-shipping-field=\"${fieldType}\"]`,\n      `#shipping-${fieldType}`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Collect line items from DOM\n   */\n  collectLineItemsFromDOM() {\n    const lineItems = [];\n    const maxRows = 5; // Standard number of rows\n    \n    for (let i = 0; i < maxRows; i++) {\n      const item = {\n        itemNumber: this.getLineItemFieldFromDOM(i, 'itemNumber'),\n        description: this.getLineItemFieldFromDOM(i, 'description'),\n        quantity: this.parseNumber(this.getLineItemFieldFromDOM(i, 'quantity'), 0),\n        unitPrice: this.parseNumber(this.getLineItemFieldFromDOM(i, 'unitPrice'), 0),\n        total: this.parseNumber(this.getLineItemFieldFromDOM(i, 'total'), 0)\n      };\n      \n      // Only add non-empty items\n      if (item.itemNumber || item.description || item.quantity || item.unitPrice) {\n        lineItems.push(item);\n      }\n    }\n    \n    return lineItems;\n  }\n\n  /**\n   * Get line item field value from DOM\n   */\n  getLineItemFieldFromDOM(rowIndex, fieldType) {\n    const selectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${fieldType}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${fieldType}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-field=\"${fieldType}\"] .editable-field`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get total field value from DOM\n   */\n  getTotalFromDOM(fieldType) {\n    const selectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Get comments from DOM\n   */\n  getCommentsFromDOM() {\n    const selectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get contact info from DOM\n   */\n  getContactInfoFromDOM() {\n    const selectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector);\n      if (element) {\n        return this.getElementValue(element);\n      }\n    }\n    \n    return '';\n  }\n\n  /**\n   * Get value from DOM element (handles different element types)\n   */\n  getElementValue(element) {\n    if (!element) return '';\n    \n    // Handle different input types\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      return element.value || '';\n    }\n    \n    // Handle contentEditable elements\n    if (element.contentEditable === 'true' || element.hasAttribute('contenteditable')) {\n      return element.textContent?.trim() || '';\n    }\n    \n    // Handle regular text content\n    return element.textContent?.trim() || '';\n  }\n\n  /**\n   * Set nested object value using dot notation (e.g., \"companyInfo.name\")\n   */\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    const lastKey = keys.pop();\n    const target = keys.reduce((o, k) => (o[k] = o[k] || {}), obj);\n    target[lastKey] = value;\n  }\n\n  /**\n   * Get nested object value using dot notation\n   */\n  getNestedValue(obj, path) {\n    return path.split('.').reduce((o, k) => (o ? o[k] : undefined), obj);\n  }\n\n  /**\n   * Parse number with fallback\n   */\n  parseNumber(value, fallback = 0) {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      // Remove currency symbols and commas\n      const cleaned = value.replace(/[$,]/g, '');\n      const parsed = parseFloat(cleaned);\n      return isNaN(parsed) ? fallback : parsed;\n    }\n    return fallback;\n  }\n\n  /**\n   * Validate form data structure\n   */\n  validateFormData(formData) {\n    const errors = [];\n    \n    // Required field validation\n    const requiredFields = {\n      'companyInfo.name': 'Company Name',\n      'headerInfo.date': 'Purchase Order Date',\n      'headerInfo.poNumber': 'PO Number'\n    };\n    \n    Object.entries(requiredFields).forEach(([path, label]) => {\n      const value = this.getNestedValue(formData, path);\n      if (!value || value.trim() === '') {\n        errors.push(`${label} is required`);\n      }\n    });\n    \n    // Number validation for totals\n    const numberFields = ['totals.subtotal', 'totals.tax', 'totals.shipping', 'totals.other', 'totals.total'];\n    numberFields.forEach(path => {\n      const value = this.getNestedValue(formData, path);\n      if (value !== null && value !== undefined && isNaN(Number(value))) {\n        errors.push(`${path.split('.').pop()} must be a valid number`);\n      }\n    });\n    \n    // Line items validation\n    if (formData.lineItems && formData.lineItems.length > 0) {\n      formData.lineItems.forEach((item, index) => {\n        if (item.quantity < 0) {\n          errors.push(`Line item ${index + 1} quantity cannot be negative`);\n        }\n        if (item.unitPrice < 0) {\n          errors.push(`Line item ${index + 1} unit price cannot be negative`);\n        }\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Calculate totals from line items\n   */\n  calculateTotals(formData) {\n    if (!formData.lineItems || formData.lineItems.length === 0) {\n      return formData;\n    }\n    \n    // Calculate subtotal\n    const subtotal = formData.lineItems.reduce((sum, item) => {\n      return sum + (item.quantity * item.unitPrice);\n    }, 0);\n    \n    formData.totals.subtotal = subtotal;\n    \n    // Calculate total\n    formData.totals.total = subtotal + \n      (formData.totals.tax || 0) + \n      (formData.totals.shipping || 0) + \n      (formData.totals.other || 0);\n    \n    // Update line item totals\n    formData.lineItems.forEach(item => {\n      item.total = item.quantity * item.unitPrice;\n    });\n    \n    return formData;\n  }\n\n  /**\n   * Format form data for XML generation\n   */\n  formatForXMLGeneration(formData) {\n    // Ensure all required fields have values\n    const formattedData = {\n      ...formData,\n      companyFields: this.convertToFieldArray(formData.companyInfo, 'company'),\n      purchaseOrderFields: this.convertToFieldArray(formData.headerInfo, 'po'),\n      vendorFields: this.convertToFieldArray(formData.vendor, 'vendor'),\n      shipToFields: this.convertToFieldArray(formData.shipTo, 'ship-to')\n    };\n    \n    return formattedData;\n  }\n\n  /**\n   * Convert object to field array format (for compatibility with existing template)\n   */\n  convertToFieldArray(dataObj, prefix) {\n    const fieldArray = [];\n    const reverseMapping = this.getReverseMapping(prefix);\n    \n    Object.entries(dataObj).forEach(([key, value]) => {\n      const fieldId = reverseMapping[key];\n      if (fieldId) {\n        fieldArray.push({\n          id: fieldId,\n          value: value,\n          label: fieldMappingUtils.getFieldName(fieldId)\n        });\n      }\n    });\n    \n    return fieldArray;\n  }\n\n  /**\n   * Get reverse mapping for converting data back to field IDs\n   */\n  getReverseMapping(section) {\n    const mappings = {\n      company: {\n        name: 'company-name',\n        address: 'company-address',\n        cityStateZip: 'company-city-state',\n        phone: 'company-phone',\n        fax: 'company-fax',\n        website: 'company-website'\n      },\n      po: {\n        title: 'po-title',\n        date: 'po-date',\n        poNumber: 'po-number'\n      },\n      vendor: {\n        company: 'vendor-company',\n        contact: 'vendor-contact',\n        address: 'vendor-address',\n        cityStateZip: 'vendor-city-state',\n        phone: 'vendor-phone',\n        fax: 'vendor-fax'\n      },\n      'ship-to': {\n        name: 'ship-to-name',\n        company: 'ship-to-company',\n        address: 'ship-to-address',\n        cityStateZip: 'ship-to-city-state',\n        phone: 'ship-to-phone',\n        fax: 'ship-to-fax'\n      }\n    };\n    \n    return mappings[section] || {};\n  }\n}\n\n// Export convenience functions\nexport const formDataMapper = new FormDataMapper();\n\n/**\n * Quick function to collect form data from React field arrays\n */\nexport const collectFormDataFromReact = (fieldArrays) => {\n  return formDataMapper.collectFromReactFieldArrays(fieldArrays);\n};\n\n/**\n * Quick function to collect form data from DOM\n */\nexport const collectFormDataFromDOM = () => {\n  return formDataMapper.collectFromDOM();\n};\n\n/**\n * Quick function to validate form data\n */\nexport const validateFormData = (formData) => {\n  return formDataMapper.validateFormData(formData);\n};\n\n/**\n * Quick function to calculate totals\n */\nexport const calculateTotals = (formData) => {\n  return formDataMapper.calculateTotals(formData);\n};\n\n/**\n * Complete form data processing pipeline\n */\nexport const processFormData = (source, options = {}) => {\n  let formData;\n  \n  // Collect data based on source type\n  if (typeof source === 'object' && source.companyFields) {\n    // React field arrays format\n    formData = collectFormDataFromReact(source);\n  } else if (typeof source === 'object') {\n    // Already structured form data\n    formData = source;\n  } else {\n    // Collect from DOM\n    formData = collectFormDataFromDOM();\n  }\n  \n  // Calculate totals if requested\n  if (options.calculateTotals !== false) {\n    formData = calculateTotals(formData);\n  }\n  \n  // Validate if requested\n  if (options.validate !== false) {\n    const validation = validateFormData(formData);\n    if (!validation.isValid && options.throwOnValidationError) {\n      throw new Error(`Form validation failed: ${validation.errors.join(', ')}`);\n    }\n    formData._validation = validation;\n  }\n  \n  // Format for XML generation if requested\n  if (options.formatForXML) {\n    formData = formDataMapper.formatForXMLGeneration(formData);\n  }\n  \n  return formData;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}