{"ast":null,"code":"// AI provider hook - uses OpenAI Chat Completions (3.5-turbo JSON mode)\n// NOTE: Exposing API keys in a browser is insecure. Prefer a small server proxy.\n\nexport function useAIProvider() {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  const MODEL = 'gpt-3.5-turbo-0125'; // 3.5 model that supports JSON mode; fallback below\n\n  async function getFieldSuggestions(payload) {\n    if (!apiKey) {\n      throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');\n    }\n\n    // Defensive helpers\n    const arr = v => Array.isArray(v) ? v : [];\n    const safeMap = (xs, fn) => arr(xs).map(fn).filter(Boolean);\n    const todayUS = new Date().toLocaleDateString('en-US', {\n      timeZone: 'America/Chicago'\n    });\n\n    // Build the \"example schema\" segment safely (avoid 'undefined' strings)\n    const schemaLines = [].concat(safeMap(payload === null || payload === void 0 ? void 0 : payload.companyFields, f => `\"${f.id}\": \"string\"`)).concat(safeMap(payload === null || payload === void 0 ? void 0 : payload.purchaseOrderFields, f => `\"${f.id}\": \"string\"`)).concat(safeMap(payload === null || payload === void 0 ? void 0 : payload.vendorFields, f => `\"${f.id}\": \"string\"`)).concat(safeMap(payload === null || payload === void 0 ? void 0 : payload.shipToFields, f => `\"${f.id}\": \"string\"`));\n    const messages = [{\n      role: 'system',\n      content: `You are a professional business data generator. Output ONLY valid JSON (no code fences, no prose).\nGenerate realistic purchase order data for a US company.\n\nRules:\n- Use real US cities and professional formatting.\n- Monetary fields MUST have exactly one leading dollar sign, e.g., \"$1,234.56\".\n- Do NOT prefix any amount with more than one \"$\".\n- Return ONLY a single JSON object (no arrays, no extra text).`\n    }, {\n      role: 'user',\n      content: `Generate a complete purchase order for a medium enterprise in the general business industry.\n\nParameters:\n- PO date: ${todayUS}\n- 5 line items suitable for this industry\n- Totals: subtotal, 8.5% tax, shipping between $25 and $75, \"other\" (can be \"$0.00\"), and final total\n- All money formatted like \"$123.45\" with exactly one \"$\"\n\nJSON field names should match this structure:\n{\n  ${schemaLines.join(',\\n  ')}${schemaLines.length ? ',' : ''}\n\n  \"requisitioner\": \"string\",\n  \"shipVia\": \"string\",\n  \"fob\": \"string\",\n  \"shippingTerms\": \"string\",\n\n  \"lineItem1Qty\": \"string\",\n  \"lineItem1Item\": \"string\",\n  \"lineItem1Desc\": \"string\",\n  \"lineItem1Rate\": \"string\",\n  \"lineItem1Amount\": \"string\",\n\n  \"lineItem2Qty\": \"string\",\n  \"lineItem2Item\": \"string\",\n  \"lineItem2Desc\": \"string\",\n  \"lineItem2Rate\": \"string\",\n  \"lineItem2Amount\": \"string\",\n\n  \"lineItem3Qty\": \"string\",\n  \"lineItem3Item\": \"string\",\n  \"lineItem3Desc\": \"string\",\n  \"lineItem3Rate\": \"string\",\n  \"lineItem3Amount\": \"string\",\n\n  \"lineItem4Qty\": \"string\",\n  \"lineItem4Item\": \"string\",\n  \"lineItem4Desc\": \"string\",\n  \"lineItem4Rate\": \"string\",\n  \"lineItem4Amount\": \"string\",\n\n  \"lineItem5Qty\": \"string\",\n  \"lineItem5Item\": \"string\",\n  \"lineItem5Desc\": \"string\",\n  \"lineItem5Rate\": \"string\",\n  \"lineItem5Amount\": \"string\",\n\n  \"subtotal\": \"string (with $ sign)\",\n  \"tax\": \"string (with $ sign)\",\n  \"shipping\": \"string (with $ sign)\",\n  \"other\": \"string (with $ sign)\",\n  \"total\": \"string (with $ sign)\",\n\n  \"comments\": \"string\",\n  \"contactInfo\": \"string\"\n}`\n    }];\n\n    // Single call (JSON mode) + robust parsing\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 60000);\n      const body = JSON.stringify({\n        model: MODEL,\n        messages,\n        temperature: 0.2,\n        // Ask 3.5 to produce a strict JSON object\n        response_format: {\n          type: 'json_object'\n        },\n        max_tokens: 1500\n      });\n      let response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body,\n        signal: controller.signal\n      });\n\n      // Simple model fallback if needed\n      if (response.status === 404 || response.status === 400) {\n        const bodyFallback = JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          // legacy alias, if enabled on your account\n          messages,\n          temperature: 0.2,\n          response_format: {\n            type: 'json_object'\n          },\n          max_tokens: 1500\n        });\n        response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: bodyFallback,\n          signal: controller.signal\n        });\n      }\n      clearTimeout(timeout);\n      if (!response.ok) {\n        let errTxt = '';\n        try {\n          errTxt = JSON.stringify(await response.json());\n        } catch {}\n        throw new Error(`OpenAI API error: ${errTxt || response.statusText}`);\n      }\n      const data = await response.json();\n      console.debug('ðŸ§ª OpenAI chat data:', data);\n\n      // Extract content safely\n      let content = data === null || data === void 0 ? void 0 : (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n      if (typeof content !== 'string' || !content.trim()) {\n        throw new Error('No response content from OpenAI');\n      }\n\n      // Strip accidental code fences just in case\n      let cleaned = content.trim();\n      if (cleaned.startsWith('```')) {\n        cleaned = cleaned.replace(/^```(?:json)?\\s*/i, '').replace(/```$/i, '').trim();\n      }\n\n      // Parse JSON; if it fails, try to salvage the first {...} block\n      let parsed;\n      try {\n        parsed = JSON.parse(cleaned);\n      } catch (e) {\n        const first = cleaned.indexOf('{');\n        const last = cleaned.lastIndexOf('}');\n        if (first !== -1 && last > first) {\n          parsed = JSON.parse(cleaned.slice(first, last + 1));\n        } else {\n          throw e;\n        }\n      }\n\n      // Whitelist to known fields and fuzzy-match by label\n      const allFields = [...arr(payload === null || payload === void 0 ? void 0 : payload.companyFields), ...arr(payload === null || payload === void 0 ? void 0 : payload.purchaseOrderFields), ...arr(payload === null || payload === void 0 ? void 0 : payload.vendorFields), ...arr(payload === null || payload === void 0 ? void 0 : payload.shipToFields), ...arr(payload === null || payload === void 0 ? void 0 : payload.shippingFields)];\n      const allowedIds = new Set(allFields.map(f => f.id));\n      const normalize = s => String(s || '').toLowerCase().replace(/[`\"'']/g, '').replace(/\\s+/g, ' ').trim().replace(/[^a-z0-9]+/g, '');\n      const labelToId = Object.fromEntries(allFields.map(f => [normalize(f.label || f.id), f.id]));\n      const coerceToString = v => {\n        if (typeof v === 'string') return v;\n        if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n        if (v && typeof v === 'object') {\n          if (typeof v.value === 'string') return v.value;\n          if (typeof v.text === 'string') return v.text;\n        }\n        return undefined;\n      };\n      const suggestions = {};\n      for (const [rawKey, rawVal] of Object.entries(parsed || {})) {\n        const value = coerceToString(rawVal);\n        if (value === undefined) continue;\n        if (allowedIds.has(rawKey)) {\n          suggestions[rawKey] = value;\n          continue;\n        }\n        const maybeId = labelToId[normalize(rawKey)];\n        if (maybeId && allowedIds.has(maybeId)) {\n          suggestions[maybeId] = value;\n        }\n      }\n      return {\n        suggestions\n      };\n    } catch (error) {\n      console.error('OpenAI API call failed:', error);\n      throw error;\n    }\n  }\n  return {\n    getFieldSuggestions\n  };\n}","map":{"version":3,"names":["useAIProvider","apiKey","process","env","REACT_APP_OPENAI_API_KEY","MODEL","getFieldSuggestions","payload","Error","arr","v","Array","isArray","safeMap","xs","fn","map","filter","Boolean","todayUS","Date","toLocaleDateString","timeZone","schemaLines","concat","companyFields","f","id","purchaseOrderFields","vendorFields","shipToFields","messages","role","content","join","length","_data$choices","_data$choices$","_data$choices$$messag","controller","AbortController","timeout","setTimeout","abort","body","JSON","stringify","model","temperature","response_format","type","max_tokens","response","fetch","method","headers","signal","status","bodyFallback","clearTimeout","ok","errTxt","json","statusText","data","console","debug","choices","message","trim","cleaned","startsWith","replace","parsed","parse","e","first","indexOf","last","lastIndexOf","slice","allFields","shippingFields","allowedIds","Set","normalize","s","String","toLowerCase","labelToId","Object","fromEntries","label","coerceToString","value","text","undefined","suggestions","rawKey","rawVal","entries","has","maybeId","error"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useAIProvider.js"],"sourcesContent":["// AI provider hook - uses OpenAI Chat Completions (3.5-turbo JSON mode)\n// NOTE: Exposing API keys in a browser is insecure. Prefer a small server proxy.\n\nexport function useAIProvider() {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  const MODEL = 'gpt-3.5-turbo-0125'; // 3.5 model that supports JSON mode; fallback below\n\n  async function getFieldSuggestions(payload) {\n    if (!apiKey) {\n      throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');\n    }\n\n    // Defensive helpers\n    const arr = (v) => Array.isArray(v) ? v : [];\n    const safeMap = (xs, fn) => arr(xs).map(fn).filter(Boolean);\n    const todayUS = new Date().toLocaleDateString('en-US', { timeZone: 'America/Chicago' });\n\n    // Build the \"example schema\" segment safely (avoid 'undefined' strings)\n    const schemaLines = []\n      .concat(safeMap(payload?.companyFields, f => `\"${f.id}\": \"string\"`))\n      .concat(safeMap(payload?.purchaseOrderFields, f => `\"${f.id}\": \"string\"`))\n      .concat(safeMap(payload?.vendorFields, f => `\"${f.id}\": \"string\"`))\n      .concat(safeMap(payload?.shipToFields, f => `\"${f.id}\": \"string\"`));\n\n    const messages = [\n      {\n        role: 'system',\n        content:\n`You are a professional business data generator. Output ONLY valid JSON (no code fences, no prose).\nGenerate realistic purchase order data for a US company.\n\nRules:\n- Use real US cities and professional formatting.\n- Monetary fields MUST have exactly one leading dollar sign, e.g., \"$1,234.56\".\n- Do NOT prefix any amount with more than one \"$\".\n- Return ONLY a single JSON object (no arrays, no extra text).`\n      },\n      {\n        role: 'user',\n        content:\n`Generate a complete purchase order for a medium enterprise in the general business industry.\n\nParameters:\n- PO date: ${todayUS}\n- 5 line items suitable for this industry\n- Totals: subtotal, 8.5% tax, shipping between $25 and $75, \"other\" (can be \"$0.00\"), and final total\n- All money formatted like \"$123.45\" with exactly one \"$\"\n\nJSON field names should match this structure:\n{\n  ${schemaLines.join(',\\n  ')}${schemaLines.length ? ',' : ''}\n\n  \"requisitioner\": \"string\",\n  \"shipVia\": \"string\",\n  \"fob\": \"string\",\n  \"shippingTerms\": \"string\",\n\n  \"lineItem1Qty\": \"string\",\n  \"lineItem1Item\": \"string\",\n  \"lineItem1Desc\": \"string\",\n  \"lineItem1Rate\": \"string\",\n  \"lineItem1Amount\": \"string\",\n\n  \"lineItem2Qty\": \"string\",\n  \"lineItem2Item\": \"string\",\n  \"lineItem2Desc\": \"string\",\n  \"lineItem2Rate\": \"string\",\n  \"lineItem2Amount\": \"string\",\n\n  \"lineItem3Qty\": \"string\",\n  \"lineItem3Item\": \"string\",\n  \"lineItem3Desc\": \"string\",\n  \"lineItem3Rate\": \"string\",\n  \"lineItem3Amount\": \"string\",\n\n  \"lineItem4Qty\": \"string\",\n  \"lineItem4Item\": \"string\",\n  \"lineItem4Desc\": \"string\",\n  \"lineItem4Rate\": \"string\",\n  \"lineItem4Amount\": \"string\",\n\n  \"lineItem5Qty\": \"string\",\n  \"lineItem5Item\": \"string\",\n  \"lineItem5Desc\": \"string\",\n  \"lineItem5Rate\": \"string\",\n  \"lineItem5Amount\": \"string\",\n\n  \"subtotal\": \"string (with $ sign)\",\n  \"tax\": \"string (with $ sign)\",\n  \"shipping\": \"string (with $ sign)\",\n  \"other\": \"string (with $ sign)\",\n  \"total\": \"string (with $ sign)\",\n\n  \"comments\": \"string\",\n  \"contactInfo\": \"string\"\n}`\n      }\n    ];\n\n    // Single call (JSON mode) + robust parsing\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 60_000);\n\n      const body = JSON.stringify({\n        model: MODEL,\n        messages,\n        temperature: 0.2,\n        // Ask 3.5 to produce a strict JSON object\n        response_format: { type: 'json_object' },\n        max_tokens: 1500\n      });\n\n      let response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body,\n        signal: controller.signal\n      });\n\n      // Simple model fallback if needed\n      if (response.status === 404 || response.status === 400) {\n        const bodyFallback = JSON.stringify({\n          model: 'gpt-3.5-turbo', // legacy alias, if enabled on your account\n          messages,\n          temperature: 0.2,\n          response_format: { type: 'json_object' },\n          max_tokens: 1500\n        });\n        response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: bodyFallback,\n          signal: controller.signal\n        });\n      }\n\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        let errTxt = '';\n        try { errTxt = JSON.stringify(await response.json()); } catch {}\n        throw new Error(`OpenAI API error: ${errTxt || response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.debug('ðŸ§ª OpenAI chat data:', data);\n\n      // Extract content safely\n      let content = data?.choices?.[0]?.message?.content;\n      if (typeof content !== 'string' || !content.trim()) {\n        throw new Error('No response content from OpenAI');\n      }\n\n      // Strip accidental code fences just in case\n      let cleaned = content.trim();\n      if (cleaned.startsWith('```')) {\n        cleaned = cleaned.replace(/^```(?:json)?\\s*/i, '').replace(/```$/i, '').trim();\n      }\n\n      // Parse JSON; if it fails, try to salvage the first {...} block\n      let parsed;\n      try {\n        parsed = JSON.parse(cleaned);\n      } catch (e) {\n        const first = cleaned.indexOf('{');\n        const last = cleaned.lastIndexOf('}');\n        if (first !== -1 && last > first) {\n          parsed = JSON.parse(cleaned.slice(first, last + 1));\n        } else {\n          throw e;\n        }\n      }\n\n      // Whitelist to known fields and fuzzy-match by label\n      const allFields = [\n        ...arr(payload?.companyFields),\n        ...arr(payload?.purchaseOrderFields),\n        ...arr(payload?.vendorFields),\n        ...arr(payload?.shipToFields),\n        ...arr(payload?.shippingFields)\n      ];\n\n      const allowedIds = new Set(allFields.map(f => f.id));\n      const normalize = (s) => String(s || '')\n        .toLowerCase()\n        .replace(/[`\"'']/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim()\n        .replace(/[^a-z0-9]+/g, '');\n\n      const labelToId = Object.fromEntries(\n        allFields.map(f => [normalize(f.label || f.id), f.id])\n      );\n\n      const coerceToString = (v) => {\n        if (typeof v === 'string') return v;\n        if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n        if (v && typeof v === 'object') {\n          if (typeof v.value === 'string') return v.value;\n          if (typeof v.text === 'string') return v.text;\n        }\n        return undefined;\n      };\n\n      const suggestions = {};\n      for (const [rawKey, rawVal] of Object.entries(parsed || {})) {\n        const value = coerceToString(rawVal);\n        if (value === undefined) continue;\n\n        if (allowedIds.has(rawKey)) {\n          suggestions[rawKey] = value;\n          continue;\n        }\n        const maybeId = labelToId[normalize(rawKey)];\n        if (maybeId && allowedIds.has(maybeId)) {\n          suggestions[maybeId] = value;\n        }\n      }\n\n      return { suggestions };\n    } catch (error) {\n      console.error('OpenAI API call failed:', error);\n      throw error;\n    }\n  }\n\n  return { getFieldSuggestions };\n}\n\n\n"],"mappings":"AAAA;AACA;;AAEA,OAAO,SAASA,aAAaA,CAAA,EAAG;EAC9B,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EACnD,MAAMC,KAAK,GAAG,oBAAoB,CAAC,CAAC;;EAEpC,eAAeC,mBAAmBA,CAACC,OAAO,EAAE;IAC1C,IAAI,CAACN,MAAM,EAAE;MACX,MAAM,IAAIO,KAAK,CAAC,+EAA+E,CAAC;IAClG;;IAEA;IACA,MAAMC,GAAG,GAAIC,CAAC,IAAKC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAG,EAAE;IAC5C,MAAMG,OAAO,GAAGA,CAACC,EAAE,EAAEC,EAAE,KAAKN,GAAG,CAACK,EAAE,CAAC,CAACE,GAAG,CAACD,EAAE,CAAC,CAACE,MAAM,CAACC,OAAO,CAAC;IAC3D,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;MAAEC,QAAQ,EAAE;IAAkB,CAAC,CAAC;;IAEvF;IACA,MAAMC,WAAW,GAAG,EAAE,CACnBC,MAAM,CAACX,OAAO,CAACN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkB,aAAa,EAAEC,CAAC,IAAI,IAAIA,CAAC,CAACC,EAAE,aAAa,CAAC,CAAC,CACnEH,MAAM,CAACX,OAAO,CAACN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,mBAAmB,EAAEF,CAAC,IAAI,IAAIA,CAAC,CAACC,EAAE,aAAa,CAAC,CAAC,CACzEH,MAAM,CAACX,OAAO,CAACN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEsB,YAAY,EAAEH,CAAC,IAAI,IAAIA,CAAC,CAACC,EAAE,aAAa,CAAC,CAAC,CAClEH,MAAM,CAACX,OAAO,CAACN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEuB,YAAY,EAAEJ,CAAC,IAAI,IAAIA,CAAC,CAACC,EAAE,aAAa,CAAC,CAAC;IAErE,MAAMI,QAAQ,GAAG,CACf;MACEC,IAAI,EAAE,QAAQ;MACdC,OAAO,EACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,EACD;MACED,IAAI,EAAE,MAAM;MACZC,OAAO,EACf;AACA;AACA;AACA,aAAad,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,WAAW,CAACW,IAAI,CAAC,OAAO,CAAC,GAAGX,WAAW,CAACY,MAAM,GAAG,GAAG,GAAG,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CACF;;IAED;IACA,IAAI;MAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,qBAAA;MACF,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAM,CAAC;MAE5D,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;QAC1BC,KAAK,EAAE1C,KAAK;QACZ0B,QAAQ;QACRiB,WAAW,EAAE,GAAG;QAChB;QACAC,eAAe,EAAE;UAAEC,IAAI,EAAE;QAAc,CAAC;QACxCC,UAAU,EAAE;MACd,CAAC,CAAC;MAEF,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUtD,MAAM,EAAE;UACnC,cAAc,EAAE;QAClB,CAAC;QACD2C,IAAI;QACJY,MAAM,EAAEjB,UAAU,CAACiB;MACrB,CAAC,CAAC;;MAEF;MACA,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAIL,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QACtD,MAAMC,YAAY,GAAGb,IAAI,CAACC,SAAS,CAAC;UAClCC,KAAK,EAAE,eAAe;UAAE;UACxBhB,QAAQ;UACRiB,WAAW,EAAE,GAAG;UAChBC,eAAe,EAAE;YAAEC,IAAI,EAAE;UAAc,CAAC;UACxCC,UAAU,EAAE;QACd,CAAC,CAAC;QACFC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;UACnEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUtD,MAAM,EAAE;YACnC,cAAc,EAAE;UAClB,CAAC;UACD2C,IAAI,EAAEc,YAAY;UAClBF,MAAM,EAAEjB,UAAU,CAACiB;QACrB,CAAC,CAAC;MACJ;MAEAG,YAAY,CAAClB,OAAO,CAAC;MAErB,IAAI,CAACW,QAAQ,CAACQ,EAAE,EAAE;QAChB,IAAIC,MAAM,GAAG,EAAE;QACf,IAAI;UAAEA,MAAM,GAAGhB,IAAI,CAACC,SAAS,CAAC,MAAMM,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC;QAAE,CAAC,CAAC,MAAM,CAAC;QAC/D,MAAM,IAAItD,KAAK,CAAC,qBAAqBqD,MAAM,IAAIT,QAAQ,CAACW,UAAU,EAAE,CAAC;MACvE;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCG,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,IAAI,CAAC;;MAE3C;MACA,IAAI/B,OAAO,GAAG+B,IAAI,aAAJA,IAAI,wBAAA5B,aAAA,GAAJ4B,IAAI,CAAEG,OAAO,cAAA/B,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,wBAAAC,qBAAA,GAAlBD,cAAA,CAAoB+B,OAAO,cAAA9B,qBAAA,uBAA3BA,qBAAA,CAA6BL,OAAO;MAClD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,CAACA,OAAO,CAACoC,IAAI,CAAC,CAAC,EAAE;QAClD,MAAM,IAAI7D,KAAK,CAAC,iCAAiC,CAAC;MACpD;;MAEA;MACA,IAAI8D,OAAO,GAAGrC,OAAO,CAACoC,IAAI,CAAC,CAAC;MAC5B,IAAIC,OAAO,CAACC,UAAU,CAAC,KAAK,CAAC,EAAE;QAC7BD,OAAO,GAAGA,OAAO,CAACE,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACH,IAAI,CAAC,CAAC;MAChF;;MAEA;MACA,IAAII,MAAM;MACV,IAAI;QACFA,MAAM,GAAG5B,IAAI,CAAC6B,KAAK,CAACJ,OAAO,CAAC;MAC9B,CAAC,CAAC,OAAOK,CAAC,EAAE;QACV,MAAMC,KAAK,GAAGN,OAAO,CAACO,OAAO,CAAC,GAAG,CAAC;QAClC,MAAMC,IAAI,GAAGR,OAAO,CAACS,WAAW,CAAC,GAAG,CAAC;QACrC,IAAIH,KAAK,KAAK,CAAC,CAAC,IAAIE,IAAI,GAAGF,KAAK,EAAE;UAChCH,MAAM,GAAG5B,IAAI,CAAC6B,KAAK,CAACJ,OAAO,CAACU,KAAK,CAACJ,KAAK,EAAEE,IAAI,GAAG,CAAC,CAAC,CAAC;QACrD,CAAC,MAAM;UACL,MAAMH,CAAC;QACT;MACF;;MAEA;MACA,MAAMM,SAAS,GAAG,CAChB,GAAGxE,GAAG,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkB,aAAa,CAAC,EAC9B,GAAGhB,GAAG,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,mBAAmB,CAAC,EACpC,GAAGnB,GAAG,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEsB,YAAY,CAAC,EAC7B,GAAGpB,GAAG,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEuB,YAAY,CAAC,EAC7B,GAAGrB,GAAG,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE2E,cAAc,CAAC,CAChC;MAED,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAACH,SAAS,CAACjE,GAAG,CAACU,CAAC,IAAIA,CAAC,CAACC,EAAE,CAAC,CAAC;MACpD,MAAM0D,SAAS,GAAIC,CAAC,IAAKC,MAAM,CAACD,CAAC,IAAI,EAAE,CAAC,CACrCE,WAAW,CAAC,CAAC,CACbhB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CACtBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBH,IAAI,CAAC,CAAC,CACNG,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;MAE7B,MAAMiB,SAAS,GAAGC,MAAM,CAACC,WAAW,CAClCV,SAAS,CAACjE,GAAG,CAACU,CAAC,IAAI,CAAC2D,SAAS,CAAC3D,CAAC,CAACkE,KAAK,IAAIlE,CAAC,CAACC,EAAE,CAAC,EAAED,CAAC,CAACC,EAAE,CAAC,CACvD,CAAC;MAED,MAAMkE,cAAc,GAAInF,CAAC,IAAK;QAC5B,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE,OAAOA,CAAC;QACnC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE,OAAO6E,MAAM,CAAC7E,CAAC,CAAC;QACrE,IAAIA,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;UAC9B,IAAI,OAAOA,CAAC,CAACoF,KAAK,KAAK,QAAQ,EAAE,OAAOpF,CAAC,CAACoF,KAAK;UAC/C,IAAI,OAAOpF,CAAC,CAACqF,IAAI,KAAK,QAAQ,EAAE,OAAOrF,CAAC,CAACqF,IAAI;QAC/C;QACA,OAAOC,SAAS;MAClB,CAAC;MAED,MAAMC,WAAW,GAAG,CAAC,CAAC;MACtB,KAAK,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,IAAIT,MAAM,CAACU,OAAO,CAAC3B,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE;QAC3D,MAAMqB,KAAK,GAAGD,cAAc,CAACM,MAAM,CAAC;QACpC,IAAIL,KAAK,KAAKE,SAAS,EAAE;QAEzB,IAAIb,UAAU,CAACkB,GAAG,CAACH,MAAM,CAAC,EAAE;UAC1BD,WAAW,CAACC,MAAM,CAAC,GAAGJ,KAAK;UAC3B;QACF;QACA,MAAMQ,OAAO,GAAGb,SAAS,CAACJ,SAAS,CAACa,MAAM,CAAC,CAAC;QAC5C,IAAII,OAAO,IAAInB,UAAU,CAACkB,GAAG,CAACC,OAAO,CAAC,EAAE;UACtCL,WAAW,CAACK,OAAO,CAAC,GAAGR,KAAK;QAC9B;MACF;MAEA,OAAO;QAAEG;MAAY,CAAC;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdtC,OAAO,CAACsC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEA,OAAO;IAAEjG;EAAoB,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}