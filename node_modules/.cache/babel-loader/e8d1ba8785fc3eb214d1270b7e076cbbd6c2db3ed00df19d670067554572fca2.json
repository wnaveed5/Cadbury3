{"ast":null,"code":"// AI provider hook - uses ChatGPT API directly\n// Set REACT_APP_OPENAI_API_KEY in your .env file to keep the key secure\nexport function useAIProvider(){const apiKey=process.env.REACT_APP_OPENAI_API_KEY;async function getFieldSuggestions(payload){if(!apiKey){throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');}try{var _payload$companyField,_payload$purchaseOrde,_payload$vendorFields,_payload$shipToFields,_data$choices$,_data$choices$$messag;const response=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{'Authorization':\"Bearer \".concat(apiKey),'Content-Type':'application/json'},body:JSON.stringify({model:'gpt-4',messages:[{role:'system',content:\"You are a helpful assistant that fills out purchase order forms. \\n              Analyze the provided fields and return realistic, business-appropriate values.\\n              Return ONLY a JSON object with field IDs as keys and suggested values as strings.\\n              Example: {\\\"company-name\\\": \\\"Acme Corporation\\\", \\\"po-number\\\": \\\"PO-2024-001\\\"}\"},{role:'user',content:\"Please fill out these purchase order fields with realistic business data:\\n              Company Fields: \".concat((_payload$companyField=payload.companyFields)===null||_payload$companyField===void 0?void 0:_payload$companyField.map(f=>\"\".concat(f.id,\": \").concat(f.label)).join(', '),\"\\n              Purchase Order Fields: \").concat((_payload$purchaseOrde=payload.purchaseOrderFields)===null||_payload$purchaseOrde===void 0?void 0:_payload$purchaseOrde.map(f=>\"\".concat(f.id,\": \").concat(f.label)).join(', '),\"\\n              Vendor Fields: \").concat((_payload$vendorFields=payload.vendorFields)===null||_payload$vendorFields===void 0?void 0:_payload$vendorFields.map(f=>\"\".concat(f.id,\": \").concat(f.label)).join(', '),\"\\n              Ship To Fields: \").concat((_payload$shipToFields=payload.shipToFields)===null||_payload$shipToFields===void 0?void 0:_payload$shipToFields.map(f=>\"\".concat(f.id,\": \").concat(f.label)).join(', '),\"\\n              \\n              Return only valid JSON with field IDs as keys.\")}],temperature:0.7,max_tokens:1000})});if(!response.ok){var _errorData$error;const errorData=await response.json();throw new Error(\"OpenAI API error: \".concat(((_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||response.statusText));}const data=await response.json();const content=(_data$choices$=data.choices[0])===null||_data$choices$===void 0?void 0:(_data$choices$$messag=_data$choices$.message)===null||_data$choices$$messag===void 0?void 0:_data$choices$$messag.content;if(!content){throw new Error('No response content from OpenAI');}// Parse the JSON response from ChatGPT\ntry{const suggestions=JSON.parse(content);return{suggestions};}catch(parseError){console.error('Failed to parse OpenAI response:',content);throw new Error('Invalid JSON response from AI - please try again');}}catch(error){console.error('OpenAI API call failed:',error);throw error;}}return{getFieldSuggestions};}","map":{"version":3,"names":["useAIProvider","apiKey","process","env","REACT_APP_OPENAI_API_KEY","getFieldSuggestions","payload","Error","_payload$companyField","_payload$purchaseOrde","_payload$vendorFields","_payload$shipToFields","_data$choices$","_data$choices$$messag","response","fetch","method","headers","concat","body","JSON","stringify","model","messages","role","content","companyFields","map","f","id","label","join","purchaseOrderFields","vendorFields","shipToFields","temperature","max_tokens","ok","_errorData$error","errorData","json","error","message","statusText","data","choices","suggestions","parse","parseError","console"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/hooks/useAIProvider.js"],"sourcesContent":["// AI provider hook - uses ChatGPT API directly\n// Set REACT_APP_OPENAI_API_KEY in your .env file to keep the key secure\n\nexport function useAIProvider() {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n\n  async function getFieldSuggestions(payload) {\n    if (!apiKey) {\n      throw new Error('OpenAI API key not configured. Set REACT_APP_OPENAI_API_KEY in your .env file');\n    }\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [\n            {\n              role: 'system',\n              content: `You are a helpful assistant that fills out purchase order forms. \n              Analyze the provided fields and return realistic, business-appropriate values.\n              Return ONLY a JSON object with field IDs as keys and suggested values as strings.\n              Example: {\"company-name\": \"Acme Corporation\", \"po-number\": \"PO-2024-001\"}`\n            },\n            {\n              role: 'user',\n              content: `Please fill out these purchase order fields with realistic business data:\n              Company Fields: ${payload.companyFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Purchase Order Fields: ${payload.purchaseOrderFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Vendor Fields: ${payload.vendorFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              Ship To Fields: ${payload.shipToFields?.map(f => `${f.id}: ${f.label}`).join(', ')}\n              \n              Return only valid JSON with field IDs as keys.`\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 1000\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);\n      }\n\n      const data = await response.json();\n      const content = data.choices[0]?.message?.content;\n      \n      if (!content) {\n        throw new Error('No response content from OpenAI');\n      }\n\n      // Parse the JSON response from ChatGPT\n      try {\n        const suggestions = JSON.parse(content);\n        return { suggestions };\n      } catch (parseError) {\n        console.error('Failed to parse OpenAI response:', content);\n        throw new Error('Invalid JSON response from AI - please try again');\n      }\n    } catch (error) {\n      console.error('OpenAI API call failed:', error);\n      throw error;\n    }\n  }\n\n  return { getFieldSuggestions };\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}