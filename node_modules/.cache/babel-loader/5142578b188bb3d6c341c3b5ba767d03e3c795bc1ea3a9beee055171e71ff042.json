{"ast":null,"code":"import _objectSpread from\"/Users/waleed/Documents/GitHub/Cadbury3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\nimport{processFormData}from'./FormDataMapper';// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData){var _fieldOrderData$compa,_fieldOrderData$purch,_formData$companyFiel,_data$companyFields,_fieldOrderData$compa2,_fieldOrderData$compa3;let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// DEBUG: Log that we're using the DYNAMIC ID template\nconsole.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');console.log('📅 Template updated at:',new Date().toISOString());console.log('📊 Raw form data received:',formData);// Process and validate form data using the FormDataMapper\nlet processedData;try{processedData=processFormData(formData,{calculateTotals:options.calculateTotals!==false,validate:options.validate!==false,formatForXML:true,throwOnValidationError:options.throwOnValidationError||false});console.log('📊 Processed form data:',processedData);}catch(error){console.error('❌ Form data processing failed:',error);if(options.throwOnValidationError){throw error;}// Fallback to using raw data\nprocessedData=formData||{};}// Merge processed data with original so ad-hoc fields (totals, shipping, UI line item keys) survive\n// Prefer original ad-hoc keys when present (they reflect the live DOM at export time)\nconst data=_objectSpread(_objectSpread({},processedData||{}),formData||{});// Normalize line items to expose both key styles expected by template rendering\nif(Array.isArray(data.lineItems)){data.lineItems=data.lineItems.map(row=>{var _ref,_row$quantity,_ref2,_row$unitPrice,_ref3,_row$total,_row$qty,_row$rate,_row$amount,_row$quantity2,_row$unitPrice2,_row$total2;const quantity=(_ref=(_row$quantity=row.quantity)!==null&&_row$quantity!==void 0?_row$quantity:row.qty)!==null&&_ref!==void 0?_ref:'';const unitPrice=(_ref2=(_row$unitPrice=row.unitPrice)!==null&&_row$unitPrice!==void 0?_row$unitPrice:row.rate)!==null&&_ref2!==void 0?_ref2:'';const total=(_ref3=(_row$total=row.total)!==null&&_row$total!==void 0?_row$total:row.amount)!==null&&_ref3!==void 0?_ref3:'';return _objectSpread(_objectSpread({},row),{},{qty:(_row$qty=row.qty)!==null&&_row$qty!==void 0?_row$qty:quantity!==''?String(quantity):'',rate:(_row$rate=row.rate)!==null&&_row$rate!==void 0?_row$rate:unitPrice!==''?String(unitPrice):'',amount:(_row$amount=row.amount)!==null&&_row$amount!==void 0?_row$amount:total!==''?String(total):'',quantity:(_row$quantity2=row.quantity)!==null&&_row$quantity2!==void 0?_row$quantity2:quantity!==''?Number(String(quantity).replace(/[$,]/g,'')):0,unitPrice:(_row$unitPrice2=row.unitPrice)!==null&&_row$unitPrice2!==void 0?_row$unitPrice2:unitPrice!==''?Number(String(unitPrice).replace(/[$,]/g,'')):0,total:(_row$total2=row.total)!==null&&_row$total2!==void 0?_row$total2:total!==''?Number(String(total).replace(/[$,]/g,'')):0});});}// IMPORTANT: For field ordering, use the original formData to preserve drag-and-drop order\nconst fieldOrderData=_objectSpread(_objectSpread({},data),{},{companyFields:formData.companyFields||data.companyFields||[],purchaseOrderFields:formData.purchaseOrderFields||data.purchaseOrderFields||[],vendorFields:formData.vendorFields||data.vendorFields||[],shipToFields:formData.shipToFields||data.shipToFields||[]});// DEBUG: Log field order data creation\nconsole.log('🔍 DEBUG: fieldOrderData created with:');console.log('🔍 DEBUG: - companyFields:',(_fieldOrderData$compa=fieldOrderData.companyFields)===null||_fieldOrderData$compa===void 0?void 0:_fieldOrderData$compa.map(f=>({id:f.id,label:f.label})));console.log('🔍 DEBUG: - purchaseOrderFields:',(_fieldOrderData$purch=fieldOrderData.purchaseOrderFields)===null||_fieldOrderData$purch===void 0?void 0:_fieldOrderData$purch.map(f=>({id:f.id,label:f.label})));console.log('🔍 DEBUG: - formData.companyFields:',(_formData$companyFiel=formData.companyFields)===null||_formData$companyFiel===void 0?void 0:_formData$companyFiel.map(f=>({id:f.id,label:f.label})));console.log('🔍 DEBUG: - data.companyFields:',(_data$companyFields=data.companyFields)===null||_data$companyFields===void 0?void 0:_data$companyFields.map(f=>({id:f.id,label:f.label})));// VALIDATION: Ensure field order data is robust and independent of section order\nconsole.log('🔍 DEBUG: Field order data validation:');console.log('🔍 DEBUG: - fieldOrderData.companyFields length:',(_fieldOrderData$compa2=fieldOrderData.companyFields)===null||_fieldOrderData$compa2===void 0?void 0:_fieldOrderData$compa2.length);console.log('🔍 DEBUG: - fieldOrderData.companyFields is array:',Array.isArray(fieldOrderData.companyFields));console.log('🔍 DEBUG: - fieldOrderData.companyFields IDs:',(_fieldOrderData$compa3=fieldOrderData.companyFields)===null||_fieldOrderData$compa3===void 0?void 0:_fieldOrderData$compa3.map(f=>f.id));// Ensure field order data is always available and valid\nif(!Array.isArray(fieldOrderData.companyFields)||fieldOrderData.companyFields.length===0){console.warn('⚠️ WARNING: companyFields is not available or empty, this may cause field order issues');}// Helper function to safely get field values with fallbacks (for simple fields)\nconst getFieldValue=function(fieldName){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';return data[fieldName]||defaultValue;};// Enhanced helper function to get field values by dynamic ID or static fallback\nconst getDynamicFieldValue=function(fieldArray,possibleIds){let defaultValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';if(!fieldArray||!Array.isArray(fieldArray)){return defaultValue;}// Try each possible ID in order of preference\nfor(const fieldId of possibleIds){const field=fieldArray.find(f=>f.id===fieldId);if(field&&field.value){return field.value;}}return defaultValue;};// Helper function to get company field values with dynamic ID support\nconst getCompanyFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.companyFields&&Array.isArray(data.companyFields)){// First try the static ID, then try dynamic IDs that might have been generated\nconst possibleIds=[staticId,\"company-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.companyFields.filter(f=>f.id.includes(staticId.replace('company-',''))).map(f=>f.id)];return getDynamicFieldValue(data.companyFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get purchase order field values with dynamic ID support\nconst getPOFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.purchaseOrderFields&&Array.isArray(data.purchaseOrderFields)){const possibleIds=[staticId,\"po-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.purchaseOrderFields.filter(f=>f.id.includes(staticId.replace('po-',''))).map(f=>f.id)];return getDynamicFieldValue(data.purchaseOrderFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get vendor field values with dynamic ID support\nconst getVendorFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.vendorFields&&Array.isArray(data.vendorFields)){const possibleIds=[staticId,\"vendor-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.vendorFields.filter(f=>f.id.includes(staticId.replace('vendor-',''))).map(f=>f.id)];return getDynamicFieldValue(data.vendorFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get ship-to field values with dynamic ID support\nconst getShipToFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.shipToFields&&Array.isArray(data.shipToFields)){const possibleIds=[staticId,\"ship-to-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.shipToFields.filter(f=>f.id.includes(staticId.replace('ship-to-',''))).map(f=>f.id)];return getDynamicFieldValue(data.shipToFields,possibleIds,defaultValue);}return defaultValue;};// Helper function to get totals field values with dynamic ID support\nconst getTotalsFieldValue=function(staticId){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(data.totalsFields&&Array.isArray(data.totalsFields)){const possibleIds=[staticId,\"totals-field-\".concat(staticId),\"\".concat(staticId,\"-\").concat(Date.now()),...data.totalsFields.filter(f=>f.id.includes(staticId)).map(f=>f.id)];return getDynamicFieldValue(data.totalsFields,possibleIds,defaultValue);}return defaultValue;};// --------------------------------------------------------------------------\n// Generic label+value formatter for dynamic fields across sections\n// Ensures fields like \"Tax ID Number\" render as \"Tax ID Number: 123...\"\n// Avoids double-prefixing when the value already starts with the label/prefix\nconst formatFieldWithLabel=(field,rawValue)=>{const value=(rawValue!==null&&rawValue!==void 0?rawValue:'').toString();const labelText=((field===null||field===void 0?void 0:field.label)||(field===null||field===void 0?void 0:field.id)||'').toString().replace(/:\\s*$/,'').trim();if(!labelText)return value;// If value already starts with the label or a known prefix, don't double prefix\nconst lowered=value.toLowerCase();const loweredLabel=labelText.toLowerCase();if(lowered.startsWith(\"\".concat(loweredLabel,\":\"))||lowered.startsWith('phone:')||lowered.startsWith('fax:')||lowered.startsWith('website:')){return value||labelText;// if empty, show just label\n}if(!value)return labelText;// show label alone if no value\nreturn\"\".concat(labelText,\": \").concat(value);};// ============================================================================\n// MODULAR XML BUILDER FUNCTIONS\n// ============================================================================\n// Build Company Information XML with dynamic field ordering (same pattern as section swapping)y\nconst buildCompanyXML=function(){var _data$fieldOrder,_data$sectionOrder;let position=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'left';// Get company fields from fieldOrderData to preserve drag-and-drop order\nconst companyFields=fieldOrderData.companyFields||[];// CRITICAL: Get field order from data (same pattern as section order)\nconst fieldOrder=((_data$fieldOrder=data.fieldOrder)===null||_data$fieldOrder===void 0?void 0:_data$fieldOrder.company)||companyFields.map(f=>f.id);console.log('🔀 Building company XML with dynamic field ordering');console.log('🔀 Company fields received from data:',companyFields.length);console.log('🔀 Company fields IDs in current order:',companyFields.map(f=>f.id));console.log('🔀 Company fields labels in current order:',companyFields.map(f=>f.label));console.log('🔀 Company fields values in current order:',companyFields.map(f=>f.value));console.log('🔀 Field order from data:',fieldOrder);// CRITICAL: Ensure field order is completely independent of section order\n// The field order should be preserved exactly as it appears in fieldOrderData.companyFields\n// regardless of whether this section is on the left or right\nconsole.log('🔍 DEBUG: Field order independence verification:');console.log('🔍 DEBUG: - Current section order:',(_data$sectionOrder=data.sectionOrder)===null||_data$sectionOrder===void 0?void 0:_data$sectionOrder.sections1And2);console.log('🔍 DEBUG: - Company fields order (should be independent):',companyFields.map(f=>({id:f.id,label:f.label,position:companyFields.indexOf(f)})));// CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\nconst orderedCompanyFields=fieldOrder.map(fieldId=>{const field=companyFields.find(f=>f.id===fieldId);if(!field){console.warn(\"\\u26A0\\uFE0F WARNING: Field with ID \".concat(fieldId,\" not found in companyFields\"));return null;}return field;}).filter(Boolean);// Remove any null fields\nconsole.log('🔀 Ordered company fields for XML generation:',orderedCompanyFields.map(f=>({id:f.id,label:f.label,position:orderedCompanyFields.indexOf(f)})));// Build rows dynamically based on ordered field order (same as section swapping)\nconst fieldRows=orderedCompanyFields.map((field,index)=>{const fieldValue=field.value||field.placeholder||'';const isHeader=field.id==='company-name';console.log(\"\\uD83D\\uDD00 Processing field \".concat(index,\":\"),{id:field.id,label:field.label,value:fieldValue,isHeader,position:index});if(isHeader){const row=\"<tr><td class=\\\"header-company\\\" style=\\\"text-align: left;\\\" data-field=\\\"\".concat(field.id,\"\\\">\").concat(fieldValue,\"</td></tr>\");console.log(\"\\uD83D\\uDD00 Generated header row for \".concat(field.id,\":\"),row);return row;}else{// Prefix generic dynamic fields with their label (except known special cases handled by formatter)\nconst displayText=formatFieldWithLabel(field,fieldValue);const row=\"<tr><td style=\\\"text-align: left;\\\" data-field=\\\"\".concat(field.id,\"\\\">\").concat(displayText,\"</td></tr>\");console.log(\"\\uD83D\\uDD00 Generated regular row for \".concat(field.id,\":\"),row);return row;}}).join('');console.log('🔀 Final generated fieldRows:',fieldRows);// Side-aware padding to keep spacing consistent when swapped\nconst companyTdPadding=position==='left'?'padding-right: 24px;':'padding-left: 36px;';const result=\"\\n      <td style=\\\"width: 65%; \".concat(companyTdPadding,\"\\\" data-section=\\\"company-info\\\">\\n        <table>\\n          \").concat(fieldRows,\"\\n        </table>\\n      </td>\\n    \");console.log('🔀 Final company XML result:',result);return result;};// Build Purchase Order Information XML\nconst buildPurchaseOrderXML=function(){var _data$fieldOrder2;let position=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'right';// Get purchase order fields from fieldOrderData to preserve drag-and-drop order\nconst purchaseOrderFields=fieldOrderData.purchaseOrderFields||[];// CRITICAL: Get field order from data (same pattern as section order)\nconst fieldOrder=((_data$fieldOrder2=data.fieldOrder)===null||_data$fieldOrder2===void 0?void 0:_data$fieldOrder2.purchaseOrder)||purchaseOrderFields.map(f=>f.id);console.log('🔀 Building purchase order XML with dynamic field ordering');console.log('🔀 Purchase order fields received from data:',purchaseOrderFields.length);console.log('🔀 Purchase order fields IDs in current order:',purchaseOrderFields.map(f=>f.id));console.log('🔀 Field order from data:',fieldOrder);// CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\nconst orderedPOFields=fieldOrder.map(fieldId=>{const field=purchaseOrderFields.find(f=>f.id===fieldId);if(!field){console.warn(\"\\u26A0\\uFE0F WARNING: Field with ID \".concat(fieldId,\" not found in purchaseOrderFields\"));return null;}return field;}).filter(Boolean);// Remove any null fields\nconsole.log('🔀 Ordered purchase order fields for XML generation:',orderedPOFields.map(f=>({id:f.id,label:f.label,position:orderedPOFields.indexOf(f)})));// Build XML based on ordered fields\nconst fieldRows=orderedPOFields.map((field,index)=>{// Prefer captured value; fallback to template getters to ensure content always present\nconst isTitle=field.id==='po-title';if(isTitle){const value=field.value||getPOFieldValue('po-title','PURCHASE ORDER');return\"<tr><td class=\\\"header-title\\\" style=\\\"text-align: right;\\\" data-field=\\\"\".concat(field.id,\"\\\">\").concat(value,\"</td></tr>\");}if(field.id==='po-date'){const value=field.value||getPOFieldValue('po-date','MM/DD/YYYY');return\"<tr><td style=\\\"text-align: right;\\\"><table style=\\\"width: 100%;\\\"><tr><td class=\\\"header-info\\\" style=\\\"width: 30%; text-align: left;\\\"><b>DATE</b></td><td class=\\\"header-info\\\" style=\\\"width: 70%; text-align: left;\\\" data-field=\\\"po-date\\\">\".concat(value,\"</td></tr></table></td></tr>\");}if(field.id==='po-number'){const value=field.value||getPOFieldValue('po-number','[PO Number]');return\"<tr><td style=\\\"text-align: right;\\\"><table style=\\\"width: 100%;\\\"><tr><td class=\\\"header-info\\\" style=\\\"width: 30%; text-align: left;\\\"><b>PO #</b></td><td class=\\\"header-info\\\" style=\\\"width: 70%; text-align: left;\\\" data-field=\\\"po-number\\\">\".concat(value,\"</td></tr></table></td></tr>\");}const genericValue=field.value||getPOFieldValue(field.id,'');const displayText=formatFieldWithLabel(field,genericValue);return\"<tr><td style=\\\"text-align: right;\\\" data-field=\\\"\".concat(field.id,\"\\\">\").concat(displayText,\"</td></tr>\");}).join('');// Side-aware padding: when PO is on the left, push it away from the right column\nconst poTdPadding=position==='left'?'padding-right: 56px;':'padding-left: 28px;';return\"\\n      <td style=\\\"width: 35%; \".concat(poTdPadding,\"\\\" align=\\\"right\\\" data-section=\\\"purchase-order-info\\\">\\n        <table>\\n          \").concat(fieldRows,\"\\n        </table>\\n      </td>\\n    \");};// Build Vendor-ShipTo Section XML with dynamic ordering\nconst buildVendorShipToSectionXML=()=>{var _data$sectionOrder2,_data$sectionOrder3;// Get section order from data, default to [section3, section4] if not provided\nconst sectionOrder=((_data$sectionOrder2=data.sectionOrder)===null||_data$sectionOrder2===void 0?void 0:_data$sectionOrder2.sections3And4)||['section3','section4'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building vendor-shipTo section with order:',{leftSection,rightSection});console.log('🔀 sections3And4 array:',(_data$sectionOrder3=data.sectionOrder)===null||_data$sectionOrder3===void 0?void 0:_data$sectionOrder3.sections3And4);let leftColumn,rightColumn;if(leftSection==='section3'){// Default order: Vendor left, Ship To right\nleftColumn=buildVendorXML();rightColumn=buildShipToXML();console.log('🔀 Using default order: Vendor left, Ship To right');}else{// Swapped order: Ship To left, Vendor right\nleftColumn=buildShipToXML();rightColumn=buildVendorXML();console.log('🔀 Using swapped order: Ship To left, Vendor right');}return\"\\n      <table style=\\\"margin-top: 20px;\\\" data-section=\\\"vendor-ship-to\\\">\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\nconst buildShippingDetailsXML=()=>{return\"\\n      <table style=\\\"margin-top: 15px;\\\" data-section=\\\"shipping-details\\\">\\n        <tr>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">REQUISITIONER</td>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">SHIP VIA</td>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">F.O.B.</td>\\n          <td class=\\\"section-header\\\" style=\\\"width: 25%;\\\">SHIPPING TERMS</td>\\n        </tr>\\n        <tr>\\n          <td class=\\\"section-content\\\" data-field=\\\"requisitioner\\\">\".concat(getShippingFieldValue('requisitioner','[Requisitioner]'),\"</td>\\n          <td class=\\\"section-content\\\" data-field=\\\"shipVia\\\">\").concat(getShippingFieldValue('shipVia','[Ship Via]'),\"</td>\\n          <td class=\\\"section-content\\\" data-field=\\\"fob\\\">\").concat(getShippingFieldValue('fob','[FOB]'),\"</td>\\n          <td class=\\\"section-content\\\" data-field=\\\"shippingTerms\\\">\").concat(getShippingFieldValue('shippingTerms','[Shipping Terms]'),\"</td>\\n        </tr>\\n      </table>\\n    \");};// Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\nconst buildVendorShipToAndShippingDetailsXML=()=>{var _data$sectionOrder4,_data$sectionOrder5;// Get section order from data, default to [sections3And4, sections5And6] if not provided\nconst sectionOrder=((_data$sectionOrder4=data.sectionOrder)===null||_data$sectionOrder4===void 0?void 0:_data$sectionOrder4.sections3And4And5And6)||['sections3And4','sections5And6'];const topSection=sectionOrder[0];const bottomSection=sectionOrder[1];console.log('🔀 Building vendor-shipTo + shipping details with order:',{topSection,bottomSection});console.log('🔀 sections3And4And5And6 array:',(_data$sectionOrder5=data.sectionOrder)===null||_data$sectionOrder5===void 0?void 0:_data$sectionOrder5.sections3And4And5And6);let topContent,bottomContent;if(topSection==='sections3And4'){// Default order: Vendor-ShipTo on top, Shipping Details below\ntopContent=buildVendorShipToSectionXML();bottomContent=buildShippingDetailsXML();console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');}else{// Swapped order: Shipping Details on top, Vendor-ShipTo below\ntopContent=buildShippingDetailsXML();bottomContent=buildVendorShipToSectionXML();console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');}return\"\\n      \".concat(topContent,\"\\n      \").concat(bottomContent,\"\\n    \");};// Build Header Section XML (Company + Purchase Order) with dynamic ordering\nconst buildHeaderSectionXML=()=>{var _data$sectionOrder6,_data$sectionOrder7,_data$sectionOrder8,_data$sectionOrder9,_data$sectionOrder9$s,_data$sectionOrder0,_fieldOrderData$compa4,_fieldOrderData$purch2;// Get section order from data, default to [section1, section2] if not provided\nconst sectionOrder=((_data$sectionOrder6=data.sectionOrder)===null||_data$sectionOrder6===void 0?void 0:_data$sectionOrder6.sections1And2)||['section1','section2'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building header section with order:',{leftSection,rightSection});console.log('🔀 Full sectionOrder data:',data.sectionOrder);console.log('🔀 Full data object keys:',Object.keys(data));console.log('🔀 sections1And2 array:',(_data$sectionOrder7=data.sectionOrder)===null||_data$sectionOrder7===void 0?void 0:_data$sectionOrder7.sections1And2);console.log('🔀 sections1And2 type:',typeof((_data$sectionOrder8=data.sectionOrder)===null||_data$sectionOrder8===void 0?void 0:_data$sectionOrder8.sections1And2));console.log('🔀 sections1And2 length:',(_data$sectionOrder9=data.sectionOrder)===null||_data$sectionOrder9===void 0?void 0:(_data$sectionOrder9$s=_data$sectionOrder9.sections1And2)===null||_data$sectionOrder9$s===void 0?void 0:_data$sectionOrder9$s.length);console.log('🔀 sections1And2 values:',JSON.stringify((_data$sectionOrder0=data.sectionOrder)===null||_data$sectionOrder0===void 0?void 0:_data$sectionOrder0.sections1And2));// DEBUG: Check field order data when building header\nconsole.log('🔍 DEBUG: fieldOrderData.companyFields when building header:',(_fieldOrderData$compa4=fieldOrderData.companyFields)===null||_fieldOrderData$compa4===void 0?void 0:_fieldOrderData$compa4.map(f=>({id:f.id,label:f.label})));console.log('🔍 DEBUG: fieldOrderData.purchaseOrderFields when building header:',(_fieldOrderData$purch2=fieldOrderData.purchaseOrderFields)===null||_fieldOrderData$purch2===void 0?void 0:_fieldOrderData$purch2.map(f=>({id:f.id,label:f.label})));// IMPORTANT: Field order should be completely independent of section order\n// Always use the current field order from fieldOrderData, regardless of section position\nconsole.log('🔍 DEBUG: Ensuring field order independence from section order');let leftColumn,rightColumn;if(leftSection==='section1'){// Company on left, Purchase Order on right\nleftColumn=buildCompanyXML('left');rightColumn=buildPurchaseOrderXML('right');console.log('🔀 Using default order: Company left, Purchase Order right');}else{// Purchase Order on left, Company on right (sections swapped)\nleftColumn=buildPurchaseOrderXML('left');rightColumn=buildCompanyXML('right');console.log('🔀 Using swapped order: Purchase Order left, Company right');}// DEBUG: Verify that field order is preserved regardless of section position\nconsole.log('🔍 DEBUG: Field order verification - Company fields should maintain custom order');console.log('🔍 DEBUG: Final company XML will use fieldOrderData.companyFields order');return\"\\n      <table>\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Build Vendor Information XML (dynamic label prefixing for all fields)\nconst buildVendorXML=()=>{var _data$fieldOrder3;// Get field order for vendor; fallback to current array order if not provided\nconst vendorFields=fieldOrderData.vendorFields||[];const vendorFieldOrder=((_data$fieldOrder3=data.fieldOrder)===null||_data$fieldOrder3===void 0?void 0:_data$fieldOrder3.vendor)||vendorFields.map(f=>f.id);const orderedVendorFields=vendorFieldOrder.map(fieldId=>vendorFields.find(f=>f.id===fieldId)).filter(Boolean);const rows=orderedVendorFields.map(f=>{const raw=f.value||getVendorFieldValue(f.id,'');const display=formatFieldWithLabel(f,raw);return\"<span data-field=\\\"\".concat(f.id,\"\\\">\").concat(display,\"</span>\");}).join('<br/>');return\"\\n      <td style=\\\"width: 50%;\\\" data-subsection=\\\"vendor\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"section-header\\\">VENDOR</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"section-content\\\">\".concat(rows,\"</td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Ship To Information XML (dynamic label prefixing for all fields)\nconst buildShipToXML=()=>{var _data$fieldOrder4;// Get field order for ship-to; fallback to current array order if not provided\nconst shipToFields=fieldOrderData.shipToFields||[];const shipToFieldOrder=((_data$fieldOrder4=data.fieldOrder)===null||_data$fieldOrder4===void 0?void 0:_data$fieldOrder4.shipTo)||shipToFields.map(f=>f.id);const orderedShipToFields=shipToFieldOrder.map(fieldId=>shipToFields.find(f=>f.id===fieldId)).filter(Boolean);const rows=orderedShipToFields.map(f=>{const raw=f.value||getShipToFieldValue(f.id,'');const display=formatFieldWithLabel(f,raw);return\"<span data-field=\\\"\".concat(f.id,\"\\\">\").concat(display,\"</span>\");}).join('<br/>');return\"\\n      <td style=\\\"width: 50%;\\\" data-subsection=\\\"ship-to\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"section-header\\\">SHIP TO</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"section-content\\\">\".concat(rows,\"</td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Vendor/Ship-To Section XML with dynamic ordering\nconst buildVendorShipToXML=()=>{var _data$sectionOrder1;// Get section order from data, default to [section3, section4] if not provided\nconst sectionOrder=((_data$sectionOrder1=data.sectionOrder)===null||_data$sectionOrder1===void 0?void 0:_data$sectionOrder1.sections3And4)||['section3','section4'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building vendor/ship-to section with order:',{leftSection,rightSection});let leftColumn,rightColumn;if(leftSection==='section3'){leftColumn=buildVendorXML();rightColumn=buildShipToXML();}else{leftColumn=buildShipToXML();rightColumn=buildVendorXML();}return\"\\n      <table style=\\\"margin-top: 20px;\\\" data-section=\\\"vendor-ship-to\\\">\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Build Line Items XML with dynamic column ordering\nconst buildLineItemsXML=()=>{var _data$sectionOrder10,_data$sectionOrder11;// Get column order from data, default to standard order if not provided\nconst columnOrder=((_data$sectionOrder10=data.sectionOrder)===null||_data$sectionOrder10===void 0?void 0:_data$sectionOrder10.lineItemColumns)||['itemNumber','description','qty','rate','amount'];console.log('🔀 Building line items with column order:',columnOrder);console.log('🔀 Line items data:',data.lineItems);console.log('🔀 Column order from state:',(_data$sectionOrder11=data.sectionOrder)===null||_data$sectionOrder11===void 0?void 0:_data$sectionOrder11.lineItemColumns);// Column configuration mapping\nconst columnConfig={itemNumber:{label:'Item#',colSpan:3,field:'itemNumber'},description:{label:'Description',colSpan:12,field:'description'},qty:{label:'Qty',colSpan:2,field:'qty'},rate:{label:'Rate',colSpan:3,field:'rate'},amount:{label:'Amount',colSpan:3,field:'amount'}};// Build header row\nconst headerRow=columnOrder.map(columnId=>{const config=columnConfig[columnId];return\"<td class=\\\"item-header\\\" colSpan=\\\"\".concat(config.colSpan,\"\\\">\").concat(config.label,\"</td>\");}).join('');// Build data rows using actual line item data\nconst lineItems=data.lineItems||[];const dataRows=Array(5).fill(0).map((_,rowIndex)=>{const rowData=lineItems[rowIndex]||{};const rowCells=columnOrder.map(columnId=>{const config=columnConfig[columnId];// Resolve value with fallbacks between UI keys and numeric keys\nlet fieldValue=rowData[columnId];if(fieldValue===undefined||fieldValue===null||fieldValue===''){if(columnId==='qty')fieldValue=rowData.quantity;else if(columnId==='rate')fieldValue=rowData.unitPrice;else if(columnId==='amount')fieldValue=rowData.total;}if(fieldValue===undefined||fieldValue===null||fieldValue==='')fieldValue='-';return\"<td colSpan=\\\"\".concat(config.colSpan,\"\\\">\").concat(fieldValue,\"</td>\");}).join('');return\"<tr data-row-id=\\\"line-item-\".concat(rowIndex,\"\\\" data-row-index=\\\"\").concat(rowIndex,\"\\\">\").concat(rowCells,\"</tr>\");}).join('');return\"\\n      <table style=\\\"margin-top: 15px;\\\" data-section=\\\"line-items\\\">\\n        <tr>\\n          \".concat(headerRow,\"\\n        </tr>\\n        \").concat(dataRows,\"\\n      </table>\\n    \");};// Build Comments Section XML\nconst buildCommentsXML=()=>{const comments=getFieldValue('comments','[Enter comments or special instructions...]');return\"\\n      <td style=\\\"width: 50%;\\\" data-section=\\\"comments\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"comments-header\\\">Comments or Special Instructions</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"comments-content\\\">\".concat(comments,\"</td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Totals Section XML\nconst buildTotalsXML=()=>{// Prefer values passed on formData (export payload) → then DOM → then totalsFields\nconst prefer=(key,fallbackId)=>data[key]&&String(data[key]).trim()||getTotalFieldValue(fallbackId,'')||getTotalsFieldValue(fallbackId,'');const subtotal=prefer('subtotal','subtotal')||'$0.00';const tax=prefer('tax','tax')||'$0.00';const shipping=prefer('shipping','shipping')||'$0.00';const other=prefer('other','other')||'$0.00';const total=prefer('total','total')||'$0.00';// Use table rows/cells for maximum NetSuite/BFO compatibility (avoid nested divs)\nreturn\"\\n      <td style=\\\"width: 50%;\\\" data-section=\\\"totals\\\">\\n        <table>\\n          <tr>\\n            <td class=\\\"section-header\\\" colspan=\\\"2\\\">Totals</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"total-label\\\">SUBTOTAL:</td>\\n            <td class=\\\"total-amount\\\" align=\\\"right\\\">\".concat(subtotal,\"</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"total-label\\\">TAX:</td>\\n            <td class=\\\"total-amount\\\" align=\\\"right\\\">\").concat(tax,\"</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"total-label\\\">SHIPPING:</td>\\n            <td class=\\\"total-amount\\\" align=\\\"right\\\">\").concat(shipping,\"</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"total-label\\\">OTHER:</td>\\n            <td class=\\\"total-amount\\\" align=\\\"right\\\">\").concat(other,\"</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"total-label\\\">TOTAL:</td>\\n            <td class=\\\"total-amount\\\" align=\\\"right\\\">\").concat(total,\"</td>\\n          </tr>\\n        </table>\\n      </td>\\n    \");};// Build Comments and Totals Section XML with dynamic ordering\nconst buildCommentsTotalsXML=()=>{var _data$sectionOrder12;// Get section order from data, default to [section8, section9] if not provided\nconst sectionOrder=((_data$sectionOrder12=data.sectionOrder)===null||_data$sectionOrder12===void 0?void 0:_data$sectionOrder12.sections8And9)||['section8','section9'];const leftSection=sectionOrder[0];const rightSection=sectionOrder[1];console.log('🔀 Building comments/totals section with order:',{leftSection,rightSection});let leftColumn,rightColumn;if(leftSection==='section8'){leftColumn=buildCommentsXML();rightColumn=buildTotalsXML();}else{leftColumn=buildTotalsXML();rightColumn=buildCommentsXML();}return\"\\n      <table style=\\\"margin-top: 15px;\\\" data-section=\\\"comments-totals\\\">\\n        <tr>\\n          \".concat(leftColumn,\"\\n          \").concat(rightColumn,\"\\n        </tr>\\n      </table>\\n    \");};// Helper function to get shipping details field values with dynamic ID support\nconst getShippingFieldValue=function(fieldType){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const possibleSelectors=[\".shipping-field-\".concat(fieldType,\" .editable-field\"),\".shipping-field[data-field=\\\"\".concat(fieldType,\"\\\"] .editable-field\"),\".shipping-\".concat(fieldType,\" .editable-field\"),\"#shipping-\".concat(fieldType),\"[data-shipping-field=\\\"\".concat(fieldType,\"\\\"]\")];// Try to get value from DOM or data object\nif(data[fieldType]){return data[fieldType];}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Helper function to get line item values with dynamic ID support\nconst getLineItemValue=function(rowIndex,fieldType){let defaultValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';// Map template field names to live table data-column ids\nconst colIdMap={quantity:'qty',unitPrice:'rate',total:'amount'};const colId=colIdMap[fieldType]||fieldType;// itemNumber, description pass through\nconst possibleSelectors=[\"#line-item-\".concat(rowIndex,\"-\").concat(fieldType),\".line-item-row[data-row=\\\"\".concat(rowIndex,\"\\\"] .\").concat(colId,\"-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") .\").concat(colId,\"-field .editable-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") td[data-column=\\\"\").concat(colId,\"\\\"] .editable-field\"),\".itemtable tbody tr:nth-child(\".concat(rowIndex+1,\") td:nth-child(\").concat(getColumnIndex(fieldType),\") .editable-field\")];// Try data object first\nif(data.lineItems&&data.lineItems[rowIndex]&&data.lineItems[rowIndex][fieldType]){return data.lineItems[rowIndex][fieldType];}// Try DOM selectors with debugging\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);const text=element?element.textContent.trim():'';try{console.debug('🔎 XML getLineItemValue',{rowIndex,fieldType,colId,selector,found:!!element,text});}catch(_unused){}if(text)return text;}return defaultValue;};// Helper function to get column index for line items\nconst getColumnIndex=fieldType=>{const columnMap={itemNumber:2,description:3,quantity:4,unitPrice:5,total:6};return columnMap[fieldType]||1;};// Helper function to get totals field values with dynamic ID support\nconst getTotalFieldValue=function(fieldType){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const possibleSelectors=[\"#total-\".concat(fieldType),\".total-\".concat(fieldType,\" .editable-field\"),\".total-row[data-field=\\\"\".concat(fieldType,\"\\\"] .editable-field\"),\".totals-section .\".concat(fieldType,\"-field .editable-field\"),// Subtotal and total are displayed as calculated spans\n\".totals-section .total-row[data-field=\\\"subtotal\\\"] .calculated-field\",\".totals-section .total-row[data-field=\\\"total\\\"] .total-field\"];// Try data object first\nif(data[fieldType]){return data[fieldType];}// Try DOM selectors with debugging\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);const text=element?element.textContent.trim():'';try{console.debug('🔎 XML getTotalFieldValue',{fieldType,selector,found:!!element,text});}catch(_unused2){}if(text)return text;}return defaultValue;};// Helper function to get comments field value with dynamic ID support\nconst getCommentsValue=function(){let defaultValue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const possibleSelectors=['#comments-field','.comments-content .editable-field','.comments-section .editable-field','[data-field=\"comments\"]'];// Try data object first\nif(data.comments){return data.comments;}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Helper function to get contact info field value with dynamic ID support\nconst getContactInfoValue=function(){let defaultValue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const possibleSelectors=['#contact-info-field','.contact-section .editable-field','.contact-info .editable-field','[data-field=\"contactInfo\"]'];// Try data object first\nif(data.contactInfo){return data.contactInfo;}// Try DOM selectors\nfor(const selector of possibleSelectors){const element=document.querySelector(selector);if(element&&element.textContent.trim()){return element.textContent.trim();}}return defaultValue;};// Generate line items XML with dynamic ID support\nconst generateLineItemsXML=()=>{const maxRows=5;// Standard number of line item rows\n// Generate rows (either from data or empty placeholder rows)\nreturn Array(maxRows).fill(0).map((_,index)=>{// Try to get values using dynamic ID system\nconst itemNumber=getLineItemValue(index,'itemNumber','-');const description=getLineItemValue(index,'description','-');const quantity=getLineItemValue(index,'quantity','-');const unitPrice=getLineItemValue(index,'unitPrice','-');const total=getLineItemValue(index,'total','-');return\"\\n        <tr data-row-id=\\\"line-item-\".concat(index,\"\\\" data-row-index=\\\"\").concat(index,\"\\\">\\n            <td class=\\\"item-cell\\\" align=\\\"left\\\" colspan=\\\"3\\\" data-field=\\\"itemNumber\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(itemNumber,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"left\\\" colspan=\\\"12\\\" data-field=\\\"description\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(description,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"center\\\" colspan=\\\"2\\\" data-field=\\\"quantity\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(quantity,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"right\\\" colspan=\\\"3\\\" data-field=\\\"unitPrice\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(unitPrice,\"</td>\\n            <td class=\\\"item-cell\\\" align=\\\"right\\\" colspan=\\\"3\\\" data-field=\\\"total\\\" data-row=\\\"\").concat(index,\"\\\">\").concat(total,\"</td>\\n        </tr>\");}).join('');};// Generate the complete XML using the new template structure\nconst xml=\"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE pdf PUBLIC \\\"-//big.faceless.org//report\\\" \\\"report-1.1.dtd\\\">\\n<pdf>\\n<head>\\n    <meta name=\\\"title\\\" value=\\\"Purchase Order\\\"/>\\n    <meta name=\\\"author\\\" value=\\\"Purchase Order Generator\\\"/>\\n    <meta name=\\\"subject\\\" value=\\\"Purchase Order\\\"/>\\n    <meta name=\\\"creator\\\" value=\\\"Purchase Order Generator\\\"/>\\n    <meta name=\\\"producer\\\" value=\\\"Purchase Order Generator\\\"/>\\n    <meta name=\\\"creationDate\\\" value=\\\"\".concat(new Date().toISOString(),\"\\\"/>\\n    <meta name=\\\"modDate\\\" value=\\\"\").concat(new Date().toISOString(),\"\\\"/>\\n    <link name=\\\"NotoSans\\\" type=\\\"font\\\" subtype=\\\"truetype\\\" src=\\\"${nsfont.NotoSans_Regular}\\\" src-bold=\\\"${nsfont.NotoSans_Bold}\\\" src-italic=\\\"${nsfont.NotoSans_Italic}\\\" src-bolditalic=\\\"${nsfont.NotoSans_BoldItalic}\\\" bytes=\\\"2\\\" />\\n    <style>\\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\\n        table { width: 100%; border-collapse: collapse; }\\n        .header-company { font-size: 14pt; font-weight: bold; }\\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\\n        .header-info { font-size: 10pt; }\\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\\n        .item-cell { padding: 6px; border: 1px solid #000; }\\n        .total-label { font-weight: bold; padding: 4px; }\\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\\n        .contact-info { font-size: 8pt; }\\n    </style>\\n</head>\\n<body padding=\\\"0.5in\\\" size=\\\"Letter\\\">\\n    \\n    \").concat(buildHeaderSectionXML(),\"\\n    \").concat(buildVendorShipToAndShippingDetailsXML(),\"\\n\\n\\n    \").concat(buildLineItemsXML(),\"\\n\\n\\n    \").concat(buildCommentsTotalsXML(),\"\\n\\n\\n\\n    <table style=\\\"margin-top: 20px;\\\" data-section=\\\"contact-signature\\\">\\n        <tr>\\n            <td class=\\\"contact-info\\\" style=\\\"width: 70%;\\\" data-field=\\\"contact-info\\\">\\n                \").concat(getContactInfoValue('For inquiries, please contact us'),\"\\n            </td>\\n            <td style=\\\"width: 30%; text-align: center;\\\" data-field=\\\"signature\\\">\\n                <table style=\\\"width: 100%;\\\">\\n                    <tr>\\n                        <td style=\\\"border-top: 1px solid #000; padding-top: 10px;\\\">\\n                            Authorized Signature\\n                        </td>\\n                    </tr>\\n                </table>\\n            </td>\\n        </tr>\\n    </table>\\n</body>\\n</pdf>\");console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');console.log('📄 XML preview (first 200 chars):',xml.substring(0,200));return xml;}// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate={companyInfo:{staticFields:['company-name','company-address','company-city-state','company-phone','company-fax','company-website'],dynamicPrefixes:['company-field-','company-'],dataAttribute:'data-section=\"company-info\"'},purchaseOrder:{staticFields:['po-title','po-date','po-number'],dynamicPrefixes:['po-field-','po-'],dataAttribute:'data-section=\"purchase-order-info\"'},vendor:{staticFields:['vendor-company','vendor-contact','vendor-address','vendor-city-state','vendor-phone','vendor-fax'],dynamicPrefixes:['vendor-field-','vendor-'],dataAttribute:'data-subsection=\"vendor\"'},shipTo:{staticFields:['ship-to-name','ship-to-company','ship-to-address','ship-to-city-state','ship-to-phone','ship-to-fax'],dynamicPrefixes:['ship-to-field-','ship-to-'],dataAttribute:'data-subsection=\"ship-to\"'},shipping:{staticFields:['requisitioner','shipVia','fob','shippingTerms'],dynamicPrefixes:['shipping-field-','shipping-'],dataAttribute:'data-section=\"shipping-details\"'},lineItems:{staticFields:['itemNumber','description','quantity','unitPrice','total'],dynamicPrefixes:['line-item-','item-'],dataAttribute:'data-section=\"line-items\"',maxRows:5},totals:{staticFields:['subtotal','tax','shipping','other','total'],dynamicPrefixes:['total-','totals-'],dataAttribute:'data-subsection=\"totals\"'},comments:{staticFields:['comments'],dynamicPrefixes:['comments-field-','comment-'],dataAttribute:'data-subsection=\"comments\"'},contact:{staticFields:['contactInfo'],dynamicPrefixes:['contact-info-field-','contact-'],dataAttribute:'data-section=\"contact-signature\"'}};// Export a simple function to get template structure\nexport function getTemplateStructure(){return purchaseOrderTemplate;}// Dynamic ID Generation Utilities\nexport const dynamicIdUtils={// Generate a new dynamic ID with timestamp and random component\ngenerateId:function(){let prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'field';let section=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'general';const timestamp=Date.now();const random=Math.random().toString(36).substr(2,9);return\"\".concat(section,\"-\").concat(prefix,\"-\").concat(timestamp,\"-\").concat(random);},// Generate multiple possible IDs for a field to try when looking up values\ngetPossibleIds:function(staticId){let section=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'unknown';const baseName=staticId.replace(/^(company-|po-|vendor-|ship-to-)/,'');return[staticId,// Try static ID first\n\"\".concat(section,\"-field-\").concat(staticId),\"\".concat(section,\"-\").concat(baseName),\"\".concat(staticId,\"-\").concat(Date.now()),\"field-\".concat(baseName),baseName];},// Validate if an ID follows our dynamic ID pattern\nisValidDynamicId:id=>{const dynamicPattern=/^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;return dynamicPattern.test(id);},// Extract the base field type from any ID (static or dynamic)\ngetFieldType:id=>{// Remove common prefixes and suffixes to get the core field type\nreturn id.replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/,'').replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/,'').replace(/^(field-)?/,'');},// Get section from ID\ngetSection:id=>{if(id.startsWith('company-'))return'company';if(id.startsWith('po-'))return'purchase-order';if(id.startsWith('vendor-'))return'vendor';if(id.startsWith('ship-to-'))return'ship-to';if(id.startsWith('shipping-'))return'shipping';if(id.startsWith('line-item-'))return'line-items';if(id.startsWith('total-'))return'totals';if(id.startsWith('comments-'))return'comments';if(id.startsWith('contact-'))return'contact';return'unknown';}};// Field Mapping Utilities\nexport const fieldMappingUtils={// Map all known static field IDs to their readable names\nstaticFieldNames:{// Company fields\n'company-name':'Company Name','company-address':'Street Address','company-city-state':'City, State, ZIP','company-phone':'Phone Number','company-fax':'Fax Number','company-website':'Website',// Purchase Order fields\n'po-title':'Purchase Order Title','po-date':'Date','po-number':'PO Number',// Vendor fields\n'vendor-company':'Vendor Company','vendor-contact':'Vendor Contact','vendor-address':'Vendor Address','vendor-city-state':'Vendor City/State','vendor-phone':'Vendor Phone','vendor-fax':'Vendor Fax',// Ship To fields\n'ship-to-name':'Ship To Name','ship-to-company':'Ship To Company','ship-to-address':'Ship To Address','ship-to-city-state':'Ship To City/State','ship-to-phone':'Ship To Phone','ship-to-fax':'Ship To Fax',// Shipping fields\n'requisitioner':'Requisitioner','shipVia':'Ship Via','fob':'F.O.B.','shippingTerms':'Shipping Terms',// Line item fields\n'itemNumber':'Item Number','description':'Description','quantity':'Quantity','unitPrice':'Unit Price','total':'Total',// Totals fields\n'subtotal':'Subtotal','tax':'Tax','shipping':'Shipping','other':'Other',// Other fields\n'comments':'Comments','contactInfo':'Contact Information'},// Get human-readable name for any field ID\ngetFieldName:id=>{const staticName=fieldMappingUtils.staticFieldNames[id];if(staticName)return staticName;// For dynamic IDs, try to extract the base field type\nconst fieldType=dynamicIdUtils.getFieldType(id);const staticFieldName=fieldMappingUtils.staticFieldNames[fieldType];if(staticFieldName)return staticFieldName;// Fallback: humanize the ID\nreturn id.replace(/[-_]/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase());},// Get all field IDs for a section\ngetFieldsForSection:section=>{const template=purchaseOrderTemplate[section];return template?template.staticFields:[];}};","map":{"version":3,"names":["processFormData","generatePurchaseOrderXML","formData","_fieldOrderData$compa","_fieldOrderData$purch","_formData$companyFiel","_data$companyFields","_fieldOrderData$compa2","_fieldOrderData$compa3","options","arguments","length","undefined","console","log","Date","toISOString","processedData","calculateTotals","validate","formatForXML","throwOnValidationError","error","data","_objectSpread","Array","isArray","lineItems","map","row","_ref","_row$quantity","_ref2","_row$unitPrice","_ref3","_row$total","_row$qty","_row$rate","_row$amount","_row$quantity2","_row$unitPrice2","_row$total2","quantity","qty","unitPrice","rate","total","amount","String","Number","replace","fieldOrderData","companyFields","purchaseOrderFields","vendorFields","shipToFields","f","id","label","warn","getFieldValue","fieldName","defaultValue","getDynamicFieldValue","fieldArray","possibleIds","fieldId","field","find","value","getCompanyFieldValue","staticId","concat","now","filter","includes","getPOFieldValue","getVendorFieldValue","getShipToFieldValue","getTotalsFieldValue","totalsFields","formatFieldWithLabel","rawValue","toString","labelText","trim","lowered","toLowerCase","loweredLabel","startsWith","buildCompanyXML","_data$fieldOrder","_data$sectionOrder","position","fieldOrder","company","sectionOrder","sections1And2","indexOf","orderedCompanyFields","Boolean","fieldRows","index","fieldValue","placeholder","isHeader","displayText","join","companyTdPadding","result","buildPurchaseOrderXML","_data$fieldOrder2","purchaseOrder","orderedPOFields","isTitle","genericValue","poTdPadding","buildVendorShipToSectionXML","_data$sectionOrder2","_data$sectionOrder3","sections3And4","leftSection","rightSection","leftColumn","rightColumn","buildVendorXML","buildShipToXML","buildShippingDetailsXML","getShippingFieldValue","buildVendorShipToAndShippingDetailsXML","_data$sectionOrder4","_data$sectionOrder5","sections3And4And5And6","topSection","bottomSection","topContent","bottomContent","buildHeaderSectionXML","_data$sectionOrder6","_data$sectionOrder7","_data$sectionOrder8","_data$sectionOrder9","_data$sectionOrder9$s","_data$sectionOrder0","_fieldOrderData$compa4","_fieldOrderData$purch2","Object","keys","JSON","stringify","_data$fieldOrder3","vendorFieldOrder","vendor","orderedVendorFields","rows","raw","display","_data$fieldOrder4","shipToFieldOrder","shipTo","orderedShipToFields","buildVendorShipToXML","_data$sectionOrder1","buildLineItemsXML","_data$sectionOrder10","_data$sectionOrder11","columnOrder","lineItemColumns","columnConfig","itemNumber","colSpan","description","headerRow","columnId","config","dataRows","fill","_","rowIndex","rowData","rowCells","buildCommentsXML","comments","buildTotalsXML","prefer","key","fallbackId","getTotalFieldValue","subtotal","tax","shipping","other","buildCommentsTotalsXML","_data$sectionOrder12","sections8And9","fieldType","possibleSelectors","selector","element","document","querySelector","textContent","getLineItemValue","colIdMap","colId","getColumnIndex","text","debug","found","_unused","columnMap","_unused2","getCommentsValue","getContactInfoValue","contactInfo","generateLineItemsXML","maxRows","xml","substring","purchaseOrderTemplate","companyInfo","staticFields","dynamicPrefixes","dataAttribute","totals","contact","getTemplateStructure","dynamicIdUtils","generateId","prefix","section","timestamp","random","Math","substr","getPossibleIds","baseName","isValidDynamicId","dynamicPattern","test","getFieldType","getSection","fieldMappingUtils","staticFieldNames","getFieldName","staticName","staticFieldName","l","toUpperCase","getFieldsForSection","template"],"sources":["/Users/waleed/Documents/GitHub/Cadbury3/src/templates/PurchaseOrderTemplate.js"],"sourcesContent":["// Purchase Order XML Template for NetSuite Integration\n// This template generates XML compatible with Big Faceless Report Generator (BFR)\n\nimport { processFormData } from './FormDataMapper';\n\n// Function to generate XML from React form data\nexport function generatePurchaseOrderXML(formData, options = {}) {\n  // DEBUG: Log that we're using the DYNAMIC ID template\n  console.log('🚀 DYNAMIC ID TEMPLATE VERSION LOADED - generatePurchaseOrderXML called');\n  console.log('📅 Template updated at:', new Date().toISOString());\n  console.log('📊 Raw form data received:', formData);\n  \n  // Process and validate form data using the FormDataMapper\n  let processedData;\n  try {\n    processedData = processFormData(formData, {\n      calculateTotals: options.calculateTotals !== false,\n      validate: options.validate !== false,\n      formatForXML: true,\n      throwOnValidationError: options.throwOnValidationError || false\n    });\n    console.log('📊 Processed form data:', processedData);\n  } catch (error) {\n    console.error('❌ Form data processing failed:', error);\n    if (options.throwOnValidationError) {\n      throw error;\n    }\n    // Fallback to using raw data\n    processedData = formData || {};\n  }\n  \n  // Merge processed data with original so ad-hoc fields (totals, shipping, UI line item keys) survive\n  // Prefer original ad-hoc keys when present (they reflect the live DOM at export time)\n  const data = {\n    ...(processedData || {}),\n    ...(formData || {})\n  };\n\n  // Normalize line items to expose both key styles expected by template rendering\n  if (Array.isArray(data.lineItems)) {\n    data.lineItems = data.lineItems.map((row) => {\n      const quantity = row.quantity ?? row.qty ?? '';\n      const unitPrice = row.unitPrice ?? row.rate ?? '';\n      const total = row.total ?? row.amount ?? '';\n      return {\n        ...row,\n        qty: row.qty ?? (quantity !== '' ? String(quantity) : ''),\n        rate: row.rate ?? (unitPrice !== '' ? String(unitPrice) : ''),\n        amount: row.amount ?? (total !== '' ? String(total) : ''),\n        quantity: row.quantity ?? (quantity !== '' ? Number(String(quantity).replace(/[$,]/g, '')) : 0),\n        unitPrice: row.unitPrice ?? (unitPrice !== '' ? Number(String(unitPrice).replace(/[$,]/g, '')) : 0),\n        total: row.total ?? (total !== '' ? Number(String(total).replace(/[$,]/g, '')) : 0)\n      };\n    });\n  }\n  \n  // IMPORTANT: For field ordering, use the original formData to preserve drag-and-drop order\n  const fieldOrderData = {\n    ...data,\n    companyFields: formData.companyFields || data.companyFields || [],\n    purchaseOrderFields: formData.purchaseOrderFields || data.purchaseOrderFields || [],\n    vendorFields: formData.vendorFields || data.vendorFields || [],\n    shipToFields: formData.shipToFields || data.shipToFields || []\n  };\n  \n  // DEBUG: Log field order data creation\n  console.log('🔍 DEBUG: fieldOrderData created with:');\n  console.log('🔍 DEBUG: - companyFields:', fieldOrderData.companyFields?.map(f => ({ id: f.id, label: f.label })));\n  console.log('🔍 DEBUG: - purchaseOrderFields:', fieldOrderData.purchaseOrderFields?.map(f => ({ id: f.id, label: f.label })));\n  console.log('🔍 DEBUG: - formData.companyFields:', formData.companyFields?.map(f => ({ id: f.id, label: f.label })));\n  console.log('🔍 DEBUG: - data.companyFields:', data.companyFields?.map(f => ({ id: f.id, label: f.label })));\n  \n  // VALIDATION: Ensure field order data is robust and independent of section order\n  console.log('🔍 DEBUG: Field order data validation:');\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields length:', fieldOrderData.companyFields?.length);\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields is array:', Array.isArray(fieldOrderData.companyFields));\n  console.log('🔍 DEBUG: - fieldOrderData.companyFields IDs:', fieldOrderData.companyFields?.map(f => f.id));\n  \n  // Ensure field order data is always available and valid\n  if (!Array.isArray(fieldOrderData.companyFields) || fieldOrderData.companyFields.length === 0) {\n    console.warn('⚠️ WARNING: companyFields is not available or empty, this may cause field order issues');\n  }\n  \n  // Helper function to safely get field values with fallbacks (for simple fields)\n  const getFieldValue = (fieldName, defaultValue = '') => {\n    return data[fieldName] || defaultValue;\n  };\n\n  // Enhanced helper function to get field values by dynamic ID or static fallback\n  const getDynamicFieldValue = (fieldArray, possibleIds, defaultValue = '') => {\n    if (!fieldArray || !Array.isArray(fieldArray)) {\n      return defaultValue;\n    }\n    \n    // Try each possible ID in order of preference\n    for (const fieldId of possibleIds) {\n      const field = fieldArray.find(f => f.id === fieldId);\n      if (field && field.value) {\n        return field.value;\n      }\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get company field values with dynamic ID support\n  const getCompanyFieldValue = (staticId, defaultValue = '') => {\n    if (data.companyFields && Array.isArray(data.companyFields)) {\n      // First try the static ID, then try dynamic IDs that might have been generated\n      const possibleIds = [\n        staticId,\n        `company-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.companyFields.filter(f => f.id.includes(staticId.replace('company-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.companyFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get purchase order field values with dynamic ID support\n  const getPOFieldValue = (staticId, defaultValue = '') => {\n    if (data.purchaseOrderFields && Array.isArray(data.purchaseOrderFields)) {\n      const possibleIds = [\n        staticId,\n        `po-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.purchaseOrderFields.filter(f => f.id.includes(staticId.replace('po-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.purchaseOrderFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get vendor field values with dynamic ID support\n  const getVendorFieldValue = (staticId, defaultValue = '') => {\n    if (data.vendorFields && Array.isArray(data.vendorFields)) {\n      const possibleIds = [\n        staticId,\n        `vendor-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.vendorFields.filter(f => f.id.includes(staticId.replace('vendor-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.vendorFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get ship-to field values with dynamic ID support\n  const getShipToFieldValue = (staticId, defaultValue = '') => {\n    if (data.shipToFields && Array.isArray(data.shipToFields)) {\n      const possibleIds = [\n        staticId,\n        `ship-to-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.shipToFields.filter(f => f.id.includes(staticId.replace('ship-to-', ''))).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.shipToFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalsFieldValue = (staticId, defaultValue = '') => {\n    if (data.totalsFields && Array.isArray(data.totalsFields)) {\n      const possibleIds = [\n        staticId,\n        `totals-field-${staticId}`,\n        `${staticId}-${Date.now()}`,\n        ...data.totalsFields.filter(f => f.id.includes(staticId)).map(f => f.id)\n      ];\n      return getDynamicFieldValue(data.totalsFields, possibleIds, defaultValue);\n    }\n    return defaultValue;\n  };\n\n  // --------------------------------------------------------------------------\n  // Generic label+value formatter for dynamic fields across sections\n  // Ensures fields like \"Tax ID Number\" render as \"Tax ID Number: 123...\"\n  // Avoids double-prefixing when the value already starts with the label/prefix\n  const formatFieldWithLabel = (field, rawValue) => {\n    const value = (rawValue ?? '').toString();\n    const labelText = (field?.label || field?.id || '').toString().replace(/:\\s*$/, '').trim();\n    if (!labelText) return value;\n    // If value already starts with the label or a known prefix, don't double prefix\n    const lowered = value.toLowerCase();\n    const loweredLabel = labelText.toLowerCase();\n    if (lowered.startsWith(`${loweredLabel}:`) || lowered.startsWith('phone:') || lowered.startsWith('fax:') || lowered.startsWith('website:')) {\n      return value || labelText; // if empty, show just label\n    }\n    if (!value) return labelText; // show label alone if no value\n    return `${labelText}: ${value}`;\n  };\n\n  // ============================================================================\n  // MODULAR XML BUILDER FUNCTIONS\n  // ============================================================================\n  \n  // Build Company Information XML with dynamic field ordering (same pattern as section swapping)y\n  \n  const buildCompanyXML = (position = 'left') => {\n    // Get company fields from fieldOrderData to preserve drag-and-drop order\n    const companyFields = fieldOrderData.companyFields || [];\n    \n    // CRITICAL: Get field order from data (same pattern as section order)\n    const fieldOrder = data.fieldOrder?.company || companyFields.map(f => f.id);\n    \n    console.log('🔀 Building company XML with dynamic field ordering');\n    console.log('🔀 Company fields received from data:', companyFields.length);\n    console.log('🔀 Company fields IDs in current order:', companyFields.map(f => f.id));\n    console.log('🔀 Company fields labels in current order:', companyFields.map(f => f.label));\n    console.log('🔀 Company fields values in current order:', companyFields.map(f => f.value));\n    console.log('🔀 Field order from data:', fieldOrder);\n    \n    // CRITICAL: Ensure field order is completely independent of section order\n    // The field order should be preserved exactly as it appears in fieldOrderData.companyFields\n    // regardless of whether this section is on the left or right\n    console.log('🔍 DEBUG: Field order independence verification:');\n    console.log('🔍 DEBUG: - Current section order:', data.sectionOrder?.sections1And2);\n    console.log('🔍 DEBUG: - Company fields order (should be independent):', companyFields.map(f => ({ id: f.id, label: f.label, position: companyFields.indexOf(f) })));\n    \n    // CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\n    const orderedCompanyFields = fieldOrder.map(fieldId => {\n      const field = companyFields.find(f => f.id === fieldId);\n      if (!field) {\n        console.warn(`⚠️ WARNING: Field with ID ${fieldId} not found in companyFields`);\n        return null;\n      }\n      return field;\n    }).filter(Boolean); // Remove any null fields\n    \n    console.log('🔀 Ordered company fields for XML generation:', orderedCompanyFields.map(f => ({ id: f.id, label: f.label, position: orderedCompanyFields.indexOf(f) })));\n    \n    // Build rows dynamically based on ordered field order (same as section swapping)\n    const fieldRows = orderedCompanyFields.map((field, index) => {\n      const fieldValue = field.value || field.placeholder || '';\n      const isHeader = field.id === 'company-name';\n      \n      console.log(`🔀 Processing field ${index}:`, { id: field.id, label: field.label, value: fieldValue, isHeader, position: index });\n      \n      if (isHeader) {\n        const row = `<tr><td class=\"header-company\" style=\"text-align: left;\" data-field=\"${field.id}\">${fieldValue}</td></tr>`;\n        console.log(`🔀 Generated header row for ${field.id}:`, row);\n        return row;\n      } else {\n        // Prefix generic dynamic fields with their label (except known special cases handled by formatter)\n        const displayText = formatFieldWithLabel(field, fieldValue);\n        const row = `<tr><td style=\"text-align: left;\" data-field=\"${field.id}\">${displayText}</td></tr>`;\n        console.log(`🔀 Generated regular row for ${field.id}:`, row);\n        return row;\n      }\n    }).join('');\n    \n    console.log('🔀 Final generated fieldRows:', fieldRows);\n    \n    // Side-aware padding to keep spacing consistent when swapped\n    const companyTdPadding = position === 'left' ? 'padding-right: 24px;' : 'padding-left: 36px;';\n    const result = `\n      <td style=\"width: 65%; ${companyTdPadding}\" data-section=\"company-info\">\n        <table>\n          ${fieldRows}\n        </table>\n      </td>\n    `;\n    \n    console.log('🔀 Final company XML result:', result);\n    return result;\n  };\n\n  // Build Purchase Order Information XML\n  const buildPurchaseOrderXML = (position = 'right') => {\n    // Get purchase order fields from fieldOrderData to preserve drag-and-drop order\n    const purchaseOrderFields = fieldOrderData.purchaseOrderFields || [];\n    \n    // CRITICAL: Get field order from data (same pattern as section order)\n    const fieldOrder = data.fieldOrder?.purchaseOrder || purchaseOrderFields.map(f => f.id);\n    \n    console.log('🔀 Building purchase order XML with dynamic field ordering');\n    console.log('🔀 Purchase order fields received from data:', purchaseOrderFields.length);\n    console.log('🔀 Purchase order fields IDs in current order:', purchaseOrderFields.map(f => f.id));\n    console.log('🔀 Field order from data:', fieldOrder);\n    \n    // CRITICAL: Reorder fields based on fieldOrder (same pattern as section swapping)\n    const orderedPOFields = fieldOrder.map(fieldId => {\n      const field = purchaseOrderFields.find(f => f.id === fieldId);\n      if (!field) {\n        console.warn(`⚠️ WARNING: Field with ID ${fieldId} not found in purchaseOrderFields`);\n        return null;\n      }\n      return field;\n    }).filter(Boolean); // Remove any null fields\n    \n    console.log('🔀 Ordered purchase order fields for XML generation:', orderedPOFields.map(f => ({ id: f.id, label: f.label, position: orderedPOFields.indexOf(f) })));\n    \n    // Build XML based on ordered fields\n    const fieldRows = orderedPOFields.map((field, index) => {\n      // Prefer captured value; fallback to template getters to ensure content always present\n      const isTitle = field.id === 'po-title';\n      if (isTitle) {\n        const value = field.value || getPOFieldValue('po-title', 'PURCHASE ORDER');\n        return `<tr><td class=\"header-title\" style=\"text-align: right;\" data-field=\"${field.id}\">${value}</td></tr>`;\n      }\n      if (field.id === 'po-date') {\n        const value = field.value || getPOFieldValue('po-date', 'MM/DD/YYYY');\n        return `<tr><td style=\"text-align: right;\"><table style=\"width: 100%;\"><tr><td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>DATE</b></td><td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-date\">${value}</td></tr></table></td></tr>`;\n      }\n      if (field.id === 'po-number') {\n        const value = field.value || getPOFieldValue('po-number', '[PO Number]');\n        return `<tr><td style=\"text-align: right;\"><table style=\"width: 100%;\"><tr><td class=\"header-info\" style=\"width: 30%; text-align: left;\"><b>PO #</b></td><td class=\"header-info\" style=\"width: 70%; text-align: left;\" data-field=\"po-number\">${value}</td></tr></table></td></tr>`;\n      }\n      \n      const genericValue = field.value || getPOFieldValue(field.id, '');\n      const displayText = formatFieldWithLabel(field, genericValue);\n      return `<tr><td style=\"text-align: right;\" data-field=\"${field.id}\">${displayText}</td></tr>`;\n    }).join('');\n    \n    // Side-aware padding: when PO is on the left, push it away from the right column\n    const poTdPadding = position === 'left' ? 'padding-right: 56px;' : 'padding-left: 28px;';\n    return `\n      <td style=\"width: 35%; ${poTdPadding}\" align=\"right\" data-section=\"purchase-order-info\">\n        <table>\n          ${fieldRows}\n        </table>\n      </td>\n    `;\n  };\n\n\n\n  // Build Vendor-ShipTo Section XML with dynamic ordering\n  const buildVendorShipToSectionXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo section with order:', { leftSection, rightSection });\n    console.log('🔀 sections3And4 array:', data.sectionOrder?.sections3And4);\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      // Default order: Vendor left, Ship To right\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n      console.log('🔀 Using default order: Vendor left, Ship To right');\n    } else {\n      // Swapped order: Ship To left, Vendor right\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n      console.log('🔀 Using swapped order: Ship To left, Vendor right');\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Shipping Details XML (REQUISITIONER, SHIP VIA, F.O.B., SHIPPING TERMS)\n  const buildShippingDetailsXML = () => {\n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"shipping-details\">\n        <tr>\n          <td class=\"section-header\" style=\"width: 25%;\">REQUISITIONER</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIP VIA</td>\n          <td class=\"section-header\" style=\"width: 25%;\">F.O.B.</td>\n          <td class=\"section-header\" style=\"width: 25%;\">SHIPPING TERMS</td>\n        </tr>\n        <tr>\n          <td class=\"section-content\" data-field=\"requisitioner\">${getShippingFieldValue('requisitioner', '[Requisitioner]')}</td>\n          <td class=\"section-content\" data-field=\"shipVia\">${getShippingFieldValue('shipVia', '[Ship Via]')}</td>\n          <td class=\"section-content\" data-field=\"fob\">${getShippingFieldValue('fob', '[FOB]')}</td>\n          <td class=\"section-content\" data-field=\"shippingTerms\">${getShippingFieldValue('shippingTerms', '[Shipping Terms]')}</td>\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor-ShipTo AND Shipping Details sections with vertical swapping\n  const buildVendorShipToAndShippingDetailsXML = () => {\n    // Get section order from data, default to [sections3And4, sections5And6] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4And5And6 || ['sections3And4', 'sections5And6'];\n    const topSection = sectionOrder[0];\n    const bottomSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor-shipTo + shipping details with order:', { topSection, bottomSection });\n    console.log('🔀 sections3And4And5And6 array:', data.sectionOrder?.sections3And4And5And6);\n    \n    let topContent, bottomContent;\n    \n    if (topSection === 'sections3And4') {\n      // Default order: Vendor-ShipTo on top, Shipping Details below\n      topContent = buildVendorShipToSectionXML();\n      bottomContent = buildShippingDetailsXML();\n      console.log('🔀 Using default order: Vendor-ShipTo top, Shipping Details bottom');\n    } else {\n      // Swapped order: Shipping Details on top, Vendor-ShipTo below\n      topContent = buildShippingDetailsXML();\n      bottomContent = buildVendorShipToSectionXML();\n      console.log('🔀 Using swapped order: Shipping Details top, Vendor-ShipTo bottom');\n    }\n    \n    return `\n      ${topContent}\n      ${bottomContent}\n    `;\n  };\n\n  // Build Header Section XML (Company + Purchase Order) with dynamic ordering\n  const buildHeaderSectionXML = () => {\n    // Get section order from data, default to [section1, section2] if not provided\n    const sectionOrder = data.sectionOrder?.sections1And2 || ['section1', 'section2'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building header section with order:', { leftSection, rightSection });\n    console.log('🔀 Full sectionOrder data:', data.sectionOrder);\n    console.log('🔀 Full data object keys:', Object.keys(data));\n    console.log('🔀 sections1And2 array:', data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 type:', typeof data.sectionOrder?.sections1And2);\n    console.log('🔀 sections1And2 length:', data.sectionOrder?.sections1And2?.length);\n    console.log('🔀 sections1And2 values:', JSON.stringify(data.sectionOrder?.sections1And2));\n    \n    // DEBUG: Check field order data when building header\n    console.log('🔍 DEBUG: fieldOrderData.companyFields when building header:', fieldOrderData.companyFields?.map(f => ({ id: f.id, label: f.label })));\n    console.log('🔍 DEBUG: fieldOrderData.purchaseOrderFields when building header:', fieldOrderData.purchaseOrderFields?.map(f => ({ id: f.id, label: f.label })));\n    \n    // IMPORTANT: Field order should be completely independent of section order\n    // Always use the current field order from fieldOrderData, regardless of section position\n    console.log('🔍 DEBUG: Ensuring field order independence from section order');\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section1') {\n      // Company on left, Purchase Order on right\n      leftColumn = buildCompanyXML('left');\n      rightColumn = buildPurchaseOrderXML('right');\n      console.log('🔀 Using default order: Company left, Purchase Order right');\n    } else {\n      // Purchase Order on left, Company on right (sections swapped)\n      leftColumn = buildPurchaseOrderXML('left');\n      rightColumn = buildCompanyXML('right');\n      console.log('🔀 Using swapped order: Purchase Order left, Company right');\n    }\n    \n    // DEBUG: Verify that field order is preserved regardless of section position\n    console.log('🔍 DEBUG: Field order verification - Company fields should maintain custom order');\n    console.log('🔍 DEBUG: Final company XML will use fieldOrderData.companyFields order');\n    \n    return `\n      <table>\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Vendor Information XML (dynamic label prefixing for all fields)\n  const buildVendorXML = () => {\n    // Get field order for vendor; fallback to current array order if not provided\n    const vendorFields = fieldOrderData.vendorFields || [];\n    const vendorFieldOrder = data.fieldOrder?.vendor || vendorFields.map(f => f.id);\n    \n    const orderedVendorFields = vendorFieldOrder.map(fieldId => vendorFields.find(f => f.id === fieldId)).filter(Boolean);\n    \n    const rows = orderedVendorFields.map(f => {\n      const raw = f.value || getVendorFieldValue(f.id, '');\n      const display = formatFieldWithLabel(f, raw);\n      return `<span data-field=\"${f.id}\">${display}</span>`;\n    }).join('<br/>');\n    \n    return `\n      <td style=\"width: 50%;\" data-subsection=\"vendor\">\n        <table>\n          <tr>\n            <td class=\"section-header\">VENDOR</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">${rows}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n \n  // Build Ship To Information XML (dynamic label prefixing for all fields)\n  const buildShipToXML = () => {\n    // Get field order for ship-to; fallback to current array order if not provided\n    const shipToFields = fieldOrderData.shipToFields || [];\n    const shipToFieldOrder = data.fieldOrder?.shipTo || shipToFields.map(f => f.id);\n    \n    const orderedShipToFields = shipToFieldOrder.map(fieldId => shipToFields.find(f => f.id === fieldId)).filter(Boolean);\n    \n    const rows = orderedShipToFields.map(f => {\n      const raw = f.value || getShipToFieldValue(f.id, '');\n      const display = formatFieldWithLabel(f, raw);\n      return `<span data-field=\"${f.id}\">${display}</span>`;\n    }).join('<br/>');\n    \n    return `\n      <td style=\"width: 50%;\" data-subsection=\"ship-to\">\n        <table>\n          <tr>\n            <td class=\"section-header\">SHIP TO</td>\n          </tr>\n          <tr>\n            <td class=\"section-content\">${rows}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Vendor/Ship-To Section XML with dynamic ordering\n  const buildVendorShipToXML = () => {\n    // Get section order from data, default to [section3, section4] if not provided\n    const sectionOrder = data.sectionOrder?.sections3And4 || ['section3', 'section4'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building vendor/ship-to section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section3') {\n      leftColumn = buildVendorXML();\n      rightColumn = buildShipToXML();\n    } else {\n      leftColumn = buildShipToXML();\n      rightColumn = buildVendorXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 20px;\" data-section=\"vendor-ship-to\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Build Line Items XML with dynamic column ordering\n  const buildLineItemsXML = () => {\n    // Get column order from data, default to standard order if not provided\n    const columnOrder = data.sectionOrder?.lineItemColumns || ['itemNumber', 'description', 'qty', 'rate', 'amount'];\n    \n    console.log('🔀 Building line items with column order:', columnOrder);\n    console.log('🔀 Line items data:', data.lineItems);\n    console.log('🔀 Column order from state:', data.sectionOrder?.lineItemColumns);\n    \n    // Column configuration mapping\n    const columnConfig = {\n      itemNumber: { label: 'Item#', colSpan: 3, field: 'itemNumber' },\n      description: { label: 'Description', colSpan: 12, field: 'description' },\n      qty: { label: 'Qty', colSpan: 2, field: 'qty' },\n      rate: { label: 'Rate', colSpan: 3, field: 'rate' },\n      amount: { label: 'Amount', colSpan: 3, field: 'amount' }\n    };\n    \n    // Build header row\n    const headerRow = columnOrder.map(columnId => {\n      const config = columnConfig[columnId];\n      return `<td class=\"item-header\" colSpan=\"${config.colSpan}\">${config.label}</td>`;\n    }).join('');\n    \n    // Build data rows using actual line item data\n    const lineItems = data.lineItems || [];\n    const dataRows = Array(5).fill(0).map((_, rowIndex) => {\n      const rowData = lineItems[rowIndex] || {};\n      const rowCells = columnOrder.map(columnId => {\n        const config = columnConfig[columnId];\n        // Resolve value with fallbacks between UI keys and numeric keys\n        let fieldValue = rowData[columnId];\n        if (fieldValue === undefined || fieldValue === null || fieldValue === '') {\n          if (columnId === 'qty') fieldValue = rowData.quantity;\n          else if (columnId === 'rate') fieldValue = rowData.unitPrice;\n          else if (columnId === 'amount') fieldValue = rowData.total;\n        }\n        if (fieldValue === undefined || fieldValue === null || fieldValue === '') fieldValue = '-';\n        return `<td colSpan=\"${config.colSpan}\">${fieldValue}</td>`;\n      }).join('');\n      \n      return `<tr data-row-id=\"line-item-${rowIndex}\" data-row-index=\"${rowIndex}\">${rowCells}</tr>`;\n    }).join('');\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"line-items\">\n        <tr>\n          ${headerRow}\n        </tr>\n        ${dataRows}\n      </table>\n    `;\n  };\n\n  // Build Comments Section XML\n  const buildCommentsXML = () => {\n    const comments = getFieldValue('comments', '[Enter comments or special instructions...]');\n    return `\n      <td style=\"width: 50%;\" data-section=\"comments\">\n        <table>\n          <tr>\n            <td class=\"comments-header\">Comments or Special Instructions</td>\n          </tr>\n          <tr>\n            <td class=\"comments-content\">${comments}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Totals Section XML\n  const buildTotalsXML = () => {\n    // Prefer values passed on formData (export payload) → then DOM → then totalsFields\n    const prefer = (key, fallbackId) =>\n      (data[key] && String(data[key]).trim()) || getTotalFieldValue(fallbackId, '') || getTotalsFieldValue(fallbackId, '');\n\n    const subtotal = prefer('subtotal', 'subtotal') || '$0.00';\n    const tax = prefer('tax', 'tax') || '$0.00';\n    const shipping = prefer('shipping', 'shipping') || '$0.00';\n    const other = prefer('other', 'other') || '$0.00';\n    const total = prefer('total', 'total') || '$0.00';\n    \n    // Use table rows/cells for maximum NetSuite/BFO compatibility (avoid nested divs)\n    return `\n      <td style=\"width: 50%;\" data-section=\"totals\">\n        <table>\n          <tr>\n            <td class=\"section-header\" colspan=\"2\">Totals</td>\n          </tr>\n          <tr>\n            <td class=\"total-label\">SUBTOTAL:</td>\n            <td class=\"total-amount\" align=\"right\">${subtotal}</td>\n          </tr>\n          <tr>\n            <td class=\"total-label\">TAX:</td>\n            <td class=\"total-amount\" align=\"right\">${tax}</td>\n          </tr>\n          <tr>\n            <td class=\"total-label\">SHIPPING:</td>\n            <td class=\"total-amount\" align=\"right\">${shipping}</td>\n          </tr>\n          <tr>\n            <td class=\"total-label\">OTHER:</td>\n            <td class=\"total-amount\" align=\"right\">${other}</td>\n          </tr>\n          <tr>\n            <td class=\"total-label\">TOTAL:</td>\n            <td class=\"total-amount\" align=\"right\">${total}</td>\n          </tr>\n        </table>\n      </td>\n    `;\n  };\n\n  // Build Comments and Totals Section XML with dynamic ordering\n  const buildCommentsTotalsXML = () => {\n    // Get section order from data, default to [section8, section9] if not provided\n    const sectionOrder = data.sectionOrder?.sections8And9 || ['section8', 'section9'];\n    const leftSection = sectionOrder[0];\n    const rightSection = sectionOrder[1];\n    \n    console.log('🔀 Building comments/totals section with order:', { leftSection, rightSection });\n    \n    let leftColumn, rightColumn;\n    \n    if (leftSection === 'section8') {\n      leftColumn = buildCommentsXML();\n      rightColumn = buildTotalsXML();\n    } else {\n      leftColumn = buildTotalsXML();\n      rightColumn = buildCommentsXML();\n    }\n    \n    return `\n      <table style=\"margin-top: 15px;\" data-section=\"comments-totals\">\n        <tr>\n          ${leftColumn}\n          ${rightColumn}\n        </tr>\n      </table>\n    `;\n  };\n\n  // Helper function to get shipping details field values with dynamic ID support\n  const getShippingFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `.shipping-field-${fieldType} .editable-field`,\n      `.shipping-field[data-field=\"${fieldType}\"] .editable-field`,\n      `.shipping-${fieldType} .editable-field`,\n      `#shipping-${fieldType}`,\n      `[data-shipping-field=\"${fieldType}\"]`\n    ];\n    \n    // Try to get value from DOM or data object\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get line item values with dynamic ID support\n  const getLineItemValue = (rowIndex, fieldType, defaultValue = '') => {\n    // Map template field names to live table data-column ids\n    const colIdMap = { quantity: 'qty', unitPrice: 'rate', total: 'amount' };\n    const colId = colIdMap[fieldType] || fieldType; // itemNumber, description pass through\n\n    const possibleSelectors = [\n      `#line-item-${rowIndex}-${fieldType}`,\n      `.line-item-row[data-row=\"${rowIndex}\"] .${colId}-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) .${colId}-field .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td[data-column=\"${colId}\"] .editable-field`,\n      `.itemtable tbody tr:nth-child(${rowIndex + 1}) td:nth-child(${getColumnIndex(fieldType)}) .editable-field`\n    ];\n    \n    // Try data object first\n    if (data.lineItems && data.lineItems[rowIndex] && data.lineItems[rowIndex][fieldType]) {\n      return data.lineItems[rowIndex][fieldType];\n    }\n    \n    // Try DOM selectors with debugging\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      const text = element ? element.textContent.trim() : '';\n      try { console.debug('🔎 XML getLineItemValue', { rowIndex, fieldType, colId, selector, found: !!element, text }); } catch {}\n      if (text) return text;\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get column index for line items\n  const getColumnIndex = (fieldType) => {\n    const columnMap = {\n      itemNumber: 2,\n      description: 3,\n      quantity: 4,\n      unitPrice: 5,\n      total: 6\n    };\n    return columnMap[fieldType] || 1;\n  };\n\n  // Helper function to get totals field values with dynamic ID support\n  const getTotalFieldValue = (fieldType, defaultValue = '') => {\n    const possibleSelectors = [\n      `#total-${fieldType}`,\n      `.total-${fieldType} .editable-field`,\n      `.total-row[data-field=\"${fieldType}\"] .editable-field`,\n      `.totals-section .${fieldType}-field .editable-field`,\n      // Subtotal and total are displayed as calculated spans\n      `.totals-section .total-row[data-field=\"subtotal\"] .calculated-field`,\n      `.totals-section .total-row[data-field=\"total\"] .total-field`\n    ];\n    \n    // Try data object first\n    if (data[fieldType]) {\n      return data[fieldType];\n    }\n    \n    // Try DOM selectors with debugging\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      const text = element ? element.textContent.trim() : '';\n      try { console.debug('🔎 XML getTotalFieldValue', { fieldType, selector, found: !!element, text }); } catch {}\n      if (text) return text;\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get comments field value with dynamic ID support\n  const getCommentsValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#comments-field',\n      '.comments-content .editable-field',\n      '.comments-section .editable-field',\n      '[data-field=\"comments\"]'\n    ];\n    \n    // Try data object first\n    if (data.comments) {\n      return data.comments;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Helper function to get contact info field value with dynamic ID support\n  const getContactInfoValue = (defaultValue = '') => {\n    const possibleSelectors = [\n      '#contact-info-field',\n      '.contact-section .editable-field',\n      '.contact-info .editable-field',\n      '[data-field=\"contactInfo\"]'\n    ];\n    \n    // Try data object first\n    if (data.contactInfo) {\n      return data.contactInfo;\n    }\n    \n    // Try DOM selectors\n    for (const selector of possibleSelectors) {\n      const element = document.querySelector(selector);\n      if (element && element.textContent.trim()) {\n        return element.textContent.trim();\n      }\n    }\n    \n    return defaultValue;\n  };\n\n  // Generate line items XML with dynamic ID support\n  const generateLineItemsXML = () => {\n    const maxRows = 5; // Standard number of line item rows\n    \n    // Generate rows (either from data or empty placeholder rows)\n    return Array(maxRows).fill(0).map((_, index) => {\n      // Try to get values using dynamic ID system\n      const itemNumber = getLineItemValue(index, 'itemNumber', '-');\n      const description = getLineItemValue(index, 'description', '-');\n      const quantity = getLineItemValue(index, 'quantity', '-');\n      const unitPrice = getLineItemValue(index, 'unitPrice', '-');\n      const total = getLineItemValue(index, 'total', '-');\n      \n      return `\n        <tr data-row-id=\"line-item-${index}\" data-row-index=\"${index}\">\n            <td class=\"item-cell\" align=\"left\" colspan=\"3\" data-field=\"itemNumber\" data-row=\"${index}\">${itemNumber}</td>\n            <td class=\"item-cell\" align=\"left\" colspan=\"12\" data-field=\"description\" data-row=\"${index}\">${description}</td>\n            <td class=\"item-cell\" align=\"center\" colspan=\"2\" data-field=\"quantity\" data-row=\"${index}\">${quantity}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"unitPrice\" data-row=\"${index}\">${unitPrice}</td>\n            <td class=\"item-cell\" align=\"right\" colspan=\"3\" data-field=\"total\" data-row=\"${index}\">${total}</td>\n        </tr>`;\n    }).join('');\n  };\n\n  // Generate the complete XML using the new template structure\n  const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE pdf PUBLIC \"-//big.faceless.org//report\" \"report-1.1.dtd\">\n<pdf>\n<head>\n    <meta name=\"title\" value=\"Purchase Order\"/>\n    <meta name=\"author\" value=\"Purchase Order Generator\"/>\n    <meta name=\"subject\" value=\"Purchase Order\"/>\n    <meta name=\"creator\" value=\"Purchase Order Generator\"/>\n    <meta name=\"producer\" value=\"Purchase Order Generator\"/>\n    <meta name=\"creationDate\" value=\"${new Date().toISOString()}\"/>\n    <meta name=\"modDate\" value=\"${new Date().toISOString()}\"/>\n    <link name=\"NotoSans\" type=\"font\" subtype=\"truetype\" src=\"\\${nsfont.NotoSans_Regular}\" src-bold=\"\\${nsfont.NotoSans_Bold}\" src-italic=\"\\${nsfont.NotoSans_Italic}\" src-bolditalic=\"\\${nsfont.NotoSans_BoldItalic}\" bytes=\"2\" />\n    <style>\n        * { font-family: NotoSans, sans-serif; font-size: 9pt; }\n        table { width: 100%; border-collapse: collapse; }\n        .header-company { font-size: 14pt; font-weight: bold; }\n        .header-title { font-size: 20pt; font-weight: bold; background-color: #333333; color: #ffffff; padding: 6px; border: 1px solid #000; }\n        .header-info { font-size: 10pt; }\n        .section-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .section-content { padding: 6px; border: 1px solid #000; vertical-align: top; }\n        .item-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 8px; border: 1px solid #000; }\n        .item-cell { padding: 6px; border: 1px solid #000; }\n        .total-label { font-weight: bold; padding: 4px; }\n        .total-amount { font-weight: bold; padding: 4px; background-color: #ffff99; }\n        .comments-header { background-color: #333333; color: #ffffff; font-weight: bold; padding: 6px; border: 1px solid #000; }\n        .comments-content { padding: 6px; border: 1px solid #000; min-height: 40px; }\n        .contact-info { font-size: 8pt; }\n    </style>\n</head>\n<body padding=\"0.5in\" size=\"Letter\">\n    \n    ${buildHeaderSectionXML()}\n    ${buildVendorShipToAndShippingDetailsXML()}\n\n\n    ${buildLineItemsXML()}\n\n\n    ${buildCommentsTotalsXML()}\n\n\n\n    <table style=\"margin-top: 20px;\" data-section=\"contact-signature\">\n        <tr>\n            <td class=\"contact-info\" style=\"width: 70%;\" data-field=\"contact-info\">\n                ${getContactInfoValue('For inquiries, please contact us')}\n            </td>\n            <td style=\"width: 30%; text-align: center;\" data-field=\"signature\">\n                <table style=\"width: 100%;\">\n                    <tr>\n                        <td style=\"border-top: 1px solid #000; padding-top: 10px;\">\n                            Authorized Signature\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</pdf>`;\n\n  console.log('✅ DYNAMIC ID TEMPLATE: XML generated successfully with dynamic field support');\n  console.log('📄 XML preview (first 200 chars):', xml.substring(0, 200));\n  return xml;\n}\n\n// Export the template structure for reference with dynamic ID support\nexport const purchaseOrderTemplate = {\n  companyInfo: {\n    staticFields: ['company-name', 'company-address', 'company-city-state', 'company-phone', 'company-fax', 'company-website'],\n    dynamicPrefixes: ['company-field-', 'company-'],\n    dataAttribute: 'data-section=\"company-info\"'\n  },\n  purchaseOrder: {\n    staticFields: ['po-title', 'po-date', 'po-number'],\n    dynamicPrefixes: ['po-field-', 'po-'],\n    dataAttribute: 'data-section=\"purchase-order-info\"'\n  },\n  vendor: {\n    staticFields: ['vendor-company', 'vendor-contact', 'vendor-address', 'vendor-city-state', 'vendor-phone', 'vendor-fax'],\n    dynamicPrefixes: ['vendor-field-', 'vendor-'],\n    dataAttribute: 'data-subsection=\"vendor\"'\n  },\n  shipTo: {\n    staticFields: ['ship-to-name', 'ship-to-company', 'ship-to-address', 'ship-to-city-state', 'ship-to-phone', 'ship-to-fax'],\n    dynamicPrefixes: ['ship-to-field-', 'ship-to-'],\n    dataAttribute: 'data-subsection=\"ship-to\"'\n  },\n  shipping: {\n    staticFields: ['requisitioner', 'shipVia', 'fob', 'shippingTerms'],\n    dynamicPrefixes: ['shipping-field-', 'shipping-'],\n    dataAttribute: 'data-section=\"shipping-details\"'\n  },\n  lineItems: {\n    staticFields: ['itemNumber', 'description', 'quantity', 'unitPrice', 'total'],\n    dynamicPrefixes: ['line-item-', 'item-'],\n    dataAttribute: 'data-section=\"line-items\"',\n    maxRows: 5\n  },\n  totals: {\n    staticFields: ['subtotal', 'tax', 'shipping', 'other', 'total'],\n    dynamicPrefixes: ['total-', 'totals-'],\n    dataAttribute: 'data-subsection=\"totals\"'\n  },\n  comments: {\n    staticFields: ['comments'],\n    dynamicPrefixes: ['comments-field-', 'comment-'],\n    dataAttribute: 'data-subsection=\"comments\"'\n  },\n  contact: {\n    staticFields: ['contactInfo'],\n    dynamicPrefixes: ['contact-info-field-', 'contact-'],\n    dataAttribute: 'data-section=\"contact-signature\"'\n  }\n};\n\n// Export a simple function to get template structure\nexport function getTemplateStructure() {\n  return purchaseOrderTemplate;\n}\n\n// Dynamic ID Generation Utilities\nexport const dynamicIdUtils = {\n  // Generate a new dynamic ID with timestamp and random component\n  generateId: (prefix = 'field', section = 'general') => {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${section}-${prefix}-${timestamp}-${random}`;\n  },\n\n  // Generate multiple possible IDs for a field to try when looking up values\n  getPossibleIds: (staticId, section = 'unknown') => {\n    const baseName = staticId.replace(/^(company-|po-|vendor-|ship-to-)/, '');\n    return [\n      staticId, // Try static ID first\n      `${section}-field-${staticId}`,\n      `${section}-${baseName}`,\n      `${staticId}-${Date.now()}`,\n      `field-${baseName}`,\n      baseName\n    ];\n  },\n\n  // Validate if an ID follows our dynamic ID pattern\n  isValidDynamicId: (id) => {\n    const dynamicPattern = /^[a-z-]+-(field-)?[a-z-]+(-\\d+)?(-[a-z0-9]+)?$/;\n    return dynamicPattern.test(id);\n  },\n\n  // Extract the base field type from any ID (static or dynamic)\n  getFieldType: (id) => {\n    // Remove common prefixes and suffixes to get the core field type\n    return id\n      .replace(/^(company-|po-|vendor-|ship-to-|shipping-|total-|line-item-|comments-|contact-)/, '')\n      .replace(/-(field-)?(\\d+)?(-[a-z0-9]+)?$/, '')\n      .replace(/^(field-)?/, '');\n  },\n\n  // Get section from ID\n  getSection: (id) => {\n    if (id.startsWith('company-')) return 'company';\n    if (id.startsWith('po-')) return 'purchase-order';\n    if (id.startsWith('vendor-')) return 'vendor';\n    if (id.startsWith('ship-to-')) return 'ship-to';\n    if (id.startsWith('shipping-')) return 'shipping';\n    if (id.startsWith('line-item-')) return 'line-items';\n    if (id.startsWith('total-')) return 'totals';\n    if (id.startsWith('comments-')) return 'comments';\n    if (id.startsWith('contact-')) return 'contact';\n    return 'unknown';\n  }\n};\n\n// Field Mapping Utilities\nexport const fieldMappingUtils = {\n  // Map all known static field IDs to their readable names\n  staticFieldNames: {\n    // Company fields\n    'company-name': 'Company Name',\n    'company-address': 'Street Address',\n    'company-city-state': 'City, State, ZIP',\n    'company-phone': 'Phone Number',\n    'company-fax': 'Fax Number',\n    'company-website': 'Website',\n    \n    // Purchase Order fields\n    'po-title': 'Purchase Order Title',\n    'po-date': 'Date',\n    'po-number': 'PO Number',\n    \n    // Vendor fields\n    'vendor-company': 'Vendor Company',\n    'vendor-contact': 'Vendor Contact',\n    'vendor-address': 'Vendor Address',\n    'vendor-city-state': 'Vendor City/State',\n    'vendor-phone': 'Vendor Phone',\n    'vendor-fax': 'Vendor Fax',\n    \n    // Ship To fields\n    'ship-to-name': 'Ship To Name',\n    'ship-to-company': 'Ship To Company',\n    'ship-to-address': 'Ship To Address',\n    'ship-to-city-state': 'Ship To City/State',\n    'ship-to-phone': 'Ship To Phone',\n    'ship-to-fax': 'Ship To Fax',\n    \n    // Shipping fields\n    'requisitioner': 'Requisitioner',\n    'shipVia': 'Ship Via',\n    'fob': 'F.O.B.',\n    'shippingTerms': 'Shipping Terms',\n    \n    // Line item fields\n    'itemNumber': 'Item Number',\n    'description': 'Description',\n    'quantity': 'Quantity',\n    'unitPrice': 'Unit Price',\n    'total': 'Total',\n    \n    // Totals fields\n    'subtotal': 'Subtotal',\n    'tax': 'Tax',\n    'shipping': 'Shipping',\n    'other': 'Other',\n    \n    // Other fields\n    'comments': 'Comments',\n    'contactInfo': 'Contact Information'\n  },\n\n  // Get human-readable name for any field ID\n  getFieldName: (id) => {\n    const staticName = fieldMappingUtils.staticFieldNames[id];\n    if (staticName) return staticName;\n    \n    // For dynamic IDs, try to extract the base field type\n    const fieldType = dynamicIdUtils.getFieldType(id);\n    const staticFieldName = fieldMappingUtils.staticFieldNames[fieldType];\n    if (staticFieldName) return staticFieldName;\n    \n    // Fallback: humanize the ID\n    return id.replace(/[-_]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  },\n\n  // Get all field IDs for a section\n  getFieldsForSection: (section) => {\n    const template = purchaseOrderTemplate[section];\n    return template ? template.staticFields : [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}